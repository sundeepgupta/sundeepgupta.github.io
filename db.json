{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1487304100000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1487304100000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1487304100000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1487304100000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1487304100000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1487304100000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1487304100000},{"_id":"source/_posts/test.md","hash":"1db2bce9d35feb20ff74100f0186d51cf805c092","modified":1487305352000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1487304100000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1487304100000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1487304100000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1487304100000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1487304100000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1487304100000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1487304100000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1487304100000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1487304100000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1487304100000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1487304100000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487304100000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487304100000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1487304100000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1487304100000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1487304100000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1487304100000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1487304100000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1487304100000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1487304100000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1487304100000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1487304100000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1487304100000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1487304100000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1487304100000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1487304100000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1487304100000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1487304100000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1487304100000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1487304100000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487304100000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1487304100000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1487304100000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1487304100000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1487304100000},{"_id":"public/2017/02/16/hello-world/index.html","hash":"d4ce772570b09cb0a58d98785b68407e38c1939c","modified":1487305558466},{"_id":"public/archives/index.html","hash":"2a04bf64242d6a96974b609b31cb41deb25be27b","modified":1487305558480},{"_id":"public/archives/2017/index.html","hash":"6893046bf5d8441c96d06f65f6a9fd87e4727638","modified":1487305558480},{"_id":"public/archives/2017/02/index.html","hash":"714839b9351a1b3ff66d4e8517764edc37674806","modified":1487305558480},{"_id":"public/index.html","hash":"e01a35fe6d071985968f7dffa29314fb532fdf61","modified":1487305558480},{"_id":"public/2017/02/16/test/index.html","hash":"2ea82317fedc0ada87ae1113b72202296f113f45","modified":1487305558352},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487305371279},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487305371279},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487305371279},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487305371279},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487305371279},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487305371279},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1487305371280},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1487305371280},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1487305371280},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487305371280},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1487305371781},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1487305371789},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1487305371789},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487305371789},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1487305371789},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1487305371789},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1487305371789},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487305371789},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1487305371791},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1487305371791},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1487305371792},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1487305371792},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1487305371792},{"_id":"source/_posts/be-better-by-being-present.md","hash":"c0e3c9e16bdc8fc88e1b0b87eca40876c67e4e49","modified":1487305543000},{"_id":"source/_posts/blog-software-developer.md","hash":"a06509d669631c5822b02daf244d8fa69e5c464d","modified":1487305543000},{"_id":"source/_posts/breaking-down-successful-pair-programming.md","hash":"06080983f1cc813b819e0897a29da73b1fca6a37","modified":1487305543000},{"_id":"source/_posts/clean-code-the-book.md","hash":"c6b1fc1426a076e5a2b3bb4e8f65b214c4dd431f","modified":1487305543000},{"_id":"source/_posts/dependency-injection-example-in-swift.md","hash":"5f037db613a9fc913c751cc9c92deafd81fbd529","modified":1487305543000},{"_id":"source/_posts/designing-truly-balanced-life-possible.md","hash":"20593c29ca00d31b058862689c5415d15e9b2fe8","modified":1487305543000},{"_id":"source/_posts/finding-purpose-bouncing-icon-clarified-mine.md","hash":"e28f9f5764d21dbd5c7e3ee247ceda0aca8cda51","modified":1487305543000},{"_id":"source/_posts/handling-web-view-requests-using-the-chain-of-responsibility-pattern.md","hash":"41bf38c465171d2c50006813b14ef2e19d750826","modified":1487305543000},{"_id":"source/_posts/how-to-sell-without-selling.md","hash":"c28ddb6f9b258030fd8fc9e3916fb300827f6aa0","modified":1487305543000},{"_id":"source/_posts/how-to-speed-up-modal-animations-in-ios.md","hash":"5cf8ceca78d502f6309ccd121a7e778f53579b84","modified":1487305543000},{"_id":"source/_posts/ios-8-share-extension-example-swift.md","hash":"4d628afda11f661181e0055121892e5396e7ac98","modified":1487305543000},{"_id":"source/_posts/ios-core-data-concurrency-example.md","hash":"f4e724947a6dd72f7cdb26e9d73f7a0276a351cb","modified":1487305543000},{"_id":"source/_posts/ios-modal-call-sequence.md","hash":"948457354ecb4b5113a94ae663ace3775833b2db","modified":1487305543000},{"_id":"source/_posts/ios-testing-tips-kiwi.md","hash":"318093771ae9e38d730e8a9216a76492348ef4b6","modified":1487305543000},{"_id":"source/_posts/liquid-smooth-ios-collection-view-scrolling-lots-images.md","hash":"5a3d94f6808bb07819e1b7fabe8f531760964dfb","modified":1487305543000},{"_id":"source/_posts/longest-variable-name-ever.md","hash":"b3f6ca56209b1b380e60df0a199e213af18a4db7","modified":1487305543000},{"_id":"source/_posts/making-sure-you-get-paid-by-your-clients.md","hash":"8943c5b28ccabb3129db7cfcb46e4f5cba2b033b","modified":1487305543000},{"_id":"source/_posts/strategy-pattern-done-functional-programming.md","hash":"9b9a4103b224955f76ed1b53ab03a7f190293ccc","modified":1487305543000},{"_id":"source/_posts/working-contacts-ios-addressbook-tutorial.md","hash":"56155197b4dc2e9b3227331a378600f67985b10f","modified":1487305543000},{"_id":"source/reading/index.md","hash":"3f19261ad18e8af3a0cce69a3a6a06d031227d81","modified":1487305543000},{"_id":"source/_posts/writing-clean-functions.md","hash":"5dd351a985b980fa8042ad076059aa6b1cd6245f","modified":1487305543000},{"_id":"source/_posts/writing-great-git-commit-messages.md","hash":"72d2fc347acead758cba294f3fcf8df274d8f1ba","modified":1487305543000},{"_id":"source/me/index.md","hash":"36a07510c615686d936eef22802836ad03c8b28a","modified":1487305543000},{"_id":"public/reading/index.html","hash":"fee8d7bb40c4c42f96469d448d71a434c646d309","modified":1487305558490},{"_id":"public/me/index.html","hash":"fd01fcf8eb30579cdf6f2306cd2d958f1bec84ee","modified":1487305558491},{"_id":"public/2015/01/17/writing-great-git-commit-messages/index.html","hash":"0fe3ad971d6d915f6fa690881683591e5dfe0e35","modified":1487305558491},{"_id":"public/2015/01/10/blog-software-developer/index.html","hash":"9d1f630fd084e93c2dcc6b5fde5f054aab1220ce","modified":1487305558491},{"_id":"public/2014/12/10/ios-modal-call-sequence/index.html","hash":"ae79d038cdf1df313b1b39fb67fdce869305d40d","modified":1487305558492},{"_id":"public/2014/01/22/ios-testing-tips-kiwi/index.html","hash":"742a12a321e5ead942828a0bc27e14dd2fa317dd","modified":1487305558492},{"_id":"public/2013/06/20/how-to-sell-without-selling/index.html","hash":"329aff2fe2423f3fb49ee9da1dfec814d4d0f159","modified":1487305558492},{"_id":"public/2013/06/17/longest-variable-name-ever/index.html","hash":"e3a958af3c35ce758912358d01a46c8bb22bff91","modified":1487305558492},{"_id":"public/2013/06/06/clean-code-the-book/index.html","hash":"a87dab2394d104b63a2906cf2b29d7a28ad6b0d8","modified":1487305558492},{"_id":"public/2013/05/27/finding-purpose-bouncing-icon-clarified-mine/index.html","hash":"838377483cd3d0cfa334c822277da09f4c739a9e","modified":1487305558492},{"_id":"public/categories/Uncategorized/index.html","hash":"9ac8524baf7b1d21080d34f9c40e53827c8345e5","modified":1487305558492},{"_id":"public/categories/Uncategorized/page/2/index.html","hash":"f97d4ee6557279122b039d7d45e6efb690fbff4f","modified":1487305558492},{"_id":"public/categories/Uncategorized/page/3/index.html","hash":"2a36e937a187a148007b52c214f4d13a40210098","modified":1487305558492},{"_id":"public/page/3/index.html","hash":"c5e884c74f708d6e3ded9828a648b4dc10949e62","modified":1487305558492},{"_id":"public/archives/page/2/index.html","hash":"f0794b3e792efcdda9571318854f1107d8c5efc6","modified":1487305558492},{"_id":"public/archives/page/3/index.html","hash":"a01228f6bd8458758d541e210aaef1c60f1142e5","modified":1487305558492},{"_id":"public/archives/2013/index.html","hash":"1c20aef6776e7ae6564c0bd4bd0929a210e36857","modified":1487305558492},{"_id":"public/archives/2013/05/index.html","hash":"92dea8cac9b587a4bf42ba044cb19e8b1198c835","modified":1487305558492},{"_id":"public/archives/2013/06/index.html","hash":"4f92594112ed0c44808af9296f3e41f4747ae92c","modified":1487305558492},{"_id":"public/archives/2013/07/index.html","hash":"31c490414c9fbbc85ce928dedafe6705991d1fd2","modified":1487305558492},{"_id":"public/archives/2014/index.html","hash":"4b2709be537c03e48c2ad800a2300b5ec866a9eb","modified":1487305558492},{"_id":"public/archives/2014/01/index.html","hash":"c1d39c4b75212d246d3facbc5bcba90f567c8ac9","modified":1487305558492},{"_id":"public/archives/2014/06/index.html","hash":"e77919bb01c951f2389801343dc51cbbed4da748","modified":1487305558493},{"_id":"public/archives/2014/12/index.html","hash":"80f9f8536ce81e654da0ad7b79b45d4aa8dd17d8","modified":1487305558493},{"_id":"public/archives/2015/index.html","hash":"37011bbf294a1abc9c77377ec64e5c3d175ee6e8","modified":1487305558493},{"_id":"public/archives/2015/01/index.html","hash":"8141823325004958275223906050872d3ca0b004","modified":1487305558493},{"_id":"public/archives/2015/02/index.html","hash":"a798c09da2bfb2827d001b937f56739843b213c5","modified":1487305558493},{"_id":"public/archives/2015/03/index.html","hash":"532afde2fddef7783810648e6cd19777cf3b7992","modified":1487305558493},{"_id":"public/archives/2015/05/index.html","hash":"548c0c8575698addf29504874eb856a5e3f79b8a","modified":1487305558493},{"_id":"public/archives/2015/12/index.html","hash":"645e7432953347f164124f9cf07120b25581a905","modified":1487305558493},{"_id":"public/archives/2016/index.html","hash":"eebf6a76502d0b26cfca4459c646aed78bddd34f","modified":1487305558493},{"_id":"public/archives/2016/01/index.html","hash":"01ca3b18b7db5c93ebca1c686d93ea7f17c43f42","modified":1487305558493},{"_id":"public/tags/consulting/index.html","hash":"5c17fe7290f548793e366e378871cc8e8ebbd107","modified":1487305558493},{"_id":"public/tags/craftsmanship/index.html","hash":"e71d7d9010359b05104e59eadb3562dd789899f2","modified":1487305558493},{"_id":"public/tags/culture/index.html","hash":"624e7da187ff83f5e12ec6cd93e1c25a1140d288","modified":1487305558494},{"_id":"public/tags/writing/index.html","hash":"2c5f2a6d2b4e121e68731a721cb1aa345e0e19d2","modified":1487305558494},{"_id":"public/tags/pair-programming/index.html","hash":"4b78883b2751e754a2ea5d365f1b9ca59e989b68","modified":1487305558494},{"_id":"public/tags/books/index.html","hash":"d1eff879fb10789d0ee21651ba83b42fad9ac7bf","modified":1487305558494},{"_id":"public/tags/coding/index.html","hash":"ed1e16d0ea191bf6bf480e0ae96b50a1509193ea","modified":1487305558494},{"_id":"public/tags/design-patterns/index.html","hash":"4a9160f7b5b09f6ad559743e25c2a38385583863","modified":1487305558494},{"_id":"public/tags/swift/index.html","hash":"1b0f7de9ae9e34f06dca83954678b0e5e902a353","modified":1487305558494},{"_id":"public/tags/career/index.html","hash":"9a8be1b54ccfb20be0698410217151505271e280","modified":1487305558494},{"_id":"public/tags/business/index.html","hash":"25759a0c51705e70221b3ee6b384845727a01fd9","modified":1487305558494},{"_id":"public/tags/ios/index.html","hash":"9e8ba85b230e20e3e0963211b03a0a8aec250f88","modified":1487305558494},{"_id":"public/tags/testing/index.html","hash":"ee27a3e27d0ccd41ffea044d13c4e78d0fd933fd","modified":1487305558494},{"_id":"public/tags/performance/index.html","hash":"de7f80c025c2a97c78a3dc88eb7379ca68dcff53","modified":1487305558495},{"_id":"public/tags/fun/index.html","hash":"b062e439b134ebee249602acb6099d0cd715bc69","modified":1487305558495},{"_id":"public/tags/functional-programming/index.html","hash":"1e20c5ce73cc6013b0b9c6f4ce6e4bfa92f7530e","modified":1487305558495},{"_id":"public/tags/source-control/index.html","hash":"287f7b3a67cda7c66936fb1a253467810e820221","modified":1487305558495},{"_id":"public/2016/01/24/handling-web-view-requests-using-the-chain-of-responsibility-pattern/index.html","hash":"41a538d7b6c710ba0d0c3e5765f93a8adcb142e4","modified":1487305558495},{"_id":"public/2016/01/17/strategy-pattern-done-functional-programming/index.html","hash":"704e039e8e517e508e1930db0624793eb6c6ca48","modified":1487305558495},{"_id":"public/2016/01/10/liquid-smooth-ios-collection-view-scrolling-lots-images/index.html","hash":"fd586e9241f026329806337b7695a81154a79087","modified":1487305558495},{"_id":"public/2016/01/03/designing-truly-balanced-life-possible/index.html","hash":"150ab5fdadb1325828cf7cb051788e03fbaca66e","modified":1487305558495},{"_id":"public/2015/05/11/breaking-down-successful-pair-programming/index.html","hash":"9f6b5652d9545d316bf7ec71be3ad11d19e32c1d","modified":1487305558495},{"_id":"public/2015/12/17/be-better-by-being-present/index.html","hash":"a9503b1355aa2b34a0bc3a58528b6fa4bdf5ac60","modified":1487305558495},{"_id":"public/2015/03/10/dependency-injection-example-in-swift/index.html","hash":"6c5019d6d6a485ce432f51f64251548506c3fe22","modified":1487305558495},{"_id":"public/2015/02/15/making-sure-you-get-paid-by-your-clients/index.html","hash":"36e7fe8e13a566fa419d6fb3c8429ac9cae24c8d","modified":1487305558495},{"_id":"public/2015/01/28/how-to-speed-up-modal-animations-in-ios/index.html","hash":"420aab76786eb5d634c6a9d863c1d8b715643a4e","modified":1487305558495},{"_id":"public/2014/06/16/ios-8-share-extension-example-swift/index.html","hash":"27c70998604de83374db47156257e7f6a0e25ee5","modified":1487305558495},{"_id":"public/2013/07/07/ios-core-data-concurrency-example/index.html","hash":"5ac53a543cc475466ba3c139748821359c9477a2","modified":1487305558495},{"_id":"public/2013/06/18/working-contacts-ios-addressbook-tutorial/index.html","hash":"89b99121ce52bee98eec179bfd9f16608a3724e0","modified":1487305558495},{"_id":"public/2013/06/07/writing-clean-functions/index.html","hash":"a11f679c751bc2fa7d88a59163a672dc6c65db9a","modified":1487305558495},{"_id":"public/page/2/index.html","hash":"5b23bf381341edd19b6a8d0eba6bf2254701b8cf","modified":1487305558495}],"Category":[{"name":"Uncategorized","_id":"ciz9bbsw700033fysknoui83t"}],"Data":[],"Page":[{"title":"Reading","id":2,"comment":false,"date":"2015-01-06T09:34:24.000Z","_content":"\nLife is too short to read all of the amazing books out there, so I'm starting to maintain a list I can share with people.\n\n**Actually...**\n\nAfter learning about a great app called [Goodreads](http://goodreads.com), I'm using that now instead. Checkout the books I'm into over there:\n\n[My Goodreads Profile](https://www.goodreads.com/user/show/27847798-sundeep)","source":"reading/index.md","raw":"---\ntitle: Reading\nid: 2\ncomment: false\ndate: 2015-01-06 04:34:24\n---\n\nLife is too short to read all of the amazing books out there, so I'm starting to maintain a list I can share with people.\n\n**Actually...**\n\nAfter learning about a great app called [Goodreads](http://goodreads.com), I'm using that now instead. Checkout the books I'm into over there:\n\n[My Goodreads Profile](https://www.goodreads.com/user/show/27847798-sundeep)","updated":"2017-02-17T04:25:43.000Z","path":"reading/index.html","comments":1,"layout":"page","_id":"ciz9bbsw100013fyso1tij4tg","content":"<p>Life is too short to read all of the amazing books out there, so I’m starting to maintain a list I can share with people.</p>\n<p><strong>Actually…</strong></p>\n<p>After learning about a great app called <a href=\"http://goodreads.com\" target=\"_blank\" rel=\"external\">Goodreads</a>, I’m using that now instead. Checkout the books I’m into over there:</p>\n<p><a href=\"https://www.goodreads.com/user/show/27847798-sundeep\" target=\"_blank\" rel=\"external\">My Goodreads Profile</a></p>\n","excerpt":"","more":"<p>Life is too short to read all of the amazing books out there, so I’m starting to maintain a list I can share with people.</p>\n<p><strong>Actually…</strong></p>\n<p>After learning about a great app called <a href=\"http://goodreads.com\">Goodreads</a>, I’m using that now instead. Checkout the books I’m into over there:</p>\n<p><a href=\"https://www.goodreads.com/user/show/27847798-sundeep\">My Goodreads Profile</a></p>\n"},{"title":"Me","id":40,"comment":false,"date":"2015-01-09T03:38:56.000Z","_content":"\n![](http://i.imgur.com/eL862rP.jpg) <sup>_My family out for brunch at a vegan diner during Movember :)_</sup>\n\nI'm an iOS Software Craftsman living in Toronto, Canada who likes expanding my horizons technically and personally. I work at [Influitive](http://influitive.com) and do some mentoring at [Lighthouse Labs](http://lighthouselabs.ca). I'm enjoying life with my wife and two daughters. I like getting to know new people and love talking about software development.\n\nHappy exploring!\n\n<div id=\"contact-links\">\n  [Twitter](https://twitter.com/guptron)      [LinkedIn](http://ca.linkedin.com/in/sundeepgupta1/)      [GitHub](https://github.com/sundeepgupta)      [Feed](http://sundeepgupta.ca/feed)      [Email](mailto:sundeep+website@sundeepgupta.ca)\n</div>\n\n<script class=\"bind-analytics-events\">\n    var links = document.getElementsByClassName('track');\n    for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n        link.onclick = function() {\n            ga('send', 'event', 'link', 'click', link.innerText);   \n        }\n    }\n</script>","source":"me/index.md","raw":"---\ntitle: Me\nid: 40\ncomment: false\ndate: 2015-01-08 22:38:56\n---\n\n![](http://i.imgur.com/eL862rP.jpg) <sup>_My family out for brunch at a vegan diner during Movember :)_</sup>\n\nI'm an iOS Software Craftsman living in Toronto, Canada who likes expanding my horizons technically and personally. I work at [Influitive](http://influitive.com) and do some mentoring at [Lighthouse Labs](http://lighthouselabs.ca). I'm enjoying life with my wife and two daughters. I like getting to know new people and love talking about software development.\n\nHappy exploring!\n\n<div id=\"contact-links\">\n  [Twitter](https://twitter.com/guptron)      [LinkedIn](http://ca.linkedin.com/in/sundeepgupta1/)      [GitHub](https://github.com/sundeepgupta)      [Feed](http://sundeepgupta.ca/feed)      [Email](mailto:sundeep+website@sundeepgupta.ca)\n</div>\n\n<script class=\"bind-analytics-events\">\n    var links = document.getElementsByClassName('track');\n    for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n        link.onclick = function() {\n            ga('send', 'event', 'link', 'click', link.innerText);   \n        }\n    }\n</script>","updated":"2017-02-17T04:25:43.000Z","path":"me/index.html","comments":1,"layout":"page","_id":"ciz9bbsyf003g3fysoposkpbl","content":"<p><img src=\"http://i.imgur.com/eL862rP.jpg\" alt=\"\"> <sup><em>My family out for brunch at a vegan diner during Movember :)</em></sup></p>\n<p>I’m an iOS Software Craftsman living in Toronto, Canada who likes expanding my horizons technically and personally. I work at <a href=\"http://influitive.com\" target=\"_blank\" rel=\"external\">Influitive</a> and do some mentoring at <a href=\"http://lighthouselabs.ca\" target=\"_blank\" rel=\"external\">Lighthouse Labs</a>. I’m enjoying life with my wife and two daughters. I like getting to know new people and love talking about software development.</p>\n<p>Happy exploring!</p>\n<div id=\"contact-links\"><br>  <a href=\"https://twitter.com/guptron\" target=\"_blank\" rel=\"external\">Twitter</a>      <a href=\"http://ca.linkedin.com/in/sundeepgupta1/\" target=\"_blank\" rel=\"external\">LinkedIn</a>      <a href=\"https://github.com/sundeepgupta\" target=\"_blank\" rel=\"external\">GitHub</a>      <a href=\"http://sundeepgupta.ca/feed\" target=\"_blank\" rel=\"external\">Feed</a>      <a href=\"mailto:sundeep+website@sundeepgupta.ca\" target=\"_blank\" rel=\"external\">Email</a><br></div>\n\n<script class=\"bind-analytics-events\">\n    var links = document.getElementsByClassName('track');\n    for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n        link.onclick = function() {\n            ga('send', 'event', 'link', 'click', link.innerText);   \n        }\n    }\n</script>","excerpt":"","more":"<p><img src=\"http://i.imgur.com/eL862rP.jpg\" alt=\"\"> <sup><em>My family out for brunch at a vegan diner during Movember :)</em></sup></p>\n<p>I’m an iOS Software Craftsman living in Toronto, Canada who likes expanding my horizons technically and personally. I work at <a href=\"http://influitive.com\">Influitive</a> and do some mentoring at <a href=\"http://lighthouselabs.ca\">Lighthouse Labs</a>. I’m enjoying life with my wife and two daughters. I like getting to know new people and love talking about software development.</p>\n<p>Happy exploring!</p>\n<div id=\"contact-links\"><br>  <a href=\"https://twitter.com/guptron\">Twitter</a>      <a href=\"http://ca.linkedin.com/in/sundeepgupta1/\">LinkedIn</a>      <a href=\"https://github.com/sundeepgupta\">GitHub</a>      <a href=\"http://sundeepgupta.ca/feed\">Feed</a>      <a href=\"mailto:sundeep+website@sundeepgupta.ca\">Email</a><br></div>\n\n<script class=\"bind-analytics-events\">\n    var links = document.getElementsByClassName('track');\n    for (var i = 0; i < links.length; i++) {\n        var link = links[i];\n        link.onclick = function() {\n            ga('send', 'event', 'link', 'click', link.innerText);   \n        }\n    }\n</script>"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-17T04:01:40.000Z","updated":"2017-02-17T04:01:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9b7sx20000y6ysbpdxegcx","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"test","date":"2017-02-17T04:22:32.000Z","_content":"","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2017-02-16 23:22:32\ntags:\n---\n","slug":"test","published":1,"updated":"2017-02-17T04:22:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9b7sx50001y6ysk5ooqvbc","content":"","excerpt":"","more":""},{"title":"Be Better By Being Present","id":"159","date":"2015-12-18T03:13:17.000Z","_content":"\nMaking an effort to being present makes me a better software engineer, and a better person overall.\n\n> Being _present_ for 10 minutes is better than being just _there_ for 60.\n\nThis was the advice a career coach once gave me when I was figuring out how to spend more time with my family.\n\n<!--more-->\n\nEver since practicing being present, it has improved my life as developer and as a person. If you do a search for [\"being present\"](https://duckduckgo.com/?q=being%20present), you'll find many articles from fields like psychology, social science and spiritualism. There are clearly many benefits but I'm going to discuss this from my own experiences and how it has helped me.\n\n### Meaning of \"present\"\n\nIt means to live in the moment and in the place. It means to have your mind fully engaged with the people your with and the activity at hand. If I'm with my wife talking about weekend plans, I'm thinking about that, not the email I need to write before bed. If I'm writing code, it means thinking and writing code, not looking at my messages.\n\n### Why be present?\n\nBeing present in your interactions has several benefits:\n\n#### Connect more deeply with others\n\nWhen you're present, something magical is happening, at least for me it feels like this. Your minds are symbiotically working together, simultaneously communicating. Sure, only one person can speak at a time, but when the other person is present, they are communicating with body, their sounds and perhaps their touch. This deeper experience leaves people feeling more connected.\n\n#### Boost creativity\n\nWhen you're present amongst others, say in a meeting, you're more creative. Creativity can be thought of as ideas feeding off of other ideas. If you're not fully engaged, then you're not receiving or processing other people's ideas as well as you could, so your ideas won't be as good, or they might be stale or repeated. Have you ever heard someone say something great, but it was said 5 too late? That person obviously was not present. (I've totally done that!)\n\n#### Boost productivity\n\nIf you're fully engaged with people or your task at hand, you're more effective and productive.\n\n#### Boost memory\n\nAs you'll be processing things more deeply, you'll remember more of it.\n\nAll in all, it's a better experience for you and those around you. And when working independently, you'll get more done in less time and that feels great.\n\n### How can you be more present?\n\nMake a conscious effort, that's pretty much it. But a lot of times it's not easy. It takes discipline, forethought and energy. Sometimes it's easy. Ever listen to an amazing speaker? You're totally in the moment, right? What about a bad speaker? You need to put in mental energy to be present. Also, as humans, we're wired to be distracted. So, in a nutshell, to be more present: eliminate distractions, and actively engage. Here are some practical things I do:\n\n#### Eliminate distractions\n\n*   Turn off your phone. Otherwise, use airplane mode and/or turn off notifications.*   If you go into a meeting, don't bring anything with you. If you really need to, only pen and paper for notes. Or if you prefer, a laptop or tablet. Keep in mind though, depending on who's there, electronic devices can carry negative stigma compared to pen and paper.*   When working on your device, make sure only the apps you need for the task at hand are open and quit all others. Use \"distraction free\" or full screen mode wherever possible to avoid temptation of opening email or another app. And turn your notifications off.\n\n#### Actively engage\n\n*   Listen to others, and avoid the temptation to speak until they're finished speaking. If you're worried you'll forget something you'd like to say while they're still talking, you shouldn't be because if it's important enough, you'll remember. If you're still worried, jot it down.*   Look at the person, and make eye contact. This will keep you engaged with the person, and your ears will follow.*   Ask clarifying questions and rephrase things they tell you. This will help you fully understand the other person's point, and signal to them you're actively listening.\n*   When you're speaking, make eye contact, to help others engage with you.*   Avoid ad-hoc interactions in favour of scheduled ones. Ad-hoc interactions interrupt you which breaks you being present on whatever you're doing. And second, it's hard to focus because your head still might be engaged with what you were just doing. If you're a developer, you know how much energy and time context switching takes.\n\n### Being present is better\n\nLearning and practicing presence in my interactions isn't easy, it takes some effort. But it has easily been worth it for me, both personally and professionally. I hope my experiences can help you too.\n\nHappy exploring!","source":"_posts/be-better-by-being-present.md","raw":"---\ntitle: Be Better By Being Present\ntags:\n  - consulting\n  - craftsmanship\n  - culture\nid: 159\ncategories:\n  - Uncategorized\ndate: 2015-12-17 22:13:17\n---\n\nMaking an effort to being present makes me a better software engineer, and a better person overall.\n\n> Being _present_ for 10 minutes is better than being just _there_ for 60.\n\nThis was the advice a career coach once gave me when I was figuring out how to spend more time with my family.\n\n<!--more-->\n\nEver since practicing being present, it has improved my life as developer and as a person. If you do a search for [\"being present\"](https://duckduckgo.com/?q=being%20present), you'll find many articles from fields like psychology, social science and spiritualism. There are clearly many benefits but I'm going to discuss this from my own experiences and how it has helped me.\n\n### Meaning of \"present\"\n\nIt means to live in the moment and in the place. It means to have your mind fully engaged with the people your with and the activity at hand. If I'm with my wife talking about weekend plans, I'm thinking about that, not the email I need to write before bed. If I'm writing code, it means thinking and writing code, not looking at my messages.\n\n### Why be present?\n\nBeing present in your interactions has several benefits:\n\n#### Connect more deeply with others\n\nWhen you're present, something magical is happening, at least for me it feels like this. Your minds are symbiotically working together, simultaneously communicating. Sure, only one person can speak at a time, but when the other person is present, they are communicating with body, their sounds and perhaps their touch. This deeper experience leaves people feeling more connected.\n\n#### Boost creativity\n\nWhen you're present amongst others, say in a meeting, you're more creative. Creativity can be thought of as ideas feeding off of other ideas. If you're not fully engaged, then you're not receiving or processing other people's ideas as well as you could, so your ideas won't be as good, or they might be stale or repeated. Have you ever heard someone say something great, but it was said 5 too late? That person obviously was not present. (I've totally done that!)\n\n#### Boost productivity\n\nIf you're fully engaged with people or your task at hand, you're more effective and productive.\n\n#### Boost memory\n\nAs you'll be processing things more deeply, you'll remember more of it.\n\nAll in all, it's a better experience for you and those around you. And when working independently, you'll get more done in less time and that feels great.\n\n### How can you be more present?\n\nMake a conscious effort, that's pretty much it. But a lot of times it's not easy. It takes discipline, forethought and energy. Sometimes it's easy. Ever listen to an amazing speaker? You're totally in the moment, right? What about a bad speaker? You need to put in mental energy to be present. Also, as humans, we're wired to be distracted. So, in a nutshell, to be more present: eliminate distractions, and actively engage. Here are some practical things I do:\n\n#### Eliminate distractions\n\n*   Turn off your phone. Otherwise, use airplane mode and/or turn off notifications.*   If you go into a meeting, don't bring anything with you. If you really need to, only pen and paper for notes. Or if you prefer, a laptop or tablet. Keep in mind though, depending on who's there, electronic devices can carry negative stigma compared to pen and paper.*   When working on your device, make sure only the apps you need for the task at hand are open and quit all others. Use \"distraction free\" or full screen mode wherever possible to avoid temptation of opening email or another app. And turn your notifications off.\n\n#### Actively engage\n\n*   Listen to others, and avoid the temptation to speak until they're finished speaking. If you're worried you'll forget something you'd like to say while they're still talking, you shouldn't be because if it's important enough, you'll remember. If you're still worried, jot it down.*   Look at the person, and make eye contact. This will keep you engaged with the person, and your ears will follow.*   Ask clarifying questions and rephrase things they tell you. This will help you fully understand the other person's point, and signal to them you're actively listening.\n*   When you're speaking, make eye contact, to help others engage with you.*   Avoid ad-hoc interactions in favour of scheduled ones. Ad-hoc interactions interrupt you which breaks you being present on whatever you're doing. And second, it's hard to focus because your head still might be engaged with what you were just doing. If you're a developer, you know how much energy and time context switching takes.\n\n### Being present is better\n\nLearning and practicing presence in my interactions isn't easy, it takes some effort. But it has easily been worth it for me, both personally and professionally. I hope my experiences can help you too.\n\nHappy exploring!","slug":"be-better-by-being-present","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsvw00003fysjnv1g4el","content":"<p>Making an effort to being present makes me a better software engineer, and a better person overall.</p>\n<blockquote>\n<p>Being <em>present</em> for 10 minutes is better than being just <em>there</em> for 60.</p>\n</blockquote>\n<p>This was the advice a career coach once gave me when I was figuring out how to spend more time with my family.</p>\n<a id=\"more\"></a>\n<p>Ever since practicing being present, it has improved my life as developer and as a person. If you do a search for <a href=\"https://duckduckgo.com/?q=being%20present\" target=\"_blank\" rel=\"external\">“being present”</a>, you’ll find many articles from fields like psychology, social science and spiritualism. There are clearly many benefits but I’m going to discuss this from my own experiences and how it has helped me.</p>\n<h3 id=\"Meaning-of-“present”\"><a href=\"#Meaning-of-“present”\" class=\"headerlink\" title=\"Meaning of “present”\"></a>Meaning of “present”</h3><p>It means to live in the moment and in the place. It means to have your mind fully engaged with the people your with and the activity at hand. If I’m with my wife talking about weekend plans, I’m thinking about that, not the email I need to write before bed. If I’m writing code, it means thinking and writing code, not looking at my messages.</p>\n<h3 id=\"Why-be-present\"><a href=\"#Why-be-present\" class=\"headerlink\" title=\"Why be present?\"></a>Why be present?</h3><p>Being present in your interactions has several benefits:</p>\n<h4 id=\"Connect-more-deeply-with-others\"><a href=\"#Connect-more-deeply-with-others\" class=\"headerlink\" title=\"Connect more deeply with others\"></a>Connect more deeply with others</h4><p>When you’re present, something magical is happening, at least for me it feels like this. Your minds are symbiotically working together, simultaneously communicating. Sure, only one person can speak at a time, but when the other person is present, they are communicating with body, their sounds and perhaps their touch. This deeper experience leaves people feeling more connected.</p>\n<h4 id=\"Boost-creativity\"><a href=\"#Boost-creativity\" class=\"headerlink\" title=\"Boost creativity\"></a>Boost creativity</h4><p>When you’re present amongst others, say in a meeting, you’re more creative. Creativity can be thought of as ideas feeding off of other ideas. If you’re not fully engaged, then you’re not receiving or processing other people’s ideas as well as you could, so your ideas won’t be as good, or they might be stale or repeated. Have you ever heard someone say something great, but it was said 5 too late? That person obviously was not present. (I’ve totally done that!)</p>\n<h4 id=\"Boost-productivity\"><a href=\"#Boost-productivity\" class=\"headerlink\" title=\"Boost productivity\"></a>Boost productivity</h4><p>If you’re fully engaged with people or your task at hand, you’re more effective and productive.</p>\n<h4 id=\"Boost-memory\"><a href=\"#Boost-memory\" class=\"headerlink\" title=\"Boost memory\"></a>Boost memory</h4><p>As you’ll be processing things more deeply, you’ll remember more of it.</p>\n<p>All in all, it’s a better experience for you and those around you. And when working independently, you’ll get more done in less time and that feels great.</p>\n<h3 id=\"How-can-you-be-more-present\"><a href=\"#How-can-you-be-more-present\" class=\"headerlink\" title=\"How can you be more present?\"></a>How can you be more present?</h3><p>Make a conscious effort, that’s pretty much it. But a lot of times it’s not easy. It takes discipline, forethought and energy. Sometimes it’s easy. Ever listen to an amazing speaker? You’re totally in the moment, right? What about a bad speaker? You need to put in mental energy to be present. Also, as humans, we’re wired to be distracted. So, in a nutshell, to be more present: eliminate distractions, and actively engage. Here are some practical things I do:</p>\n<h4 id=\"Eliminate-distractions\"><a href=\"#Eliminate-distractions\" class=\"headerlink\" title=\"Eliminate distractions\"></a>Eliminate distractions</h4><ul>\n<li>Turn off your phone. Otherwise, use airplane mode and/or turn off notifications.<em>   If you go into a meeting, don’t bring anything with you. If you really need to, only pen and paper for notes. Or if you prefer, a laptop or tablet. Keep in mind though, depending on who’s there, electronic devices can carry negative stigma compared to pen and paper.</em>   When working on your device, make sure only the apps you need for the task at hand are open and quit all others. Use “distraction free” or full screen mode wherever possible to avoid temptation of opening email or another app. And turn your notifications off.</li>\n</ul>\n<h4 id=\"Actively-engage\"><a href=\"#Actively-engage\" class=\"headerlink\" title=\"Actively engage\"></a>Actively engage</h4><ul>\n<li>Listen to others, and avoid the temptation to speak until they’re finished speaking. If you’re worried you’ll forget something you’d like to say while they’re still talking, you shouldn’t be because if it’s important enough, you’ll remember. If you’re still worried, jot it down.<em>   Look at the person, and make eye contact. This will keep you engaged with the person, and your ears will follow.</em>   Ask clarifying questions and rephrase things they tell you. This will help you fully understand the other person’s point, and signal to them you’re actively listening.</li>\n<li>When you’re speaking, make eye contact, to help others engage with you.*   Avoid ad-hoc interactions in favour of scheduled ones. Ad-hoc interactions interrupt you which breaks you being present on whatever you’re doing. And second, it’s hard to focus because your head still might be engaged with what you were just doing. If you’re a developer, you know how much energy and time context switching takes.</li>\n</ul>\n<h3 id=\"Being-present-is-better\"><a href=\"#Being-present-is-better\" class=\"headerlink\" title=\"Being present is better\"></a>Being present is better</h3><p>Learning and practicing presence in my interactions isn’t easy, it takes some effort. But it has easily been worth it for me, both personally and professionally. I hope my experiences can help you too.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>Making an effort to being present makes me a better software engineer, and a better person overall.</p>\n<blockquote>\n<p>Being <em>present</em> for 10 minutes is better than being just <em>there</em> for 60.</p>\n</blockquote>\n<p>This was the advice a career coach once gave me when I was figuring out how to spend more time with my family.</p>","more":"<p>Ever since practicing being present, it has improved my life as developer and as a person. If you do a search for <a href=\"https://duckduckgo.com/?q=being%20present\">“being present”</a>, you’ll find many articles from fields like psychology, social science and spiritualism. There are clearly many benefits but I’m going to discuss this from my own experiences and how it has helped me.</p>\n<h3 id=\"Meaning-of-“present”\"><a href=\"#Meaning-of-“present”\" class=\"headerlink\" title=\"Meaning of “present”\"></a>Meaning of “present”</h3><p>It means to live in the moment and in the place. It means to have your mind fully engaged with the people your with and the activity at hand. If I’m with my wife talking about weekend plans, I’m thinking about that, not the email I need to write before bed. If I’m writing code, it means thinking and writing code, not looking at my messages.</p>\n<h3 id=\"Why-be-present\"><a href=\"#Why-be-present\" class=\"headerlink\" title=\"Why be present?\"></a>Why be present?</h3><p>Being present in your interactions has several benefits:</p>\n<h4 id=\"Connect-more-deeply-with-others\"><a href=\"#Connect-more-deeply-with-others\" class=\"headerlink\" title=\"Connect more deeply with others\"></a>Connect more deeply with others</h4><p>When you’re present, something magical is happening, at least for me it feels like this. Your minds are symbiotically working together, simultaneously communicating. Sure, only one person can speak at a time, but when the other person is present, they are communicating with body, their sounds and perhaps their touch. This deeper experience leaves people feeling more connected.</p>\n<h4 id=\"Boost-creativity\"><a href=\"#Boost-creativity\" class=\"headerlink\" title=\"Boost creativity\"></a>Boost creativity</h4><p>When you’re present amongst others, say in a meeting, you’re more creative. Creativity can be thought of as ideas feeding off of other ideas. If you’re not fully engaged, then you’re not receiving or processing other people’s ideas as well as you could, so your ideas won’t be as good, or they might be stale or repeated. Have you ever heard someone say something great, but it was said 5 too late? That person obviously was not present. (I’ve totally done that!)</p>\n<h4 id=\"Boost-productivity\"><a href=\"#Boost-productivity\" class=\"headerlink\" title=\"Boost productivity\"></a>Boost productivity</h4><p>If you’re fully engaged with people or your task at hand, you’re more effective and productive.</p>\n<h4 id=\"Boost-memory\"><a href=\"#Boost-memory\" class=\"headerlink\" title=\"Boost memory\"></a>Boost memory</h4><p>As you’ll be processing things more deeply, you’ll remember more of it.</p>\n<p>All in all, it’s a better experience for you and those around you. And when working independently, you’ll get more done in less time and that feels great.</p>\n<h3 id=\"How-can-you-be-more-present\"><a href=\"#How-can-you-be-more-present\" class=\"headerlink\" title=\"How can you be more present?\"></a>How can you be more present?</h3><p>Make a conscious effort, that’s pretty much it. But a lot of times it’s not easy. It takes discipline, forethought and energy. Sometimes it’s easy. Ever listen to an amazing speaker? You’re totally in the moment, right? What about a bad speaker? You need to put in mental energy to be present. Also, as humans, we’re wired to be distracted. So, in a nutshell, to be more present: eliminate distractions, and actively engage. Here are some practical things I do:</p>\n<h4 id=\"Eliminate-distractions\"><a href=\"#Eliminate-distractions\" class=\"headerlink\" title=\"Eliminate distractions\"></a>Eliminate distractions</h4><ul>\n<li>Turn off your phone. Otherwise, use airplane mode and/or turn off notifications.<em>   If you go into a meeting, don’t bring anything with you. If you really need to, only pen and paper for notes. Or if you prefer, a laptop or tablet. Keep in mind though, depending on who’s there, electronic devices can carry negative stigma compared to pen and paper.</em>   When working on your device, make sure only the apps you need for the task at hand are open and quit all others. Use “distraction free” or full screen mode wherever possible to avoid temptation of opening email or another app. And turn your notifications off.</li>\n</ul>\n<h4 id=\"Actively-engage\"><a href=\"#Actively-engage\" class=\"headerlink\" title=\"Actively engage\"></a>Actively engage</h4><ul>\n<li>Listen to others, and avoid the temptation to speak until they’re finished speaking. If you’re worried you’ll forget something you’d like to say while they’re still talking, you shouldn’t be because if it’s important enough, you’ll remember. If you’re still worried, jot it down.<em>   Look at the person, and make eye contact. This will keep you engaged with the person, and your ears will follow.</em>   Ask clarifying questions and rephrase things they tell you. This will help you fully understand the other person’s point, and signal to them you’re actively listening.</li>\n<li>When you’re speaking, make eye contact, to help others engage with you.*   Avoid ad-hoc interactions in favour of scheduled ones. Ad-hoc interactions interrupt you which breaks you being present on whatever you’re doing. And second, it’s hard to focus because your head still might be engaged with what you were just doing. If you’re a developer, you know how much energy and time context switching takes.</li>\n</ul>\n<h3 id=\"Being-present-is-better\"><a href=\"#Being-present-is-better\" class=\"headerlink\" title=\"Being present is better\"></a>Being present is better</h3><p>Learning and practicing presence in my interactions isn’t easy, it takes some effort. But it has easily been worth it for me, both personally and professionally. I hope my experiences can help you too.</p>\n<p>Happy exploring!</p>"},{"title":"Blog Software For Me (A Developer)","id":"45","date":"2015-01-11T03:08:35.000Z","_content":"\nThis is my third blogging software, and I'm happy (for now :) to say I'm back on WordPress. Why? In short, I don't want to tinker anymore with my blog software.\n\n<!--more-->\n\nIf you're reading this close to the publish date, you'll notice this blog is bland. In fact, this is the stock Wordpress theme. The only customizations are removing some UI to make it more minimal and clean. And the only plugin I installed is [WP-Markdown](https://wordpress.org/plugins/wp-markdown/) for writing.\n\nMy previous blog software, [Anchor CMS](http://anchorcms.com), was great. Clean, minimal look and feel with markdown support. But it is a young platform and I had to tweak several things to get it the way I wanted. Further, it was missing a couple of features that I just couldn't get around to working on. These days I can't prioritize the time to things like this. And I choose to get my software development kicks from projects I find more interesting.\n\nI wanted something were I could completely focus on writing and not have to worry about anything else. WordPress was not on my mind at all, but after investigating the countless other options, I decided on it. I feel confident that there will always be a plugin for whatever I need. And if I really need to, adding a hack here or there shouldn't take too much time.\n\n<s>For nostalgia, I've moved my two previous blogs to here and here.</s>\n\nSlowly, I'd like to personalize the site and make it more \"me\", but for now I want to focus on writing more and I think making this move will help.","source":"_posts/blog-software-developer.md","raw":"---\ntitle: Blog Software For Me (A Developer)\ntags:\n  - writing\nid: 45\ncategories:\n  - Uncategorized\ndate: 2015-01-10 22:08:35\n---\n\nThis is my third blogging software, and I'm happy (for now :) to say I'm back on WordPress. Why? In short, I don't want to tinker anymore with my blog software.\n\n<!--more-->\n\nIf you're reading this close to the publish date, you'll notice this blog is bland. In fact, this is the stock Wordpress theme. The only customizations are removing some UI to make it more minimal and clean. And the only plugin I installed is [WP-Markdown](https://wordpress.org/plugins/wp-markdown/) for writing.\n\nMy previous blog software, [Anchor CMS](http://anchorcms.com), was great. Clean, minimal look and feel with markdown support. But it is a young platform and I had to tweak several things to get it the way I wanted. Further, it was missing a couple of features that I just couldn't get around to working on. These days I can't prioritize the time to things like this. And I choose to get my software development kicks from projects I find more interesting.\n\nI wanted something were I could completely focus on writing and not have to worry about anything else. WordPress was not on my mind at all, but after investigating the countless other options, I decided on it. I feel confident that there will always be a plugin for whatever I need. And if I really need to, adding a hack here or there shouldn't take too much time.\n\n<s>For nostalgia, I've moved my two previous blogs to here and here.</s>\n\nSlowly, I'd like to personalize the site and make it more \"me\", but for now I want to focus on writing more and I think making this move will help.","slug":"blog-software-developer","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsw400023fysj2hc6oyg","content":"<p>This is my third blogging software, and I’m happy (for now :) to say I’m back on WordPress. Why? In short, I don’t want to tinker anymore with my blog software.</p>\n<a id=\"more\"></a>\n<p>If you’re reading this close to the publish date, you’ll notice this blog is bland. In fact, this is the stock Wordpress theme. The only customizations are removing some UI to make it more minimal and clean. And the only plugin I installed is <a href=\"https://wordpress.org/plugins/wp-markdown/\" target=\"_blank\" rel=\"external\">WP-Markdown</a> for writing.</p>\n<p>My previous blog software, <a href=\"http://anchorcms.com\" target=\"_blank\" rel=\"external\">Anchor CMS</a>, was great. Clean, minimal look and feel with markdown support. But it is a young platform and I had to tweak several things to get it the way I wanted. Further, it was missing a couple of features that I just couldn’t get around to working on. These days I can’t prioritize the time to things like this. And I choose to get my software development kicks from projects I find more interesting.</p>\n<p>I wanted something were I could completely focus on writing and not have to worry about anything else. WordPress was not on my mind at all, but after investigating the countless other options, I decided on it. I feel confident that there will always be a plugin for whatever I need. And if I really need to, adding a hack here or there shouldn’t take too much time.</p>\n<p><s>For nostalgia, I’ve moved my two previous blogs to here and here.</s></p>\n<p>Slowly, I’d like to personalize the site and make it more “me”, but for now I want to focus on writing more and I think making this move will help.</p>\n","excerpt":"<p>This is my third blogging software, and I’m happy (for now :) to say I’m back on WordPress. Why? In short, I don’t want to tinker anymore with my blog software.</p>","more":"<p>If you’re reading this close to the publish date, you’ll notice this blog is bland. In fact, this is the stock Wordpress theme. The only customizations are removing some UI to make it more minimal and clean. And the only plugin I installed is <a href=\"https://wordpress.org/plugins/wp-markdown/\">WP-Markdown</a> for writing.</p>\n<p>My previous blog software, <a href=\"http://anchorcms.com\">Anchor CMS</a>, was great. Clean, minimal look and feel with markdown support. But it is a young platform and I had to tweak several things to get it the way I wanted. Further, it was missing a couple of features that I just couldn’t get around to working on. These days I can’t prioritize the time to things like this. And I choose to get my software development kicks from projects I find more interesting.</p>\n<p>I wanted something were I could completely focus on writing and not have to worry about anything else. WordPress was not on my mind at all, but after investigating the countless other options, I decided on it. I feel confident that there will always be a plugin for whatever I need. And if I really need to, adding a hack here or there shouldn’t take too much time.</p>\n<p><s>For nostalgia, I’ve moved my two previous blogs to here and here.</s></p>\n<p>Slowly, I’d like to personalize the site and make it more “me”, but for now I want to focus on writing more and I think making this move will help.</p>"},{"title":"Breaking down successful pair programming","id":"143","date":"2015-05-12T03:53:32.000Z","_content":"\n![Dilbert comic about pair programming](http://i.imgur.com/Q1icg6U.gif)\n\nExplorations into successful pair programming characteristics broken down by common pairing scenarios.\n\n<!--more-->\n\nPair programming was brought into the mainstream by the Extreme Programming movement and is steadily gaining popularity in production environments. In my two years of pair programming and leading other pairs, I've noticed that sometimes pair programming is fantastic and once, can be even magical. And sometimes, it really sucked. I wanted to explore the reasons behind this and have identified a few patterns that might shed some insight into what it takes for pair programming to work well.\n\n## My pairing experience\n\nI believe its important for you to know what kind of experience I have so you can evaluate this post within better context. I’ve been pair programming almost every day for about two years with two different companies. One was a consulting company where we developed applications for clients. The other was a high growth startup developing a large SaaS product. Through out this time, I paired with over 20 developers all with different backgrounds, personalities, skill, experience and cultures.\n\n**Side note:** Just realizing how much of a benefit _that_ is when you pair program. I've met so many wonderful people and have become friends with many of them.\n\n## Is pair programming worth it?\n\nI wrote a bunch of stuff here on this topic in my draft but deleted it because I don't want to confuse the point of this post. There are many other research papers, opinions, stats, that say one thing or another. I don't think this question matters much in a general context. There are far too many variables.\n\nIn the writing below, you will see that I do believe there is good and bad pair programming. So my answer to this question is the most popular answer in our industry - \"It depends.\" :)\n\nAnd while I may have your attention on this topic, I will mention that I've noticed that pair programming will help the business if it also helps the programmers. (This may deserve a future post.)\n\n## Characteristics of effective pairs\n\nWhen I think about all of my good and bad pairing experiences, many things that go through my head. Instead of repeating all of that, I summed everything up into this fancy, MBA, consulting style two-by-two matrix.\n\n### Pair programming success matrix\n\n![Pair programming success matrix](http://i.imgur.com/mgDJe9w.png)\n\n### Definitions\n\n#### (Mind the) effectiveness gap\n\nIn my observations, the most relevant, distinguishing factor between pairs was the _gap in effectiveness_ between the two individuals. Many things go into how effective a programmer might be - their previous experience, domain knowledge, language knowledge, etc. If we combine all of those things together, we'll get \"effectiveness\". Perhaps another way to think about \"effectiveness\" is the potential strength of their output, including speed and quality. For the purposes of this discussion, I'm going to refer to high and low effective programmers as \"seniors\" and \"juniors\".\n\n#### Benefit\n\nWhen pairing, the hope is that the business (and the individuals) will benefit more than if the two worked independently.\n\n### Pairs with small effectiveness gaps\n\nIn my experience, these generally worked out better than pairs with large gaps. Perhaps the reason is because the developers have more in common, which equates to instant \"free\" empathy which helps improve their interactions. I believe the points outlined in the matrix are clear. Essentially, strong pairs with small effectiveness gaps have a good chemistry. They understand and respect each other, communicate often, and help each other learn. It results in a very satisfying and mutually beneficial interaction. It's usually a lot of fun too.\n\nIf we dig a level deeper, there are different characteristics between senior and junior pairs.\n\n#### Junior pairs\n\nIt is my observation that junior pairs provide more benefit than senior pairs. Why? Probably because junior developers have weak opinions, their egos are smaller, and they care more about learning as opposed to being \"right\".\n\nI also believe there's the \"new kids in school\" effect happening. Imagine you're a kid and your family moves to a new town in the middle of the school year. If there was another kid in your class who also joined around the same time as you, you'd probably become friends rather easily since you're both in the same situation. It's the same with pairing. If you're both new to the app/technology/language/whatever, you'll instantly have more empathy for one another. You'll want to explore similar things, get excited about solving the same type of problems and generally collaborate well.\n\nWhen two juniors pair, the primary goal should be to **learn**.\n\n#### Senior pairs\n\nWhen both developers are seniors, it's harder to get a good match for the same reasons. Every programmer is different, and has different opinions. The more experience you have, the stronger those opinions are. Also, when you know a lot, it is possible for it inflate your ego. When one person has a large ego, the pair may yield poor decisions due to being insecure or the there person \"tiptoeing\" around to ensure they don't dent their pair's ego.\n\nEven worse is when both pairs have large egos. In this case they argue (not debate) a lot and it can become tense with animosity. The worse I've seen is when the navigator would physically walk away from the workstation for extended periods of time. The pair wasn't even communicating at this point and obviously in negative benefit territory.\n\nGood senior pairs have a lot of respect for each other. They talk a lot. They debate, discuss and plan. They work at a professional level, not personal. It is a thing of beauty. And the business benefits greatly with strong output.\n\nWhen two seniors pair, the primary goal should be to **produce**.\n\n### Pairing juniors with seniors\n\nPutting together a senior and junior requires a different approach. This pairing arrangement tends to happen when new developers join the company or switch into a new development context. The new, \"junior\" might be paired with a \"senior\" with the expectation for the junior to ramp up quickly. If the senior is not the right person, or has the wrong expectations, this will turn out badly. and risk hurting the junior's morale.\n\n#### Expectation\n\nLeadership must understand this arrangement is about ramping up the junior as fast as possible. But that must be understood by everyone who has a stake in this pair - the other developers, designers, QA, etc., and, especially the senior. The pair should not have any pressure to deliver, because once they do, it will ruin the pairing dynamic. It will turn into frustration on both sides because the senior will be slowed down by, or will run ahead of the junior.\n\n> Output will be slow while mentoring takes place.\n\n#### Mentoring\n\nOnce the senior understands that their role is to mentor, and not to pump out stories, only then can the pair start to engage in beneficial work. But there's more to consider.\n\n> Good mentors listen, answer questions, observe and ask _leading_ questions.\n\nThis is really hard to do because as human beings, we tend to do the opposite. So here's a reminder:\n\nDo NOT tell them what to type, or tell them what to do or take over and show them. Stop yourself. Let them make the mistake you see coming. Let them feel some of the consequences. Let them think about why that was bad. Let them correct it. Let them ask you questions along the way. Try to answer with _questions_. If they get stuck, lead them out with _questions_.\n\nI remember I was really under the gun to get stuff done while I was pairing with a brand new co-op student. I knowingly steamrolled my pair and continuously apologizing, which probably didn't make him feel any better. Looking back, I should have changed the pairing arrangement or found a way to take the pressure off.\n\nIt takes a ton of patience, self-confidence and empathy to be a good mentor. We want build the junior up, not show them what you know. From what I've seen, good programming mentors are lacking in our industry. Everyone is too busy trying to get stuff done or they just don't have the human skills to do it well. Some questions that may help determine if someone is a good mentor are:\n\nDo they share knowledge and help juniors often? Do they get defensive about their skills or opinions? Are they comfortable with sacrificing for the good of the team?\n\nWhen pairing a senior and junior together, the primary goal should be **mentoring and learning**.\n\n## Leadership's role\n\n### Culture\n\nIn any situation, good things happen when there is understanding between people. Pair programming is no different. Understanding comes from empathy, communication and self-confidence. Business and technical leaders can set the example so it can propagate down through the rest of the team. Culture comes from the top. And it's not what they say it is, it's how they _act_ that defines culture.\n\n### Expectations\n\nAs I've identified above, each pairing scenario is different. It's important to recognize them as different, understand what will make it beneficial, and communicate that to everyone who needs to know so that expectations are clear and in alignment with the pairing dynamic.\n\n## Conclusion\n\nThis particular subject reinforced for me that programming is as much about people as it is about technology. We are people, writing software for people, in collaboration with other people. The technical skills are obviously required, but being a great programmer goes hand in hand with being a great person.\n\nHappy exploring!","source":"_posts/breaking-down-successful-pair-programming.md","raw":"---\ntitle: Breaking down successful pair programming\ntags:\n  - craftsmanship\n  - culture\n  - pair programming\nid: 143\ncategories:\n  - Uncategorized\ndate: 2015-05-11 23:53:32\n---\n\n![Dilbert comic about pair programming](http://i.imgur.com/Q1icg6U.gif)\n\nExplorations into successful pair programming characteristics broken down by common pairing scenarios.\n\n<!--more-->\n\nPair programming was brought into the mainstream by the Extreme Programming movement and is steadily gaining popularity in production environments. In my two years of pair programming and leading other pairs, I've noticed that sometimes pair programming is fantastic and once, can be even magical. And sometimes, it really sucked. I wanted to explore the reasons behind this and have identified a few patterns that might shed some insight into what it takes for pair programming to work well.\n\n## My pairing experience\n\nI believe its important for you to know what kind of experience I have so you can evaluate this post within better context. I’ve been pair programming almost every day for about two years with two different companies. One was a consulting company where we developed applications for clients. The other was a high growth startup developing a large SaaS product. Through out this time, I paired with over 20 developers all with different backgrounds, personalities, skill, experience and cultures.\n\n**Side note:** Just realizing how much of a benefit _that_ is when you pair program. I've met so many wonderful people and have become friends with many of them.\n\n## Is pair programming worth it?\n\nI wrote a bunch of stuff here on this topic in my draft but deleted it because I don't want to confuse the point of this post. There are many other research papers, opinions, stats, that say one thing or another. I don't think this question matters much in a general context. There are far too many variables.\n\nIn the writing below, you will see that I do believe there is good and bad pair programming. So my answer to this question is the most popular answer in our industry - \"It depends.\" :)\n\nAnd while I may have your attention on this topic, I will mention that I've noticed that pair programming will help the business if it also helps the programmers. (This may deserve a future post.)\n\n## Characteristics of effective pairs\n\nWhen I think about all of my good and bad pairing experiences, many things that go through my head. Instead of repeating all of that, I summed everything up into this fancy, MBA, consulting style two-by-two matrix.\n\n### Pair programming success matrix\n\n![Pair programming success matrix](http://i.imgur.com/mgDJe9w.png)\n\n### Definitions\n\n#### (Mind the) effectiveness gap\n\nIn my observations, the most relevant, distinguishing factor between pairs was the _gap in effectiveness_ between the two individuals. Many things go into how effective a programmer might be - their previous experience, domain knowledge, language knowledge, etc. If we combine all of those things together, we'll get \"effectiveness\". Perhaps another way to think about \"effectiveness\" is the potential strength of their output, including speed and quality. For the purposes of this discussion, I'm going to refer to high and low effective programmers as \"seniors\" and \"juniors\".\n\n#### Benefit\n\nWhen pairing, the hope is that the business (and the individuals) will benefit more than if the two worked independently.\n\n### Pairs with small effectiveness gaps\n\nIn my experience, these generally worked out better than pairs with large gaps. Perhaps the reason is because the developers have more in common, which equates to instant \"free\" empathy which helps improve their interactions. I believe the points outlined in the matrix are clear. Essentially, strong pairs with small effectiveness gaps have a good chemistry. They understand and respect each other, communicate often, and help each other learn. It results in a very satisfying and mutually beneficial interaction. It's usually a lot of fun too.\n\nIf we dig a level deeper, there are different characteristics between senior and junior pairs.\n\n#### Junior pairs\n\nIt is my observation that junior pairs provide more benefit than senior pairs. Why? Probably because junior developers have weak opinions, their egos are smaller, and they care more about learning as opposed to being \"right\".\n\nI also believe there's the \"new kids in school\" effect happening. Imagine you're a kid and your family moves to a new town in the middle of the school year. If there was another kid in your class who also joined around the same time as you, you'd probably become friends rather easily since you're both in the same situation. It's the same with pairing. If you're both new to the app/technology/language/whatever, you'll instantly have more empathy for one another. You'll want to explore similar things, get excited about solving the same type of problems and generally collaborate well.\n\nWhen two juniors pair, the primary goal should be to **learn**.\n\n#### Senior pairs\n\nWhen both developers are seniors, it's harder to get a good match for the same reasons. Every programmer is different, and has different opinions. The more experience you have, the stronger those opinions are. Also, when you know a lot, it is possible for it inflate your ego. When one person has a large ego, the pair may yield poor decisions due to being insecure or the there person \"tiptoeing\" around to ensure they don't dent their pair's ego.\n\nEven worse is when both pairs have large egos. In this case they argue (not debate) a lot and it can become tense with animosity. The worse I've seen is when the navigator would physically walk away from the workstation for extended periods of time. The pair wasn't even communicating at this point and obviously in negative benefit territory.\n\nGood senior pairs have a lot of respect for each other. They talk a lot. They debate, discuss and plan. They work at a professional level, not personal. It is a thing of beauty. And the business benefits greatly with strong output.\n\nWhen two seniors pair, the primary goal should be to **produce**.\n\n### Pairing juniors with seniors\n\nPutting together a senior and junior requires a different approach. This pairing arrangement tends to happen when new developers join the company or switch into a new development context. The new, \"junior\" might be paired with a \"senior\" with the expectation for the junior to ramp up quickly. If the senior is not the right person, or has the wrong expectations, this will turn out badly. and risk hurting the junior's morale.\n\n#### Expectation\n\nLeadership must understand this arrangement is about ramping up the junior as fast as possible. But that must be understood by everyone who has a stake in this pair - the other developers, designers, QA, etc., and, especially the senior. The pair should not have any pressure to deliver, because once they do, it will ruin the pairing dynamic. It will turn into frustration on both sides because the senior will be slowed down by, or will run ahead of the junior.\n\n> Output will be slow while mentoring takes place.\n\n#### Mentoring\n\nOnce the senior understands that their role is to mentor, and not to pump out stories, only then can the pair start to engage in beneficial work. But there's more to consider.\n\n> Good mentors listen, answer questions, observe and ask _leading_ questions.\n\nThis is really hard to do because as human beings, we tend to do the opposite. So here's a reminder:\n\nDo NOT tell them what to type, or tell them what to do or take over and show them. Stop yourself. Let them make the mistake you see coming. Let them feel some of the consequences. Let them think about why that was bad. Let them correct it. Let them ask you questions along the way. Try to answer with _questions_. If they get stuck, lead them out with _questions_.\n\nI remember I was really under the gun to get stuff done while I was pairing with a brand new co-op student. I knowingly steamrolled my pair and continuously apologizing, which probably didn't make him feel any better. Looking back, I should have changed the pairing arrangement or found a way to take the pressure off.\n\nIt takes a ton of patience, self-confidence and empathy to be a good mentor. We want build the junior up, not show them what you know. From what I've seen, good programming mentors are lacking in our industry. Everyone is too busy trying to get stuff done or they just don't have the human skills to do it well. Some questions that may help determine if someone is a good mentor are:\n\nDo they share knowledge and help juniors often? Do they get defensive about their skills or opinions? Are they comfortable with sacrificing for the good of the team?\n\nWhen pairing a senior and junior together, the primary goal should be **mentoring and learning**.\n\n## Leadership's role\n\n### Culture\n\nIn any situation, good things happen when there is understanding between people. Pair programming is no different. Understanding comes from empathy, communication and self-confidence. Business and technical leaders can set the example so it can propagate down through the rest of the team. Culture comes from the top. And it's not what they say it is, it's how they _act_ that defines culture.\n\n### Expectations\n\nAs I've identified above, each pairing scenario is different. It's important to recognize them as different, understand what will make it beneficial, and communicate that to everyone who needs to know so that expectations are clear and in alignment with the pairing dynamic.\n\n## Conclusion\n\nThis particular subject reinforced for me that programming is as much about people as it is about technology. We are people, writing software for people, in collaboration with other people. The technical skills are obviously required, but being a great programmer goes hand in hand with being a great person.\n\nHappy exploring!","slug":"breaking-down-successful-pair-programming","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswa00053fysvrmafbqb","content":"<p><img src=\"http://i.imgur.com/Q1icg6U.gif\" alt=\"Dilbert comic about pair programming\"></p>\n<p>Explorations into successful pair programming characteristics broken down by common pairing scenarios.</p>\n<a id=\"more\"></a>\n<p>Pair programming was brought into the mainstream by the Extreme Programming movement and is steadily gaining popularity in production environments. In my two years of pair programming and leading other pairs, I’ve noticed that sometimes pair programming is fantastic and once, can be even magical. And sometimes, it really sucked. I wanted to explore the reasons behind this and have identified a few patterns that might shed some insight into what it takes for pair programming to work well.</p>\n<h2 id=\"My-pairing-experience\"><a href=\"#My-pairing-experience\" class=\"headerlink\" title=\"My pairing experience\"></a>My pairing experience</h2><p>I believe its important for you to know what kind of experience I have so you can evaluate this post within better context. I’ve been pair programming almost every day for about two years with two different companies. One was a consulting company where we developed applications for clients. The other was a high growth startup developing a large SaaS product. Through out this time, I paired with over 20 developers all with different backgrounds, personalities, skill, experience and cultures.</p>\n<p><strong>Side note:</strong> Just realizing how much of a benefit <em>that</em> is when you pair program. I’ve met so many wonderful people and have become friends with many of them.</p>\n<h2 id=\"Is-pair-programming-worth-it\"><a href=\"#Is-pair-programming-worth-it\" class=\"headerlink\" title=\"Is pair programming worth it?\"></a>Is pair programming worth it?</h2><p>I wrote a bunch of stuff here on this topic in my draft but deleted it because I don’t want to confuse the point of this post. There are many other research papers, opinions, stats, that say one thing or another. I don’t think this question matters much in a general context. There are far too many variables.</p>\n<p>In the writing below, you will see that I do believe there is good and bad pair programming. So my answer to this question is the most popular answer in our industry - “It depends.” :)</p>\n<p>And while I may have your attention on this topic, I will mention that I’ve noticed that pair programming will help the business if it also helps the programmers. (This may deserve a future post.)</p>\n<h2 id=\"Characteristics-of-effective-pairs\"><a href=\"#Characteristics-of-effective-pairs\" class=\"headerlink\" title=\"Characteristics of effective pairs\"></a>Characteristics of effective pairs</h2><p>When I think about all of my good and bad pairing experiences, many things that go through my head. Instead of repeating all of that, I summed everything up into this fancy, MBA, consulting style two-by-two matrix.</p>\n<h3 id=\"Pair-programming-success-matrix\"><a href=\"#Pair-programming-success-matrix\" class=\"headerlink\" title=\"Pair programming success matrix\"></a>Pair programming success matrix</h3><p><img src=\"http://i.imgur.com/mgDJe9w.png\" alt=\"Pair programming success matrix\"></p>\n<h3 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions\"></a>Definitions</h3><h4 id=\"Mind-the-effectiveness-gap\"><a href=\"#Mind-the-effectiveness-gap\" class=\"headerlink\" title=\"(Mind the) effectiveness gap\"></a>(Mind the) effectiveness gap</h4><p>In my observations, the most relevant, distinguishing factor between pairs was the <em>gap in effectiveness</em> between the two individuals. Many things go into how effective a programmer might be - their previous experience, domain knowledge, language knowledge, etc. If we combine all of those things together, we’ll get “effectiveness”. Perhaps another way to think about “effectiveness” is the potential strength of their output, including speed and quality. For the purposes of this discussion, I’m going to refer to high and low effective programmers as “seniors” and “juniors”.</p>\n<h4 id=\"Benefit\"><a href=\"#Benefit\" class=\"headerlink\" title=\"Benefit\"></a>Benefit</h4><p>When pairing, the hope is that the business (and the individuals) will benefit more than if the two worked independently.</p>\n<h3 id=\"Pairs-with-small-effectiveness-gaps\"><a href=\"#Pairs-with-small-effectiveness-gaps\" class=\"headerlink\" title=\"Pairs with small effectiveness gaps\"></a>Pairs with small effectiveness gaps</h3><p>In my experience, these generally worked out better than pairs with large gaps. Perhaps the reason is because the developers have more in common, which equates to instant “free” empathy which helps improve their interactions. I believe the points outlined in the matrix are clear. Essentially, strong pairs with small effectiveness gaps have a good chemistry. They understand and respect each other, communicate often, and help each other learn. It results in a very satisfying and mutually beneficial interaction. It’s usually a lot of fun too.</p>\n<p>If we dig a level deeper, there are different characteristics between senior and junior pairs.</p>\n<h4 id=\"Junior-pairs\"><a href=\"#Junior-pairs\" class=\"headerlink\" title=\"Junior pairs\"></a>Junior pairs</h4><p>It is my observation that junior pairs provide more benefit than senior pairs. Why? Probably because junior developers have weak opinions, their egos are smaller, and they care more about learning as opposed to being “right”.</p>\n<p>I also believe there’s the “new kids in school” effect happening. Imagine you’re a kid and your family moves to a new town in the middle of the school year. If there was another kid in your class who also joined around the same time as you, you’d probably become friends rather easily since you’re both in the same situation. It’s the same with pairing. If you’re both new to the app/technology/language/whatever, you’ll instantly have more empathy for one another. You’ll want to explore similar things, get excited about solving the same type of problems and generally collaborate well.</p>\n<p>When two juniors pair, the primary goal should be to <strong>learn</strong>.</p>\n<h4 id=\"Senior-pairs\"><a href=\"#Senior-pairs\" class=\"headerlink\" title=\"Senior pairs\"></a>Senior pairs</h4><p>When both developers are seniors, it’s harder to get a good match for the same reasons. Every programmer is different, and has different opinions. The more experience you have, the stronger those opinions are. Also, when you know a lot, it is possible for it inflate your ego. When one person has a large ego, the pair may yield poor decisions due to being insecure or the there person “tiptoeing” around to ensure they don’t dent their pair’s ego.</p>\n<p>Even worse is when both pairs have large egos. In this case they argue (not debate) a lot and it can become tense with animosity. The worse I’ve seen is when the navigator would physically walk away from the workstation for extended periods of time. The pair wasn’t even communicating at this point and obviously in negative benefit territory.</p>\n<p>Good senior pairs have a lot of respect for each other. They talk a lot. They debate, discuss and plan. They work at a professional level, not personal. It is a thing of beauty. And the business benefits greatly with strong output.</p>\n<p>When two seniors pair, the primary goal should be to <strong>produce</strong>.</p>\n<h3 id=\"Pairing-juniors-with-seniors\"><a href=\"#Pairing-juniors-with-seniors\" class=\"headerlink\" title=\"Pairing juniors with seniors\"></a>Pairing juniors with seniors</h3><p>Putting together a senior and junior requires a different approach. This pairing arrangement tends to happen when new developers join the company or switch into a new development context. The new, “junior” might be paired with a “senior” with the expectation for the junior to ramp up quickly. If the senior is not the right person, or has the wrong expectations, this will turn out badly. and risk hurting the junior’s morale.</p>\n<h4 id=\"Expectation\"><a href=\"#Expectation\" class=\"headerlink\" title=\"Expectation\"></a>Expectation</h4><p>Leadership must understand this arrangement is about ramping up the junior as fast as possible. But that must be understood by everyone who has a stake in this pair - the other developers, designers, QA, etc., and, especially the senior. The pair should not have any pressure to deliver, because once they do, it will ruin the pairing dynamic. It will turn into frustration on both sides because the senior will be slowed down by, or will run ahead of the junior.</p>\n<blockquote>\n<p>Output will be slow while mentoring takes place.</p>\n</blockquote>\n<h4 id=\"Mentoring\"><a href=\"#Mentoring\" class=\"headerlink\" title=\"Mentoring\"></a>Mentoring</h4><p>Once the senior understands that their role is to mentor, and not to pump out stories, only then can the pair start to engage in beneficial work. But there’s more to consider.</p>\n<blockquote>\n<p>Good mentors listen, answer questions, observe and ask <em>leading</em> questions.</p>\n</blockquote>\n<p>This is really hard to do because as human beings, we tend to do the opposite. So here’s a reminder:</p>\n<p>Do NOT tell them what to type, or tell them what to do or take over and show them. Stop yourself. Let them make the mistake you see coming. Let them feel some of the consequences. Let them think about why that was bad. Let them correct it. Let them ask you questions along the way. Try to answer with <em>questions</em>. If they get stuck, lead them out with <em>questions</em>.</p>\n<p>I remember I was really under the gun to get stuff done while I was pairing with a brand new co-op student. I knowingly steamrolled my pair and continuously apologizing, which probably didn’t make him feel any better. Looking back, I should have changed the pairing arrangement or found a way to take the pressure off.</p>\n<p>It takes a ton of patience, self-confidence and empathy to be a good mentor. We want build the junior up, not show them what you know. From what I’ve seen, good programming mentors are lacking in our industry. Everyone is too busy trying to get stuff done or they just don’t have the human skills to do it well. Some questions that may help determine if someone is a good mentor are:</p>\n<p>Do they share knowledge and help juniors often? Do they get defensive about their skills or opinions? Are they comfortable with sacrificing for the good of the team?</p>\n<p>When pairing a senior and junior together, the primary goal should be <strong>mentoring and learning</strong>.</p>\n<h2 id=\"Leadership’s-role\"><a href=\"#Leadership’s-role\" class=\"headerlink\" title=\"Leadership’s role\"></a>Leadership’s role</h2><h3 id=\"Culture\"><a href=\"#Culture\" class=\"headerlink\" title=\"Culture\"></a>Culture</h3><p>In any situation, good things happen when there is understanding between people. Pair programming is no different. Understanding comes from empathy, communication and self-confidence. Business and technical leaders can set the example so it can propagate down through the rest of the team. Culture comes from the top. And it’s not what they say it is, it’s how they <em>act</em> that defines culture.</p>\n<h3 id=\"Expectations\"><a href=\"#Expectations\" class=\"headerlink\" title=\"Expectations\"></a>Expectations</h3><p>As I’ve identified above, each pairing scenario is different. It’s important to recognize them as different, understand what will make it beneficial, and communicate that to everyone who needs to know so that expectations are clear and in alignment with the pairing dynamic.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This particular subject reinforced for me that programming is as much about people as it is about technology. We are people, writing software for people, in collaboration with other people. The technical skills are obviously required, but being a great programmer goes hand in hand with being a great person.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p><img src=\"http://i.imgur.com/Q1icg6U.gif\" alt=\"Dilbert comic about pair programming\"></p>\n<p>Explorations into successful pair programming characteristics broken down by common pairing scenarios.</p>","more":"<p>Pair programming was brought into the mainstream by the Extreme Programming movement and is steadily gaining popularity in production environments. In my two years of pair programming and leading other pairs, I’ve noticed that sometimes pair programming is fantastic and once, can be even magical. And sometimes, it really sucked. I wanted to explore the reasons behind this and have identified a few patterns that might shed some insight into what it takes for pair programming to work well.</p>\n<h2 id=\"My-pairing-experience\"><a href=\"#My-pairing-experience\" class=\"headerlink\" title=\"My pairing experience\"></a>My pairing experience</h2><p>I believe its important for you to know what kind of experience I have so you can evaluate this post within better context. I’ve been pair programming almost every day for about two years with two different companies. One was a consulting company where we developed applications for clients. The other was a high growth startup developing a large SaaS product. Through out this time, I paired with over 20 developers all with different backgrounds, personalities, skill, experience and cultures.</p>\n<p><strong>Side note:</strong> Just realizing how much of a benefit <em>that</em> is when you pair program. I’ve met so many wonderful people and have become friends with many of them.</p>\n<h2 id=\"Is-pair-programming-worth-it\"><a href=\"#Is-pair-programming-worth-it\" class=\"headerlink\" title=\"Is pair programming worth it?\"></a>Is pair programming worth it?</h2><p>I wrote a bunch of stuff here on this topic in my draft but deleted it because I don’t want to confuse the point of this post. There are many other research papers, opinions, stats, that say one thing or another. I don’t think this question matters much in a general context. There are far too many variables.</p>\n<p>In the writing below, you will see that I do believe there is good and bad pair programming. So my answer to this question is the most popular answer in our industry - “It depends.” :)</p>\n<p>And while I may have your attention on this topic, I will mention that I’ve noticed that pair programming will help the business if it also helps the programmers. (This may deserve a future post.)</p>\n<h2 id=\"Characteristics-of-effective-pairs\"><a href=\"#Characteristics-of-effective-pairs\" class=\"headerlink\" title=\"Characteristics of effective pairs\"></a>Characteristics of effective pairs</h2><p>When I think about all of my good and bad pairing experiences, many things that go through my head. Instead of repeating all of that, I summed everything up into this fancy, MBA, consulting style two-by-two matrix.</p>\n<h3 id=\"Pair-programming-success-matrix\"><a href=\"#Pair-programming-success-matrix\" class=\"headerlink\" title=\"Pair programming success matrix\"></a>Pair programming success matrix</h3><p><img src=\"http://i.imgur.com/mgDJe9w.png\" alt=\"Pair programming success matrix\"></p>\n<h3 id=\"Definitions\"><a href=\"#Definitions\" class=\"headerlink\" title=\"Definitions\"></a>Definitions</h3><h4 id=\"Mind-the-effectiveness-gap\"><a href=\"#Mind-the-effectiveness-gap\" class=\"headerlink\" title=\"(Mind the) effectiveness gap\"></a>(Mind the) effectiveness gap</h4><p>In my observations, the most relevant, distinguishing factor between pairs was the <em>gap in effectiveness</em> between the two individuals. Many things go into how effective a programmer might be - their previous experience, domain knowledge, language knowledge, etc. If we combine all of those things together, we’ll get “effectiveness”. Perhaps another way to think about “effectiveness” is the potential strength of their output, including speed and quality. For the purposes of this discussion, I’m going to refer to high and low effective programmers as “seniors” and “juniors”.</p>\n<h4 id=\"Benefit\"><a href=\"#Benefit\" class=\"headerlink\" title=\"Benefit\"></a>Benefit</h4><p>When pairing, the hope is that the business (and the individuals) will benefit more than if the two worked independently.</p>\n<h3 id=\"Pairs-with-small-effectiveness-gaps\"><a href=\"#Pairs-with-small-effectiveness-gaps\" class=\"headerlink\" title=\"Pairs with small effectiveness gaps\"></a>Pairs with small effectiveness gaps</h3><p>In my experience, these generally worked out better than pairs with large gaps. Perhaps the reason is because the developers have more in common, which equates to instant “free” empathy which helps improve their interactions. I believe the points outlined in the matrix are clear. Essentially, strong pairs with small effectiveness gaps have a good chemistry. They understand and respect each other, communicate often, and help each other learn. It results in a very satisfying and mutually beneficial interaction. It’s usually a lot of fun too.</p>\n<p>If we dig a level deeper, there are different characteristics between senior and junior pairs.</p>\n<h4 id=\"Junior-pairs\"><a href=\"#Junior-pairs\" class=\"headerlink\" title=\"Junior pairs\"></a>Junior pairs</h4><p>It is my observation that junior pairs provide more benefit than senior pairs. Why? Probably because junior developers have weak opinions, their egos are smaller, and they care more about learning as opposed to being “right”.</p>\n<p>I also believe there’s the “new kids in school” effect happening. Imagine you’re a kid and your family moves to a new town in the middle of the school year. If there was another kid in your class who also joined around the same time as you, you’d probably become friends rather easily since you’re both in the same situation. It’s the same with pairing. If you’re both new to the app/technology/language/whatever, you’ll instantly have more empathy for one another. You’ll want to explore similar things, get excited about solving the same type of problems and generally collaborate well.</p>\n<p>When two juniors pair, the primary goal should be to <strong>learn</strong>.</p>\n<h4 id=\"Senior-pairs\"><a href=\"#Senior-pairs\" class=\"headerlink\" title=\"Senior pairs\"></a>Senior pairs</h4><p>When both developers are seniors, it’s harder to get a good match for the same reasons. Every programmer is different, and has different opinions. The more experience you have, the stronger those opinions are. Also, when you know a lot, it is possible for it inflate your ego. When one person has a large ego, the pair may yield poor decisions due to being insecure or the there person “tiptoeing” around to ensure they don’t dent their pair’s ego.</p>\n<p>Even worse is when both pairs have large egos. In this case they argue (not debate) a lot and it can become tense with animosity. The worse I’ve seen is when the navigator would physically walk away from the workstation for extended periods of time. The pair wasn’t even communicating at this point and obviously in negative benefit territory.</p>\n<p>Good senior pairs have a lot of respect for each other. They talk a lot. They debate, discuss and plan. They work at a professional level, not personal. It is a thing of beauty. And the business benefits greatly with strong output.</p>\n<p>When two seniors pair, the primary goal should be to <strong>produce</strong>.</p>\n<h3 id=\"Pairing-juniors-with-seniors\"><a href=\"#Pairing-juniors-with-seniors\" class=\"headerlink\" title=\"Pairing juniors with seniors\"></a>Pairing juniors with seniors</h3><p>Putting together a senior and junior requires a different approach. This pairing arrangement tends to happen when new developers join the company or switch into a new development context. The new, “junior” might be paired with a “senior” with the expectation for the junior to ramp up quickly. If the senior is not the right person, or has the wrong expectations, this will turn out badly. and risk hurting the junior’s morale.</p>\n<h4 id=\"Expectation\"><a href=\"#Expectation\" class=\"headerlink\" title=\"Expectation\"></a>Expectation</h4><p>Leadership must understand this arrangement is about ramping up the junior as fast as possible. But that must be understood by everyone who has a stake in this pair - the other developers, designers, QA, etc., and, especially the senior. The pair should not have any pressure to deliver, because once they do, it will ruin the pairing dynamic. It will turn into frustration on both sides because the senior will be slowed down by, or will run ahead of the junior.</p>\n<blockquote>\n<p>Output will be slow while mentoring takes place.</p>\n</blockquote>\n<h4 id=\"Mentoring\"><a href=\"#Mentoring\" class=\"headerlink\" title=\"Mentoring\"></a>Mentoring</h4><p>Once the senior understands that their role is to mentor, and not to pump out stories, only then can the pair start to engage in beneficial work. But there’s more to consider.</p>\n<blockquote>\n<p>Good mentors listen, answer questions, observe and ask <em>leading</em> questions.</p>\n</blockquote>\n<p>This is really hard to do because as human beings, we tend to do the opposite. So here’s a reminder:</p>\n<p>Do NOT tell them what to type, or tell them what to do or take over and show them. Stop yourself. Let them make the mistake you see coming. Let them feel some of the consequences. Let them think about why that was bad. Let them correct it. Let them ask you questions along the way. Try to answer with <em>questions</em>. If they get stuck, lead them out with <em>questions</em>.</p>\n<p>I remember I was really under the gun to get stuff done while I was pairing with a brand new co-op student. I knowingly steamrolled my pair and continuously apologizing, which probably didn’t make him feel any better. Looking back, I should have changed the pairing arrangement or found a way to take the pressure off.</p>\n<p>It takes a ton of patience, self-confidence and empathy to be a good mentor. We want build the junior up, not show them what you know. From what I’ve seen, good programming mentors are lacking in our industry. Everyone is too busy trying to get stuff done or they just don’t have the human skills to do it well. Some questions that may help determine if someone is a good mentor are:</p>\n<p>Do they share knowledge and help juniors often? Do they get defensive about their skills or opinions? Are they comfortable with sacrificing for the good of the team?</p>\n<p>When pairing a senior and junior together, the primary goal should be <strong>mentoring and learning</strong>.</p>\n<h2 id=\"Leadership’s-role\"><a href=\"#Leadership’s-role\" class=\"headerlink\" title=\"Leadership’s role\"></a>Leadership’s role</h2><h3 id=\"Culture\"><a href=\"#Culture\" class=\"headerlink\" title=\"Culture\"></a>Culture</h3><p>In any situation, good things happen when there is understanding between people. Pair programming is no different. Understanding comes from empathy, communication and self-confidence. Business and technical leaders can set the example so it can propagate down through the rest of the team. Culture comes from the top. And it’s not what they say it is, it’s how they <em>act</em> that defines culture.</p>\n<h3 id=\"Expectations\"><a href=\"#Expectations\" class=\"headerlink\" title=\"Expectations\"></a>Expectations</h3><p>As I’ve identified above, each pairing scenario is different. It’s important to recognize them as different, understand what will make it beneficial, and communicate that to everyone who needs to know so that expectations are clear and in alignment with the pairing dynamic.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This particular subject reinforced for me that programming is as much about people as it is about technology. We are people, writing software for people, in collaboration with other people. The technical skills are obviously required, but being a great programmer goes hand in hand with being a great person.</p>\n<p>Happy exploring!</p>"},{"title":"Clean Code - The Book","id":"12","date":"2013-06-06T16:47:29.000Z","_content":"\nInitial insights after reading the first bit of Clean Code, the book written by Robert C. Martin aka Uncle Bob.\n\n<!--more-->\n\nI started reading the book called [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by Robert C. Martin. I've been told and have read that this is a must read for aspiring developers. So far from what I gather, the book is all about **writing code for easy maintenance.**\n\nI love this because, this is how I live my life. When I have financial papers mailed to me, they get filed right away because I know that I'll need to find them one day and I don't want to run around my house wasting half a day looking for them. So I'm really excited about learning all that Martin has to say because I want my code to be elegant.\n\nBut wait, there's more! Martin also says **writing clean code saves time _now_**. But how can all the constant refactoring speed things up when your have deadlines to meet? Isn't it faster to clean the code later, say all in one day, after the deadline? Apparently not because you'll need to return to your code several times in the short term, and if its not clean, you'll lose time trying to understand/remember what you were trying to do. I kind of agree, but I need to prove this to myself to be fully convinced. It'll certainly take a leap of faith when the deadline is looming over your head.\n\nCan't wait to keep reading...","source":"_posts/clean-code-the-book.md","raw":"---\ntitle: Clean Code - The Book\ntags:\n  - books\n  - coding\nid: 12\ncategories:\n  - Uncategorized\ndate: 2013-06-06 12:47:29\n---\n\nInitial insights after reading the first bit of Clean Code, the book written by Robert C. Martin aka Uncle Bob.\n\n<!--more-->\n\nI started reading the book called [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) by Robert C. Martin. I've been told and have read that this is a must read for aspiring developers. So far from what I gather, the book is all about **writing code for easy maintenance.**\n\nI love this because, this is how I live my life. When I have financial papers mailed to me, they get filed right away because I know that I'll need to find them one day and I don't want to run around my house wasting half a day looking for them. So I'm really excited about learning all that Martin has to say because I want my code to be elegant.\n\nBut wait, there's more! Martin also says **writing clean code saves time _now_**. But how can all the constant refactoring speed things up when your have deadlines to meet? Isn't it faster to clean the code later, say all in one day, after the deadline? Apparently not because you'll need to return to your code several times in the short term, and if its not clean, you'll lose time trying to understand/remember what you were trying to do. I kind of agree, but I need to prove this to myself to be fully convinced. It'll certainly take a leap of faith when the deadline is looming over your head.\n\nCan't wait to keep reading...","slug":"clean-code-the-book","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswc00063fys63ec4d2t","content":"<p>Initial insights after reading the first bit of Clean Code, the book written by Robert C. Martin aka Uncle Bob.</p>\n<a id=\"more\"></a>\n<p>I started reading the book called <a href=\"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\" target=\"_blank\" rel=\"external\">Clean Code</a> by Robert C. Martin. I’ve been told and have read that this is a must read for aspiring developers. So far from what I gather, the book is all about <strong>writing code for easy maintenance.</strong></p>\n<p>I love this because, this is how I live my life. When I have financial papers mailed to me, they get filed right away because I know that I’ll need to find them one day and I don’t want to run around my house wasting half a day looking for them. So I’m really excited about learning all that Martin has to say because I want my code to be elegant.</p>\n<p>But wait, there’s more! Martin also says <strong>writing clean code saves time <em>now</em></strong>. But how can all the constant refactoring speed things up when your have deadlines to meet? Isn’t it faster to clean the code later, say all in one day, after the deadline? Apparently not because you’ll need to return to your code several times in the short term, and if its not clean, you’ll lose time trying to understand/remember what you were trying to do. I kind of agree, but I need to prove this to myself to be fully convinced. It’ll certainly take a leap of faith when the deadline is looming over your head.</p>\n<p>Can’t wait to keep reading…</p>\n","excerpt":"<p>Initial insights after reading the first bit of Clean Code, the book written by Robert C. Martin aka Uncle Bob.</p>","more":"<p>I started reading the book called <a href=\"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">Clean Code</a> by Robert C. Martin. I’ve been told and have read that this is a must read for aspiring developers. So far from what I gather, the book is all about <strong>writing code for easy maintenance.</strong></p>\n<p>I love this because, this is how I live my life. When I have financial papers mailed to me, they get filed right away because I know that I’ll need to find them one day and I don’t want to run around my house wasting half a day looking for them. So I’m really excited about learning all that Martin has to say because I want my code to be elegant.</p>\n<p>But wait, there’s more! Martin also says <strong>writing clean code saves time <em>now</em></strong>. But how can all the constant refactoring speed things up when your have deadlines to meet? Isn’t it faster to clean the code later, say all in one day, after the deadline? Apparently not because you’ll need to return to your code several times in the short term, and if its not clean, you’ll lose time trying to understand/remember what you were trying to do. I kind of agree, but I need to prove this to myself to be fully convinced. It’ll certainly take a leap of faith when the deadline is looming over your head.</p>\n<p>Can’t wait to keep reading…</p>"},{"title":"Dependency injection example in Swift","id":"128","date":"2015-03-10T14:14:59.000Z","_content":"\nThe term \"dependency injection\" is a popular, but also confusing term, especially for newer developers. This post attempts to demystify things with a simple example done in Swift.\n\n<!--more-->\n\n## What is dependency injection?\n\n### Complicated explanation\n\n[Wikipedia](http://en.wikipedia.org/wiki/Dependency_injection) provides a definition with perhaps more fancy terms along with a very general example, which I don't find very helpful.\n\n### Over simplistic explanation\n\n[This StackOverflow post](http://stackoverflow.com/questions/130794/what-is-dependency-injection) has several answers, including one that quotes James Shore:\n\n> Dependency Injection\" is a 25-dollar term for a 5-cent concept. [...] Dependency injection means giving an object its instance variables. […].\n\nAlthough in his blog post he goes into more detail, this statement is misleading. Its more complicated than just providing instance variables.\n\n### My explanation\n\nHaving a good understanding of what problem dependency injection can solve might be a good place to start. If you can think of a time where you have existing, working code and then you're given the task of adding behaviour you didn't originally anticipate. Dependency injection can help with this sort of thing, so that the new behaviour is easy to add.\n\nHere's my attempt at explaining it:\n\n> Dependency injection is recognizing the various changes your object needs to make. Instead of having your object make those changes, you move the changes out into their own \"changer\" objects (dependencies), and then pass (inject) them into your object for it to use. What gives dependency injection its power and usefullness is creating an abstraction from these dependencies to provide a unified interface. This way you your object has to care about this abstracted interface and not the actual dependency it recieves (which helps acheive loose coupling).\n\nExamples are usually more helpful, so lets get to it.\n\n## Dependency injection example in Swift\n\nThis example is inspired by an example Sandi Metz did in a workshop I attended which helped clarify things for me. The following example shows the evolution of the `Song` class which recites the cumulative song, [The House That Jack Built](https://www.youtube.com/watch?v=7sDSYVfnj_E). For conciseness, I only use the first three lines of the song:\n\n> This is the house that Jack built.\n> \n>   This is the malt that lay in the house that Jack built.\n> \n>   This is the rat that ate the malt that lay in the house that Jack built.\n\nWe'll start with a single requirement, then add requirements that help reveal the need for dependency injection. I've created playground files located in [this Github repository](https://github.com/sundeepgupta/dependency-injection-example) or you can [directly download them](https://github.com/sundeepgupta/dependency-injection-example/archive/master.zip). At the bottom of each playground file, there are \"tests\" to make sure our code is working.\n\n### Start - normal case\n\nThe initial requirements are to recite the song, or a specified line. This is in the file `0-Plain.playground`.\n\n    class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private let phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = \" \".join(linePhrases)\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return \"\\n\".join(lines)\n        }\n    }\n    `</pre>\n\n    ### Add first requirement - repeat each phrase\n\n    This requirement means we want each phrase in each line to repeat. For example, the second line would be:\n\n    > This is the malt that lay in the malt that lay in the house that Jack built the house that Jack built.\n\n    There are several options to add this requirement and it doesn’t matter which one we choose as they'll converge to the same fundamental issue. I choose to do the following which can be seen in `1-Repeat.playground`.\n\n*   Make the `phrases` property mutable.*   Create a custom `init` that takes a `repeat` boolean.\n*   Conditionally modify `phrases` based on `repeat`.\n    <pre>`class Song {\n    // ...\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n        init(repeat: Bool) {\n            if repeat {\n                self.phrases = self.phrases.map { phrase -&gt; String in\n                    return phrase + \" \" + phrase\n                }\n            }\n        }\n    // ...    }\n    `</pre>\n\n    Here, we have a new dependency that the `phrases` array needs to be changed to accomodate the new requirement. Notice `Song` handles the dependency internally, it's not being injected in.\n\n    ### Add second requirement - reverse the song\n\n    Now we want the ability to recite the song and each lines backwards. For example, line two would be:\n\n    > This is the malt that lay in the rat that ate.\n\n    To add this, I simply follow the pattern already established. The changes made in `2-Reverse.playground` are:\n\n*   Instead of a boolean now, pass in a `songType` to indicate how the song should be sung.\n*   Add the code to reverse `phrases`.\n    <pre>`class Song {\n    // ...\n        init(songType: String) {\n            if songType == \"repeat\" {\n                self.phrases = self.phrases.map { phrase -&gt; String in\n                    return phrase + \" \" + phrase\n                }\n            } else if songType == \"reverse\" {\n                self.phrases = self.phrases.reverse()\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    Now we have two dependencies that `Song` internally handles. This code is a bit wierd as we still have to pass in a string for the normal case. We could solve this in a few ways, but that's not the focus so lets leave it for now.\n\n    What if we are to add a third requirement now? You're probably feeling the urge to look for a better way than to just add a third `songType`. The code we have now isn't [\"open\" for change](http://en.wikipedia.org/wiki/Open/closed_principle), in that, to add new new behaviour, we need to _modify_ our code. We want to be able to only _add_ new code.\n\n    ### Move dependencies out\n\n    First, lets move the dependent code their own classes and modify our `init` accordingly to use them in `3-Classes.playground`:\n\n    <pre>`class Repeater {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            return list.map { item -&gt; String in\n                return item + \" \" + item\n            }\n        }\n    }\n\n    class Reverser {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            return list.reverse()\n        }\n    }\n\n    class Song {\n    // ...\n        init(songType: String) {\n            if songType == \"repeat\" {\n                self.phrases = Repeater().result(self.phrases)\n            } else if songType == \"reverse\" {\n                self.phrases = Reverser().result(self.phrases)\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    Now that our dependencies live outside of `Song`, the code is a little bit nicer, but it's still not open for change. We still have the conditional in our `init` and our `Song` still must know about both `Repeater` and `Reverser` dependencies. To solve this problem, we need the ability to inject these dependencies into `Song`. But how? By creating an abstraction of and so we can provide a unified interface to them. There are three ways to do this in Swift: inheritance, protocols, and closures. For this example, I choose to use a protocol.\n\n    **Note:** If we were doing this in a dynamically typed language like Ruby, we wouldn't need this step since we've already given our dependencies the same interface, `result()`.\n\n    ### Inject dependencies\n\n    We create our protocol `Remixer` and have our dependencies conform to it. Now we can inject any class conforming to `Remixer` into `Song`'s `init` as seen in `4-Injectction.playground`.\n\n    <pre>`protocol Remixer {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt;\n    }\n\n    class Repeater : Remixer { // ... }\n\n    class Reverser : Remixer { // ... }\n\n    class Song {\n    // ...\n        init(remixer: Remixer?) {\n            if remixer != nil {\n                self.phrases = remixer!.result(self.phrases)\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    That's it! That is dependency injection.\n\n    You might be wondering about why `init` takes an optional `Remixer` value. That was a choice I made. We could have also created another `Remixer` called `Keeper` that does returns the list without modification, and inject a `Keeper` into `init`. Or also set a `Keeper` as the default paramater value.\n\n    ### Add third requirement - randomize the song\n\n    This requirement means to play the song in a random order. And now that `Song` is open to change via dependency injection, this requirement is trivial to add. We simply add a new `Remixer` called `Shuffler`and inject it in as shown in `5-Shuffle.playground`.\n\n    <pre>`import Foundation\n\n    class Shuffler : Remixer {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            var newList = list\n            let listCount = count(newList)\n            for i in 0..&lt;(listCount - 1) {\n                let j = Int(arc4random_uniform(UInt32(listCount - i))) + i\n                swap(&amp;newList[i], &amp;newList[j])\n            }\n            return newList\n        }\n    }\n\n## Conclusion\n\nDoing examples like these help me understand things better and hope I've helped you understand dependency injection and how it can be useful.\n\nHappy exploring!","source":"_posts/dependency-injection-example-in-swift.md","raw":"---\ntitle: Dependency injection example in Swift\ntags:\n  - coding\n  - design patterns\n  - swift\nid: 128\ncategories:\n  - Uncategorized\ndate: 2015-03-10 10:14:59\n---\n\nThe term \"dependency injection\" is a popular, but also confusing term, especially for newer developers. This post attempts to demystify things with a simple example done in Swift.\n\n<!--more-->\n\n## What is dependency injection?\n\n### Complicated explanation\n\n[Wikipedia](http://en.wikipedia.org/wiki/Dependency_injection) provides a definition with perhaps more fancy terms along with a very general example, which I don't find very helpful.\n\n### Over simplistic explanation\n\n[This StackOverflow post](http://stackoverflow.com/questions/130794/what-is-dependency-injection) has several answers, including one that quotes James Shore:\n\n> Dependency Injection\" is a 25-dollar term for a 5-cent concept. [...] Dependency injection means giving an object its instance variables. […].\n\nAlthough in his blog post he goes into more detail, this statement is misleading. Its more complicated than just providing instance variables.\n\n### My explanation\n\nHaving a good understanding of what problem dependency injection can solve might be a good place to start. If you can think of a time where you have existing, working code and then you're given the task of adding behaviour you didn't originally anticipate. Dependency injection can help with this sort of thing, so that the new behaviour is easy to add.\n\nHere's my attempt at explaining it:\n\n> Dependency injection is recognizing the various changes your object needs to make. Instead of having your object make those changes, you move the changes out into their own \"changer\" objects (dependencies), and then pass (inject) them into your object for it to use. What gives dependency injection its power and usefullness is creating an abstraction from these dependencies to provide a unified interface. This way you your object has to care about this abstracted interface and not the actual dependency it recieves (which helps acheive loose coupling).\n\nExamples are usually more helpful, so lets get to it.\n\n## Dependency injection example in Swift\n\nThis example is inspired by an example Sandi Metz did in a workshop I attended which helped clarify things for me. The following example shows the evolution of the `Song` class which recites the cumulative song, [The House That Jack Built](https://www.youtube.com/watch?v=7sDSYVfnj_E). For conciseness, I only use the first three lines of the song:\n\n> This is the house that Jack built.\n> \n>   This is the malt that lay in the house that Jack built.\n> \n>   This is the rat that ate the malt that lay in the house that Jack built.\n\nWe'll start with a single requirement, then add requirements that help reveal the need for dependency injection. I've created playground files located in [this Github repository](https://github.com/sundeepgupta/dependency-injection-example) or you can [directly download them](https://github.com/sundeepgupta/dependency-injection-example/archive/master.zip). At the bottom of each playground file, there are \"tests\" to make sure our code is working.\n\n### Start - normal case\n\nThe initial requirements are to recite the song, or a specified line. This is in the file `0-Plain.playground`.\n\n    class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private let phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = \" \".join(linePhrases)\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return \"\\n\".join(lines)\n        }\n    }\n    `</pre>\n\n    ### Add first requirement - repeat each phrase\n\n    This requirement means we want each phrase in each line to repeat. For example, the second line would be:\n\n    > This is the malt that lay in the malt that lay in the house that Jack built the house that Jack built.\n\n    There are several options to add this requirement and it doesn’t matter which one we choose as they'll converge to the same fundamental issue. I choose to do the following which can be seen in `1-Repeat.playground`.\n\n*   Make the `phrases` property mutable.*   Create a custom `init` that takes a `repeat` boolean.\n*   Conditionally modify `phrases` based on `repeat`.\n    <pre>`class Song {\n    // ...\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n        init(repeat: Bool) {\n            if repeat {\n                self.phrases = self.phrases.map { phrase -&gt; String in\n                    return phrase + \" \" + phrase\n                }\n            }\n        }\n    // ...    }\n    `</pre>\n\n    Here, we have a new dependency that the `phrases` array needs to be changed to accomodate the new requirement. Notice `Song` handles the dependency internally, it's not being injected in.\n\n    ### Add second requirement - reverse the song\n\n    Now we want the ability to recite the song and each lines backwards. For example, line two would be:\n\n    > This is the malt that lay in the rat that ate.\n\n    To add this, I simply follow the pattern already established. The changes made in `2-Reverse.playground` are:\n\n*   Instead of a boolean now, pass in a `songType` to indicate how the song should be sung.\n*   Add the code to reverse `phrases`.\n    <pre>`class Song {\n    // ...\n        init(songType: String) {\n            if songType == \"repeat\" {\n                self.phrases = self.phrases.map { phrase -&gt; String in\n                    return phrase + \" \" + phrase\n                }\n            } else if songType == \"reverse\" {\n                self.phrases = self.phrases.reverse()\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    Now we have two dependencies that `Song` internally handles. This code is a bit wierd as we still have to pass in a string for the normal case. We could solve this in a few ways, but that's not the focus so lets leave it for now.\n\n    What if we are to add a third requirement now? You're probably feeling the urge to look for a better way than to just add a third `songType`. The code we have now isn't [\"open\" for change](http://en.wikipedia.org/wiki/Open/closed_principle), in that, to add new new behaviour, we need to _modify_ our code. We want to be able to only _add_ new code.\n\n    ### Move dependencies out\n\n    First, lets move the dependent code their own classes and modify our `init` accordingly to use them in `3-Classes.playground`:\n\n    <pre>`class Repeater {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            return list.map { item -&gt; String in\n                return item + \" \" + item\n            }\n        }\n    }\n\n    class Reverser {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            return list.reverse()\n        }\n    }\n\n    class Song {\n    // ...\n        init(songType: String) {\n            if songType == \"repeat\" {\n                self.phrases = Repeater().result(self.phrases)\n            } else if songType == \"reverse\" {\n                self.phrases = Reverser().result(self.phrases)\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    Now that our dependencies live outside of `Song`, the code is a little bit nicer, but it's still not open for change. We still have the conditional in our `init` and our `Song` still must know about both `Repeater` and `Reverser` dependencies. To solve this problem, we need the ability to inject these dependencies into `Song`. But how? By creating an abstraction of and so we can provide a unified interface to them. There are three ways to do this in Swift: inheritance, protocols, and closures. For this example, I choose to use a protocol.\n\n    **Note:** If we were doing this in a dynamically typed language like Ruby, we wouldn't need this step since we've already given our dependencies the same interface, `result()`.\n\n    ### Inject dependencies\n\n    We create our protocol `Remixer` and have our dependencies conform to it. Now we can inject any class conforming to `Remixer` into `Song`'s `init` as seen in `4-Injectction.playground`.\n\n    <pre>`protocol Remixer {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt;\n    }\n\n    class Repeater : Remixer { // ... }\n\n    class Reverser : Remixer { // ... }\n\n    class Song {\n    // ...\n        init(remixer: Remixer?) {\n            if remixer != nil {\n                self.phrases = remixer!.result(self.phrases)\n            }\n        }\n    // ...\n    }\n    `</pre>\n\n    That's it! That is dependency injection.\n\n    You might be wondering about why `init` takes an optional `Remixer` value. That was a choice I made. We could have also created another `Remixer` called `Keeper` that does returns the list without modification, and inject a `Keeper` into `init`. Or also set a `Keeper` as the default paramater value.\n\n    ### Add third requirement - randomize the song\n\n    This requirement means to play the song in a random order. And now that `Song` is open to change via dependency injection, this requirement is trivial to add. We simply add a new `Remixer` called `Shuffler`and inject it in as shown in `5-Shuffle.playground`.\n\n    <pre>`import Foundation\n\n    class Shuffler : Remixer {\n        func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n            var newList = list\n            let listCount = count(newList)\n            for i in 0..&lt;(listCount - 1) {\n                let j = Int(arc4random_uniform(UInt32(listCount - i))) + i\n                swap(&amp;newList[i], &amp;newList[j])\n            }\n            return newList\n        }\n    }\n\n## Conclusion\n\nDoing examples like these help me understand things better and hope I've helped you understand dependency injection and how it can be useful.\n\nHappy exploring!","slug":"dependency-injection-example-in-swift","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswd00073fys2l0vi7mb","content":"<p>The term “dependency injection” is a popular, but also confusing term, especially for newer developers. This post attempts to demystify things with a simple example done in Swift.</p>\n<a id=\"more\"></a>\n<h2 id=\"What-is-dependency-injection\"><a href=\"#What-is-dependency-injection\" class=\"headerlink\" title=\"What is dependency injection?\"></a>What is dependency injection?</h2><h3 id=\"Complicated-explanation\"><a href=\"#Complicated-explanation\" class=\"headerlink\" title=\"Complicated explanation\"></a>Complicated explanation</h3><p><a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"external\">Wikipedia</a> provides a definition with perhaps more fancy terms along with a very general example, which I don’t find very helpful.</p>\n<h3 id=\"Over-simplistic-explanation\"><a href=\"#Over-simplistic-explanation\" class=\"headerlink\" title=\"Over simplistic explanation\"></a>Over simplistic explanation</h3><p><a href=\"http://stackoverflow.com/questions/130794/what-is-dependency-injection\" target=\"_blank\" rel=\"external\">This StackOverflow post</a> has several answers, including one that quotes James Shore:</p>\n<blockquote>\n<p>Dependency Injection” is a 25-dollar term for a 5-cent concept. […] Dependency injection means giving an object its instance variables. […].</p>\n</blockquote>\n<p>Although in his blog post he goes into more detail, this statement is misleading. Its more complicated than just providing instance variables.</p>\n<h3 id=\"My-explanation\"><a href=\"#My-explanation\" class=\"headerlink\" title=\"My explanation\"></a>My explanation</h3><p>Having a good understanding of what problem dependency injection can solve might be a good place to start. If you can think of a time where you have existing, working code and then you’re given the task of adding behaviour you didn’t originally anticipate. Dependency injection can help with this sort of thing, so that the new behaviour is easy to add.</p>\n<p>Here’s my attempt at explaining it:</p>\n<blockquote>\n<p>Dependency injection is recognizing the various changes your object needs to make. Instead of having your object make those changes, you move the changes out into their own “changer” objects (dependencies), and then pass (inject) them into your object for it to use. What gives dependency injection its power and usefullness is creating an abstraction from these dependencies to provide a unified interface. This way you your object has to care about this abstracted interface and not the actual dependency it recieves (which helps acheive loose coupling).</p>\n</blockquote>\n<p>Examples are usually more helpful, so lets get to it.</p>\n<h2 id=\"Dependency-injection-example-in-Swift\"><a href=\"#Dependency-injection-example-in-Swift\" class=\"headerlink\" title=\"Dependency injection example in Swift\"></a>Dependency injection example in Swift</h2><p>This example is inspired by an example Sandi Metz did in a workshop I attended which helped clarify things for me. The following example shows the evolution of the <code>Song</code> class which recites the cumulative song, <a href=\"https://www.youtube.com/watch?v=7sDSYVfnj_E\" target=\"_blank\" rel=\"external\">The House That Jack Built</a>. For conciseness, I only use the first three lines of the song:</p>\n<blockquote>\n<p>This is the house that Jack built.</p>\n<p>  This is the malt that lay in the house that Jack built.</p>\n<p>  This is the rat that ate the malt that lay in the house that Jack built.</p>\n</blockquote>\n<p>We’ll start with a single requirement, then add requirements that help reveal the need for dependency injection. I’ve created playground files located in <a href=\"https://github.com/sundeepgupta/dependency-injection-example\" target=\"_blank\" rel=\"external\">this Github repository</a> or you can <a href=\"https://github.com/sundeepgupta/dependency-injection-example/archive/master.zip\" target=\"_blank\" rel=\"external\">directly download them</a>. At the bottom of each playground file, there are “tests” to make sure our code is working.</p>\n<h3 id=\"Start-normal-case\"><a href=\"#Start-normal-case\" class=\"headerlink\" title=\"Start - normal case\"></a>Start - normal case</h3><p>The initial requirements are to recite the song, or a specified line. This is in the file <code>0-Plain.playground</code>.</p>\n<pre><code>class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private let phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = &quot; &quot;.join(linePhrases)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return &quot;\\n&quot;.join(lines)\n    }\n}\n`&lt;/pre&gt;\n\n### Add first requirement - repeat each phrase\n\nThis requirement means we want each phrase in each line to repeat. For example, the second line would be:\n\n&gt; This is the malt that lay in the malt that lay in the house that Jack built the house that Jack built.\n\nThere are several options to add this requirement and it doesn’t matter which one we choose as they&apos;ll converge to the same fundamental issue. I choose to do the following which can be seen in `1-Repeat.playground`.\n</code></pre><ul>\n<li>Make the <code>phrases</code> property mutable.*   Create a custom <code>init</code> that takes a <code>repeat</code> boolean.</li>\n<li><p>Conditionally modify <code>phrases</code> based on <code>repeat</code>.</p>\n<pre>`class Song {\n// ...\n    private var phrases = [\n        \"the house that Jack built\",\n        \"the malt that lay in\",\n        \"the rat that ate\"\n    ]\n    init(repeat: Bool) {\n        if repeat {\n            self.phrases = self.phrases.map { phrase -&gt; String in\n                return phrase + \" \" + phrase\n            }\n        }\n    }\n// ...    }\n`</pre>\n\n<p>Here, we have a new dependency that the <code>phrases</code> array needs to be changed to accomodate the new requirement. Notice <code>Song</code> handles the dependency internally, it’s not being injected in.</p>\n<h3 id=\"Add-second-requirement-reverse-the-song\"><a href=\"#Add-second-requirement-reverse-the-song\" class=\"headerlink\" title=\"Add second requirement - reverse the song\"></a>Add second requirement - reverse the song</h3><p>Now we want the ability to recite the song and each lines backwards. For example, line two would be:</p>\n<blockquote>\n<p>This is the malt that lay in the rat that ate.</p>\n</blockquote>\n<p>To add this, I simply follow the pattern already established. The changes made in <code>2-Reverse.playground</code> are:</p>\n</li>\n<li><p>Instead of a boolean now, pass in a <code>songType</code> to indicate how the song should be sung.</p>\n</li>\n<li><p>Add the code to reverse <code>phrases</code>.</p>\n<pre>`class Song {\n// ...\n    init(songType: String) {\n        if songType == \"repeat\" {\n            self.phrases = self.phrases.map { phrase -&gt; String in\n                return phrase + \" \" + phrase\n            }\n        } else if songType == \"reverse\" {\n            self.phrases = self.phrases.reverse()\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>Now we have two dependencies that <code>Song</code> internally handles. This code is a bit wierd as we still have to pass in a string for the normal case. We could solve this in a few ways, but that’s not the focus so lets leave it for now.</p>\n<p>What if we are to add a third requirement now? You’re probably feeling the urge to look for a better way than to just add a third <code>songType</code>. The code we have now isn’t <a href=\"http://en.wikipedia.org/wiki/Open/closed_principle\" target=\"_blank\" rel=\"external\">“open” for change</a>, in that, to add new new behaviour, we need to <em>modify</em> our code. We want to be able to only <em>add</em> new code.</p>\n<h3 id=\"Move-dependencies-out\"><a href=\"#Move-dependencies-out\" class=\"headerlink\" title=\"Move dependencies out\"></a>Move dependencies out</h3><p>First, lets move the dependent code their own classes and modify our <code>init</code> accordingly to use them in <code>3-Classes.playground</code>:</p>\n<pre>`class Repeater {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n        return list.map { item -&gt; String in\n            return item + \" \" + item\n        }\n    }\n}\n\nclass Reverser {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n        return list.reverse()\n    }\n}\n\nclass Song {\n// ...\n    init(songType: String) {\n        if songType == \"repeat\" {\n            self.phrases = Repeater().result(self.phrases)\n        } else if songType == \"reverse\" {\n            self.phrases = Reverser().result(self.phrases)\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>Now that our dependencies live outside of <code>Song</code>, the code is a little bit nicer, but it’s still not open for change. We still have the conditional in our <code>init</code> and our <code>Song</code> still must know about both <code>Repeater</code> and <code>Reverser</code> dependencies. To solve this problem, we need the ability to inject these dependencies into <code>Song</code>. But how? By creating an abstraction of and so we can provide a unified interface to them. There are three ways to do this in Swift: inheritance, protocols, and closures. For this example, I choose to use a protocol.</p>\n<p><strong>Note:</strong> If we were doing this in a dynamically typed language like Ruby, we wouldn’t need this step since we’ve already given our dependencies the same interface, <code>result()</code>.</p>\n<h3 id=\"Inject-dependencies\"><a href=\"#Inject-dependencies\" class=\"headerlink\" title=\"Inject dependencies\"></a>Inject dependencies</h3><p>We create our protocol <code>Remixer</code> and have our dependencies conform to it. Now we can inject any class conforming to <code>Remixer</code> into <code>Song</code>‘s <code>init</code> as seen in <code>4-Injectction.playground</code>.</p>\n<pre>`protocol Remixer {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt;\n}\n\nclass Repeater : Remixer { // ... }\n\nclass Reverser : Remixer { // ... }\n\nclass Song {\n// ...\n    init(remixer: Remixer?) {\n        if remixer != nil {\n            self.phrases = remixer!.result(self.phrases)\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>That’s it! That is dependency injection.</p>\n<p>You might be wondering about why <code>init</code> takes an optional <code>Remixer</code> value. That was a choice I made. We could have also created another <code>Remixer</code> called <code>Keeper</code> that does returns the list without modification, and inject a <code>Keeper</code> into <code>init</code>. Or also set a <code>Keeper</code> as the default paramater value.</p>\n<h3 id=\"Add-third-requirement-randomize-the-song\"><a href=\"#Add-third-requirement-randomize-the-song\" class=\"headerlink\" title=\"Add third requirement - randomize the song\"></a>Add third requirement - randomize the song</h3><p>This requirement means to play the song in a random order. And now that <code>Song</code> is open to change via dependency injection, this requirement is trivial to add. We simply add a new <code>Remixer</code> called <code>Shuffler</code>and inject it in as shown in <code>5-Shuffle.playground</code>.</p>\n<p><pre>`import Foundation</pre></p>\n<p>class Shuffler : Remixer {</p>\n<pre><code>func result(list: Array&amp;lt;String&amp;gt;) -&amp;gt; Array&amp;lt;String&amp;gt; {\n    var newList = list\n    let listCount = count(newList)\n    for i in 0..&amp;lt;(listCount - 1) {\n        let j = Int(arc4random_uniform(UInt32(listCount - i))) + i\n        swap(&amp;amp;newList[i], &amp;amp;newList[j])\n    }\n    return newList\n}\n</code></pre><p>}</p>\n</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Doing examples like these help me understand things better and hope I’ve helped you understand dependency injection and how it can be useful.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>The term “dependency injection” is a popular, but also confusing term, especially for newer developers. This post attempts to demystify things with a simple example done in Swift.</p>","more":"<h2 id=\"What-is-dependency-injection\"><a href=\"#What-is-dependency-injection\" class=\"headerlink\" title=\"What is dependency injection?\"></a>What is dependency injection?</h2><h3 id=\"Complicated-explanation\"><a href=\"#Complicated-explanation\" class=\"headerlink\" title=\"Complicated explanation\"></a>Complicated explanation</h3><p><a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">Wikipedia</a> provides a definition with perhaps more fancy terms along with a very general example, which I don’t find very helpful.</p>\n<h3 id=\"Over-simplistic-explanation\"><a href=\"#Over-simplistic-explanation\" class=\"headerlink\" title=\"Over simplistic explanation\"></a>Over simplistic explanation</h3><p><a href=\"http://stackoverflow.com/questions/130794/what-is-dependency-injection\">This StackOverflow post</a> has several answers, including one that quotes James Shore:</p>\n<blockquote>\n<p>Dependency Injection” is a 25-dollar term for a 5-cent concept. […] Dependency injection means giving an object its instance variables. […].</p>\n</blockquote>\n<p>Although in his blog post he goes into more detail, this statement is misleading. Its more complicated than just providing instance variables.</p>\n<h3 id=\"My-explanation\"><a href=\"#My-explanation\" class=\"headerlink\" title=\"My explanation\"></a>My explanation</h3><p>Having a good understanding of what problem dependency injection can solve might be a good place to start. If you can think of a time where you have existing, working code and then you’re given the task of adding behaviour you didn’t originally anticipate. Dependency injection can help with this sort of thing, so that the new behaviour is easy to add.</p>\n<p>Here’s my attempt at explaining it:</p>\n<blockquote>\n<p>Dependency injection is recognizing the various changes your object needs to make. Instead of having your object make those changes, you move the changes out into their own “changer” objects (dependencies), and then pass (inject) them into your object for it to use. What gives dependency injection its power and usefullness is creating an abstraction from these dependencies to provide a unified interface. This way you your object has to care about this abstracted interface and not the actual dependency it recieves (which helps acheive loose coupling).</p>\n</blockquote>\n<p>Examples are usually more helpful, so lets get to it.</p>\n<h2 id=\"Dependency-injection-example-in-Swift\"><a href=\"#Dependency-injection-example-in-Swift\" class=\"headerlink\" title=\"Dependency injection example in Swift\"></a>Dependency injection example in Swift</h2><p>This example is inspired by an example Sandi Metz did in a workshop I attended which helped clarify things for me. The following example shows the evolution of the <code>Song</code> class which recites the cumulative song, <a href=\"https://www.youtube.com/watch?v=7sDSYVfnj_E\">The House That Jack Built</a>. For conciseness, I only use the first three lines of the song:</p>\n<blockquote>\n<p>This is the house that Jack built.</p>\n<p>  This is the malt that lay in the house that Jack built.</p>\n<p>  This is the rat that ate the malt that lay in the house that Jack built.</p>\n</blockquote>\n<p>We’ll start with a single requirement, then add requirements that help reveal the need for dependency injection. I’ve created playground files located in <a href=\"https://github.com/sundeepgupta/dependency-injection-example\">this Github repository</a> or you can <a href=\"https://github.com/sundeepgupta/dependency-injection-example/archive/master.zip\">directly download them</a>. At the bottom of each playground file, there are “tests” to make sure our code is working.</p>\n<h3 id=\"Start-normal-case\"><a href=\"#Start-normal-case\" class=\"headerlink\" title=\"Start - normal case\"></a>Start - normal case</h3><p>The initial requirements are to recite the song, or a specified line. This is in the file <code>0-Plain.playground</code>.</p>\n<pre><code>class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private let phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = &quot; &quot;.join(linePhrases)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return &quot;\\n&quot;.join(lines)\n    }\n}\n`&lt;/pre&gt;\n\n### Add first requirement - repeat each phrase\n\nThis requirement means we want each phrase in each line to repeat. For example, the second line would be:\n\n&gt; This is the malt that lay in the malt that lay in the house that Jack built the house that Jack built.\n\nThere are several options to add this requirement and it doesn’t matter which one we choose as they&apos;ll converge to the same fundamental issue. I choose to do the following which can be seen in `1-Repeat.playground`.\n</code></pre><ul>\n<li>Make the <code>phrases</code> property mutable.*   Create a custom <code>init</code> that takes a <code>repeat</code> boolean.</li>\n<li><p>Conditionally modify <code>phrases</code> based on <code>repeat</code>.</p>\n<pre>`class Song {\n// ...\n    private var phrases = [\n        \"the house that Jack built\",\n        \"the malt that lay in\",\n        \"the rat that ate\"\n    ]\n    init(repeat: Bool) {\n        if repeat {\n            self.phrases = self.phrases.map { phrase -&gt; String in\n                return phrase + \" \" + phrase\n            }\n        }\n    }\n// ...    }\n`</pre>\n\n<p>Here, we have a new dependency that the <code>phrases</code> array needs to be changed to accomodate the new requirement. Notice <code>Song</code> handles the dependency internally, it’s not being injected in.</p>\n<h3 id=\"Add-second-requirement-reverse-the-song\"><a href=\"#Add-second-requirement-reverse-the-song\" class=\"headerlink\" title=\"Add second requirement - reverse the song\"></a>Add second requirement - reverse the song</h3><p>Now we want the ability to recite the song and each lines backwards. For example, line two would be:</p>\n<blockquote>\n<p>This is the malt that lay in the rat that ate.</p>\n</blockquote>\n<p>To add this, I simply follow the pattern already established. The changes made in <code>2-Reverse.playground</code> are:</p>\n</li>\n<li><p>Instead of a boolean now, pass in a <code>songType</code> to indicate how the song should be sung.</p>\n</li>\n<li><p>Add the code to reverse <code>phrases</code>.</p>\n<pre>`class Song {\n// ...\n    init(songType: String) {\n        if songType == \"repeat\" {\n            self.phrases = self.phrases.map { phrase -&gt; String in\n                return phrase + \" \" + phrase\n            }\n        } else if songType == \"reverse\" {\n            self.phrases = self.phrases.reverse()\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>Now we have two dependencies that <code>Song</code> internally handles. This code is a bit wierd as we still have to pass in a string for the normal case. We could solve this in a few ways, but that’s not the focus so lets leave it for now.</p>\n<p>What if we are to add a third requirement now? You’re probably feeling the urge to look for a better way than to just add a third <code>songType</code>. The code we have now isn’t <a href=\"http://en.wikipedia.org/wiki/Open/closed_principle\">“open” for change</a>, in that, to add new new behaviour, we need to <em>modify</em> our code. We want to be able to only <em>add</em> new code.</p>\n<h3 id=\"Move-dependencies-out\"><a href=\"#Move-dependencies-out\" class=\"headerlink\" title=\"Move dependencies out\"></a>Move dependencies out</h3><p>First, lets move the dependent code their own classes and modify our <code>init</code> accordingly to use them in <code>3-Classes.playground</code>:</p>\n<pre>`class Repeater {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n        return list.map { item -&gt; String in\n            return item + \" \" + item\n        }\n    }\n}\n\nclass Reverser {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt; {\n        return list.reverse()\n    }\n}\n\nclass Song {\n// ...\n    init(songType: String) {\n        if songType == \"repeat\" {\n            self.phrases = Repeater().result(self.phrases)\n        } else if songType == \"reverse\" {\n            self.phrases = Reverser().result(self.phrases)\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>Now that our dependencies live outside of <code>Song</code>, the code is a little bit nicer, but it’s still not open for change. We still have the conditional in our <code>init</code> and our <code>Song</code> still must know about both <code>Repeater</code> and <code>Reverser</code> dependencies. To solve this problem, we need the ability to inject these dependencies into <code>Song</code>. But how? By creating an abstraction of and so we can provide a unified interface to them. There are three ways to do this in Swift: inheritance, protocols, and closures. For this example, I choose to use a protocol.</p>\n<p><strong>Note:</strong> If we were doing this in a dynamically typed language like Ruby, we wouldn’t need this step since we’ve already given our dependencies the same interface, <code>result()</code>.</p>\n<h3 id=\"Inject-dependencies\"><a href=\"#Inject-dependencies\" class=\"headerlink\" title=\"Inject dependencies\"></a>Inject dependencies</h3><p>We create our protocol <code>Remixer</code> and have our dependencies conform to it. Now we can inject any class conforming to <code>Remixer</code> into <code>Song</code>‘s <code>init</code> as seen in <code>4-Injectction.playground</code>.</p>\n<pre>`protocol Remixer {\n    func result(list: Array&lt;String&gt;) -&gt; Array&lt;String&gt;\n}\n\nclass Repeater : Remixer { // ... }\n\nclass Reverser : Remixer { // ... }\n\nclass Song {\n// ...\n    init(remixer: Remixer?) {\n        if remixer != nil {\n            self.phrases = remixer!.result(self.phrases)\n        }\n    }\n// ...\n}\n`</pre>\n\n<p>That’s it! That is dependency injection.</p>\n<p>You might be wondering about why <code>init</code> takes an optional <code>Remixer</code> value. That was a choice I made. We could have also created another <code>Remixer</code> called <code>Keeper</code> that does returns the list without modification, and inject a <code>Keeper</code> into <code>init</code>. Or also set a <code>Keeper</code> as the default paramater value.</p>\n<h3 id=\"Add-third-requirement-randomize-the-song\"><a href=\"#Add-third-requirement-randomize-the-song\" class=\"headerlink\" title=\"Add third requirement - randomize the song\"></a>Add third requirement - randomize the song</h3><p>This requirement means to play the song in a random order. And now that <code>Song</code> is open to change via dependency injection, this requirement is trivial to add. We simply add a new <code>Remixer</code> called <code>Shuffler</code>and inject it in as shown in <code>5-Shuffle.playground</code>.</p>\n<p><pre>`import Foundation</p>\n<p>class Shuffler : Remixer {</p>\n<pre><code>func result(list: Array&amp;lt;String&amp;gt;) -&amp;gt; Array&amp;lt;String&amp;gt; {\n    var newList = list\n    let listCount = count(newList)\n    for i in 0..&amp;lt;(listCount - 1) {\n        let j = Int(arc4random_uniform(UInt32(listCount - i))) + i\n        swap(&amp;amp;newList[i], &amp;amp;newList[j])\n    }\n    return newList\n}\n</code></pre><p>}</p>\n</li>\n</ul>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Doing examples like these help me understand things better and hope I’ve helped you understand dependency injection and how it can be useful.</p>\n<p>Happy exploring!</p>"},{"title":"Designing a truly balanced life - is it possible?","id":"169","date":"2016-01-04T03:34:06.000Z","_content":"\nAn exploration into designing a lifestyle that is balanced in all directions.\n\n<!--more-->\n\n## Background\n\nToday is my last day of a three week \"staycation\" (a vacation where I stay at home). I have a young family so essentially, it’s been the same life, except for going to work. Considering I work full-time, this was a lot of time for me to figure out what I'd do exactly, and I was getting a bit anxious as my staycation was approaching.\n\nBut two days before, luckily (or unluckily), I hurt my back due to sleeping on the floor due to attempting to heal my shoulder. I learned that doing this can cause a shift in the spine and my chiropractor woke me up saying I needed to take better care of my body. It was gnawing at me all year that I need into better physical shape as I've become inactive save for my short bike rides on my commute.\n\nReflecting beyond my physical health, I wasn’t feeling the greatest mentally or socially either. My mind has been distracted, and I’ve been losing touch with family and friends. I also didn't have any hobbies. I knew I needed to make changes. This is how I mostly spent my staycation - this and getting plenty of sleep of course.\n\nI've resolved to make several changes in the various areas in my life. And I was able to put a lot into practice during my staycation, but it's easy when I'm not working. I’m skeptical as to how I will accomplish this once I get back into the swing of work. I fear of getting too busy and and de-prioritizing the good habits I'm trying to establish. This post is an attempt to address the skepticism I feel and to explore what an ideally ideally designed life might look like.\n\n## My ideal life's activities\n\nI’ve broken things down into activities I’d like to do on a weekly basis in alphabetical order.\n\n*   **Body** - Take care of my shell. If i’m not physically healthy, my quality of life suffers and I might be prevented from doing work or spending time with family and friends.*   **Chores** - All the necessary admin type work you need to do. Laundry, pay bills, all the boring stuff that you can’t ignore.*   **Commuting** - Unfortunately, this is a big part for a lot of us. If your commute is short, that is seriously amazing.*   **Family** - For me, this generally means my kids (I have spouse as a category lower down). Parenting and building a relationship with my kids is very important to me, after all, after we die, all we have is what we’ve taught the younger generations.*   **Getting ready** - Showering, dressing, breakfast. Winding down at night - stretching, reading, etc. For me and any parent, this includes helping the kids too.*   **Hobbies** - Self explanatory, but I believe it’s important for me to distinguish this from Personal because this is an active thing I want to do. For example, learn the guitar. Where as Personal time could be completely passive, like watching your favourite TV show. For you this may not be true for you, but one of my goals is to develop a hobby as I never really had one before.*   **Mind** - Mind training, spirituality, philosophy, religion, etc. I group all of this stuff together. Personally, it is mind training and exploration through meditation.\n*   **Personal** - As mentioned above, this is your own personal down time. Just relaxing, down time. Reading, listening to music, watching a movie, etc. Stuff that doesn’t require energy.*   **Sleep** - Self explanatory. If you don’t sleep well, your entire system breaks down. This is something I definitely want to get better at.*   **Friends** - Developing and deepening relationships with friends.*   **Spouse** - I call this out separately probably because I found that once we had our girls, our relationship suffered. And we’ve made it a priority to strengthen it. To do this, we need to consciously work on it. It is far too easy to not do this as our days are filled with stuff to do. For example, putting date nights in our calendars.*   **Work** - This is about earning income to pay bills. This is also the time where you do any career advancement things such as reading, networking, courses, conferences, Meetups, etc.\n\nThen I estimated how much of each activity (except for work) I'd ideally like to spend doing on a weekly basis. Work's time was calculated at the end as the time left after all other activities were accounted for. _Note:_ Take these numbers with a grain of salt. A lot of this is personal preference and guesswork. Your ideal activities and allocations will likely differ quite a bit.\n\n![Weekly activities](http://i.imgur.com/YXm702N.png)\n\n## Insights\n\n### Work\n\nWork is the only thing worth discussing at this point. Sure, we could say I don't need that much family time and so on, but let's just assume my numbers are correct for the discussion. What we're seeing then is that we work too much. What? I love what I do, so that can't be right. In Western culture, work weeks generally start at 40 hours and increase the higher up in the organization you are and how small the business is. I truly enjoy building software, so this feels like a bummer. But maybe it's not. Maybe I would be a better crafter and I'd enjoy it more if I did it less.\n\nThe other, more practical, issue is that if I only got paid for 25 hours a week, it would pose a financial problem. So where do we go from here? How do we resolve the differences? What does this say about our Western culture? (I'll skip this last question as it's out of scope, but interesting, nevertheless).\n\n## Design\n\nThis is where our design skills come in. How can we realistically design our ideal life given that we've identified all of the things we want to do, and yet, maintain our current income level? I see two solutions. Work for myself, or combine activities wherever possible. (Or both).\n\n### Work for myself (freelance)\n\nTo maintain income levels, it is probably not possible to do this in a short amount of time at your day job. That leaves working for myself. And working for yourself can mean two different things: Building a business, or freelancing. And building a software development business is not a realistic option as the number of hours required is generally more than any full-time job in the first place. So, that leaves us with freelancing.\n\nWith freelancing, to address the financial concern, it comes down to billable hours multiplied by your rate. (I won't get into value based pricing, for the sake of simplicity). I'd be trying to maximize my billable time, meaning I'd want to minimize effort in getting clients, things like marketing, sales, etc. This would mean I'd need an amazing reputation with a great network. Then, depending on how many billable hours you could work, you could set your rate to match your current income. As an example, supposed I was able to bill 15 hours a week and my current income was $100k. If I worked 48 weeks in a year, I could set my rate to be about $140/hour.\n\nThe possibly more concerning aspect of this is that as a freelance developer, it may not be realistic to find clients that are ok with with 15 hours (or whatever that number is) a week. Generally speaking, clients have timelines they must meet, and they want a lot of work done quickly. My billable capacity might be too little. Where as for someone like a chiropractor, where clients only need them for 1 hour each week, it could work out nicely.\n\n### Combine activities\n\nIf the 25 hour work week sounds like the land of unreasonable, the other way is to combine activities. For example, I could get fit and socialize at the same time by going for a jog together with a friend. The caveat here is that doing this may not always yield the same result as having them done separately. And obviously not all activities are could be combined - like work.\n\nThe question is, can enough activities be combined to make your ideal activities fit together with your full work week? If you work 40 hours a week, that’s combining 15 hours worth of activities. It sounds reasonable, but I'd guess it would take a good amount of effort, and will require compromises. For example, ditching the car for public transportation so you can read during your commute, or travelling to a different gym to meet a friend.\n\n## Making the changes\n\nSo there it is… the ideal lifestyle and two ways to achieve it. Why does it seem so hard? True holistic health requires time. More time than our culture has carved out for us. I have my work cut out for me. As I go back to work tomorrow morning, integrating these lifestyle changes will require a lot of combining of activities. Lets see where I come out.\n\nHappy exploring!","source":"_posts/designing-truly-balanced-life-possible.md","raw":"---\ntitle: Designing a truly balanced life - is it possible?\ntags:\n  - career\n  - consulting\n  - craftsmanship\n  - culture\nid: 169\ncategories:\n  - Uncategorized\ndate: 2016-01-03 22:34:06\n---\n\nAn exploration into designing a lifestyle that is balanced in all directions.\n\n<!--more-->\n\n## Background\n\nToday is my last day of a three week \"staycation\" (a vacation where I stay at home). I have a young family so essentially, it’s been the same life, except for going to work. Considering I work full-time, this was a lot of time for me to figure out what I'd do exactly, and I was getting a bit anxious as my staycation was approaching.\n\nBut two days before, luckily (or unluckily), I hurt my back due to sleeping on the floor due to attempting to heal my shoulder. I learned that doing this can cause a shift in the spine and my chiropractor woke me up saying I needed to take better care of my body. It was gnawing at me all year that I need into better physical shape as I've become inactive save for my short bike rides on my commute.\n\nReflecting beyond my physical health, I wasn’t feeling the greatest mentally or socially either. My mind has been distracted, and I’ve been losing touch with family and friends. I also didn't have any hobbies. I knew I needed to make changes. This is how I mostly spent my staycation - this and getting plenty of sleep of course.\n\nI've resolved to make several changes in the various areas in my life. And I was able to put a lot into practice during my staycation, but it's easy when I'm not working. I’m skeptical as to how I will accomplish this once I get back into the swing of work. I fear of getting too busy and and de-prioritizing the good habits I'm trying to establish. This post is an attempt to address the skepticism I feel and to explore what an ideally ideally designed life might look like.\n\n## My ideal life's activities\n\nI’ve broken things down into activities I’d like to do on a weekly basis in alphabetical order.\n\n*   **Body** - Take care of my shell. If i’m not physically healthy, my quality of life suffers and I might be prevented from doing work or spending time with family and friends.*   **Chores** - All the necessary admin type work you need to do. Laundry, pay bills, all the boring stuff that you can’t ignore.*   **Commuting** - Unfortunately, this is a big part for a lot of us. If your commute is short, that is seriously amazing.*   **Family** - For me, this generally means my kids (I have spouse as a category lower down). Parenting and building a relationship with my kids is very important to me, after all, after we die, all we have is what we’ve taught the younger generations.*   **Getting ready** - Showering, dressing, breakfast. Winding down at night - stretching, reading, etc. For me and any parent, this includes helping the kids too.*   **Hobbies** - Self explanatory, but I believe it’s important for me to distinguish this from Personal because this is an active thing I want to do. For example, learn the guitar. Where as Personal time could be completely passive, like watching your favourite TV show. For you this may not be true for you, but one of my goals is to develop a hobby as I never really had one before.*   **Mind** - Mind training, spirituality, philosophy, religion, etc. I group all of this stuff together. Personally, it is mind training and exploration through meditation.\n*   **Personal** - As mentioned above, this is your own personal down time. Just relaxing, down time. Reading, listening to music, watching a movie, etc. Stuff that doesn’t require energy.*   **Sleep** - Self explanatory. If you don’t sleep well, your entire system breaks down. This is something I definitely want to get better at.*   **Friends** - Developing and deepening relationships with friends.*   **Spouse** - I call this out separately probably because I found that once we had our girls, our relationship suffered. And we’ve made it a priority to strengthen it. To do this, we need to consciously work on it. It is far too easy to not do this as our days are filled with stuff to do. For example, putting date nights in our calendars.*   **Work** - This is about earning income to pay bills. This is also the time where you do any career advancement things such as reading, networking, courses, conferences, Meetups, etc.\n\nThen I estimated how much of each activity (except for work) I'd ideally like to spend doing on a weekly basis. Work's time was calculated at the end as the time left after all other activities were accounted for. _Note:_ Take these numbers with a grain of salt. A lot of this is personal preference and guesswork. Your ideal activities and allocations will likely differ quite a bit.\n\n![Weekly activities](http://i.imgur.com/YXm702N.png)\n\n## Insights\n\n### Work\n\nWork is the only thing worth discussing at this point. Sure, we could say I don't need that much family time and so on, but let's just assume my numbers are correct for the discussion. What we're seeing then is that we work too much. What? I love what I do, so that can't be right. In Western culture, work weeks generally start at 40 hours and increase the higher up in the organization you are and how small the business is. I truly enjoy building software, so this feels like a bummer. But maybe it's not. Maybe I would be a better crafter and I'd enjoy it more if I did it less.\n\nThe other, more practical, issue is that if I only got paid for 25 hours a week, it would pose a financial problem. So where do we go from here? How do we resolve the differences? What does this say about our Western culture? (I'll skip this last question as it's out of scope, but interesting, nevertheless).\n\n## Design\n\nThis is where our design skills come in. How can we realistically design our ideal life given that we've identified all of the things we want to do, and yet, maintain our current income level? I see two solutions. Work for myself, or combine activities wherever possible. (Or both).\n\n### Work for myself (freelance)\n\nTo maintain income levels, it is probably not possible to do this in a short amount of time at your day job. That leaves working for myself. And working for yourself can mean two different things: Building a business, or freelancing. And building a software development business is not a realistic option as the number of hours required is generally more than any full-time job in the first place. So, that leaves us with freelancing.\n\nWith freelancing, to address the financial concern, it comes down to billable hours multiplied by your rate. (I won't get into value based pricing, for the sake of simplicity). I'd be trying to maximize my billable time, meaning I'd want to minimize effort in getting clients, things like marketing, sales, etc. This would mean I'd need an amazing reputation with a great network. Then, depending on how many billable hours you could work, you could set your rate to match your current income. As an example, supposed I was able to bill 15 hours a week and my current income was $100k. If I worked 48 weeks in a year, I could set my rate to be about $140/hour.\n\nThe possibly more concerning aspect of this is that as a freelance developer, it may not be realistic to find clients that are ok with with 15 hours (or whatever that number is) a week. Generally speaking, clients have timelines they must meet, and they want a lot of work done quickly. My billable capacity might be too little. Where as for someone like a chiropractor, where clients only need them for 1 hour each week, it could work out nicely.\n\n### Combine activities\n\nIf the 25 hour work week sounds like the land of unreasonable, the other way is to combine activities. For example, I could get fit and socialize at the same time by going for a jog together with a friend. The caveat here is that doing this may not always yield the same result as having them done separately. And obviously not all activities are could be combined - like work.\n\nThe question is, can enough activities be combined to make your ideal activities fit together with your full work week? If you work 40 hours a week, that’s combining 15 hours worth of activities. It sounds reasonable, but I'd guess it would take a good amount of effort, and will require compromises. For example, ditching the car for public transportation so you can read during your commute, or travelling to a different gym to meet a friend.\n\n## Making the changes\n\nSo there it is… the ideal lifestyle and two ways to achieve it. Why does it seem so hard? True holistic health requires time. More time than our culture has carved out for us. I have my work cut out for me. As I go back to work tomorrow morning, integrating these lifestyle changes will require a lot of combining of activities. Lets see where I come out.\n\nHappy exploring!","slug":"designing-truly-balanced-life-possible","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswg000a3fyso6xlbc4u","content":"<p>An exploration into designing a lifestyle that is balanced in all directions.</p>\n<a id=\"more\"></a>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Today is my last day of a three week “staycation” (a vacation where I stay at home). I have a young family so essentially, it’s been the same life, except for going to work. Considering I work full-time, this was a lot of time for me to figure out what I’d do exactly, and I was getting a bit anxious as my staycation was approaching.</p>\n<p>But two days before, luckily (or unluckily), I hurt my back due to sleeping on the floor due to attempting to heal my shoulder. I learned that doing this can cause a shift in the spine and my chiropractor woke me up saying I needed to take better care of my body. It was gnawing at me all year that I need into better physical shape as I’ve become inactive save for my short bike rides on my commute.</p>\n<p>Reflecting beyond my physical health, I wasn’t feeling the greatest mentally or socially either. My mind has been distracted, and I’ve been losing touch with family and friends. I also didn’t have any hobbies. I knew I needed to make changes. This is how I mostly spent my staycation - this and getting plenty of sleep of course.</p>\n<p>I’ve resolved to make several changes in the various areas in my life. And I was able to put a lot into practice during my staycation, but it’s easy when I’m not working. I’m skeptical as to how I will accomplish this once I get back into the swing of work. I fear of getting too busy and and de-prioritizing the good habits I’m trying to establish. This post is an attempt to address the skepticism I feel and to explore what an ideally ideally designed life might look like.</p>\n<h2 id=\"My-ideal-life’s-activities\"><a href=\"#My-ideal-life’s-activities\" class=\"headerlink\" title=\"My ideal life’s activities\"></a>My ideal life’s activities</h2><p>I’ve broken things down into activities I’d like to do on a weekly basis in alphabetical order.</p>\n<ul>\n<li><strong>Body</strong> - Take care of my shell. If i’m not physically healthy, my quality of life suffers and I might be prevented from doing work or spending time with family and friends.<em>   <strong>Chores</strong> - All the necessary admin type work you need to do. Laundry, pay bills, all the boring stuff that you can’t ignore.</em>   <strong>Commuting</strong> - Unfortunately, this is a big part for a lot of us. If your commute is short, that is seriously amazing.<em>   <strong>Family</strong> - For me, this generally means my kids (I have spouse as a category lower down). Parenting and building a relationship with my kids is very important to me, after all, after we die, all we have is what we’ve taught the younger generations.</em>   <strong>Getting ready</strong> - Showering, dressing, breakfast. Winding down at night - stretching, reading, etc. For me and any parent, this includes helping the kids too.<em>   <strong>Hobbies</strong> - Self explanatory, but I believe it’s important for me to distinguish this from Personal because this is an active thing I want to do. For example, learn the guitar. Where as Personal time could be completely passive, like watching your favourite TV show. For you this may not be true for you, but one of my goals is to develop a hobby as I never really had one before.</em>   <strong>Mind</strong> - Mind training, spirituality, philosophy, religion, etc. I group all of this stuff together. Personally, it is mind training and exploration through meditation.</li>\n<li><strong>Personal</strong> - As mentioned above, this is your own personal down time. Just relaxing, down time. Reading, listening to music, watching a movie, etc. Stuff that doesn’t require energy.<em>   <strong>Sleep</strong> - Self explanatory. If you don’t sleep well, your entire system breaks down. This is something I definitely want to get better at.</em>   <strong>Friends</strong> - Developing and deepening relationships with friends.<em>   <strong>Spouse</strong> - I call this out separately probably because I found that once we had our girls, our relationship suffered. And we’ve made it a priority to strengthen it. To do this, we need to consciously work on it. It is far too easy to not do this as our days are filled with stuff to do. For example, putting date nights in our calendars.</em>   <strong>Work</strong> - This is about earning income to pay bills. This is also the time where you do any career advancement things such as reading, networking, courses, conferences, Meetups, etc.</li>\n</ul>\n<p>Then I estimated how much of each activity (except for work) I’d ideally like to spend doing on a weekly basis. Work’s time was calculated at the end as the time left after all other activities were accounted for. <em>Note:</em> Take these numbers with a grain of salt. A lot of this is personal preference and guesswork. Your ideal activities and allocations will likely differ quite a bit.</p>\n<p><img src=\"http://i.imgur.com/YXm702N.png\" alt=\"Weekly activities\"></p>\n<h2 id=\"Insights\"><a href=\"#Insights\" class=\"headerlink\" title=\"Insights\"></a>Insights</h2><h3 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h3><p>Work is the only thing worth discussing at this point. Sure, we could say I don’t need that much family time and so on, but let’s just assume my numbers are correct for the discussion. What we’re seeing then is that we work too much. What? I love what I do, so that can’t be right. In Western culture, work weeks generally start at 40 hours and increase the higher up in the organization you are and how small the business is. I truly enjoy building software, so this feels like a bummer. But maybe it’s not. Maybe I would be a better crafter and I’d enjoy it more if I did it less.</p>\n<p>The other, more practical, issue is that if I only got paid for 25 hours a week, it would pose a financial problem. So where do we go from here? How do we resolve the differences? What does this say about our Western culture? (I’ll skip this last question as it’s out of scope, but interesting, nevertheless).</p>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p>This is where our design skills come in. How can we realistically design our ideal life given that we’ve identified all of the things we want to do, and yet, maintain our current income level? I see two solutions. Work for myself, or combine activities wherever possible. (Or both).</p>\n<h3 id=\"Work-for-myself-freelance\"><a href=\"#Work-for-myself-freelance\" class=\"headerlink\" title=\"Work for myself (freelance)\"></a>Work for myself (freelance)</h3><p>To maintain income levels, it is probably not possible to do this in a short amount of time at your day job. That leaves working for myself. And working for yourself can mean two different things: Building a business, or freelancing. And building a software development business is not a realistic option as the number of hours required is generally more than any full-time job in the first place. So, that leaves us with freelancing.</p>\n<p>With freelancing, to address the financial concern, it comes down to billable hours multiplied by your rate. (I won’t get into value based pricing, for the sake of simplicity). I’d be trying to maximize my billable time, meaning I’d want to minimize effort in getting clients, things like marketing, sales, etc. This would mean I’d need an amazing reputation with a great network. Then, depending on how many billable hours you could work, you could set your rate to match your current income. As an example, supposed I was able to bill 15 hours a week and my current income was $100k. If I worked 48 weeks in a year, I could set my rate to be about $140/hour.</p>\n<p>The possibly more concerning aspect of this is that as a freelance developer, it may not be realistic to find clients that are ok with with 15 hours (or whatever that number is) a week. Generally speaking, clients have timelines they must meet, and they want a lot of work done quickly. My billable capacity might be too little. Where as for someone like a chiropractor, where clients only need them for 1 hour each week, it could work out nicely.</p>\n<h3 id=\"Combine-activities\"><a href=\"#Combine-activities\" class=\"headerlink\" title=\"Combine activities\"></a>Combine activities</h3><p>If the 25 hour work week sounds like the land of unreasonable, the other way is to combine activities. For example, I could get fit and socialize at the same time by going for a jog together with a friend. The caveat here is that doing this may not always yield the same result as having them done separately. And obviously not all activities are could be combined - like work.</p>\n<p>The question is, can enough activities be combined to make your ideal activities fit together with your full work week? If you work 40 hours a week, that’s combining 15 hours worth of activities. It sounds reasonable, but I’d guess it would take a good amount of effort, and will require compromises. For example, ditching the car for public transportation so you can read during your commute, or travelling to a different gym to meet a friend.</p>\n<h2 id=\"Making-the-changes\"><a href=\"#Making-the-changes\" class=\"headerlink\" title=\"Making the changes\"></a>Making the changes</h2><p>So there it is… the ideal lifestyle and two ways to achieve it. Why does it seem so hard? True holistic health requires time. More time than our culture has carved out for us. I have my work cut out for me. As I go back to work tomorrow morning, integrating these lifestyle changes will require a lot of combining of activities. Lets see where I come out.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>An exploration into designing a lifestyle that is balanced in all directions.</p>","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Today is my last day of a three week “staycation” (a vacation where I stay at home). I have a young family so essentially, it’s been the same life, except for going to work. Considering I work full-time, this was a lot of time for me to figure out what I’d do exactly, and I was getting a bit anxious as my staycation was approaching.</p>\n<p>But two days before, luckily (or unluckily), I hurt my back due to sleeping on the floor due to attempting to heal my shoulder. I learned that doing this can cause a shift in the spine and my chiropractor woke me up saying I needed to take better care of my body. It was gnawing at me all year that I need into better physical shape as I’ve become inactive save for my short bike rides on my commute.</p>\n<p>Reflecting beyond my physical health, I wasn’t feeling the greatest mentally or socially either. My mind has been distracted, and I’ve been losing touch with family and friends. I also didn’t have any hobbies. I knew I needed to make changes. This is how I mostly spent my staycation - this and getting plenty of sleep of course.</p>\n<p>I’ve resolved to make several changes in the various areas in my life. And I was able to put a lot into practice during my staycation, but it’s easy when I’m not working. I’m skeptical as to how I will accomplish this once I get back into the swing of work. I fear of getting too busy and and de-prioritizing the good habits I’m trying to establish. This post is an attempt to address the skepticism I feel and to explore what an ideally ideally designed life might look like.</p>\n<h2 id=\"My-ideal-life’s-activities\"><a href=\"#My-ideal-life’s-activities\" class=\"headerlink\" title=\"My ideal life’s activities\"></a>My ideal life’s activities</h2><p>I’ve broken things down into activities I’d like to do on a weekly basis in alphabetical order.</p>\n<ul>\n<li><strong>Body</strong> - Take care of my shell. If i’m not physically healthy, my quality of life suffers and I might be prevented from doing work or spending time with family and friends.<em>   <strong>Chores</strong> - All the necessary admin type work you need to do. Laundry, pay bills, all the boring stuff that you can’t ignore.</em>   <strong>Commuting</strong> - Unfortunately, this is a big part for a lot of us. If your commute is short, that is seriously amazing.<em>   <strong>Family</strong> - For me, this generally means my kids (I have spouse as a category lower down). Parenting and building a relationship with my kids is very important to me, after all, after we die, all we have is what we’ve taught the younger generations.</em>   <strong>Getting ready</strong> - Showering, dressing, breakfast. Winding down at night - stretching, reading, etc. For me and any parent, this includes helping the kids too.<em>   <strong>Hobbies</strong> - Self explanatory, but I believe it’s important for me to distinguish this from Personal because this is an active thing I want to do. For example, learn the guitar. Where as Personal time could be completely passive, like watching your favourite TV show. For you this may not be true for you, but one of my goals is to develop a hobby as I never really had one before.</em>   <strong>Mind</strong> - Mind training, spirituality, philosophy, religion, etc. I group all of this stuff together. Personally, it is mind training and exploration through meditation.</li>\n<li><strong>Personal</strong> - As mentioned above, this is your own personal down time. Just relaxing, down time. Reading, listening to music, watching a movie, etc. Stuff that doesn’t require energy.<em>   <strong>Sleep</strong> - Self explanatory. If you don’t sleep well, your entire system breaks down. This is something I definitely want to get better at.</em>   <strong>Friends</strong> - Developing and deepening relationships with friends.<em>   <strong>Spouse</strong> - I call this out separately probably because I found that once we had our girls, our relationship suffered. And we’ve made it a priority to strengthen it. To do this, we need to consciously work on it. It is far too easy to not do this as our days are filled with stuff to do. For example, putting date nights in our calendars.</em>   <strong>Work</strong> - This is about earning income to pay bills. This is also the time where you do any career advancement things such as reading, networking, courses, conferences, Meetups, etc.</li>\n</ul>\n<p>Then I estimated how much of each activity (except for work) I’d ideally like to spend doing on a weekly basis. Work’s time was calculated at the end as the time left after all other activities were accounted for. <em>Note:</em> Take these numbers with a grain of salt. A lot of this is personal preference and guesswork. Your ideal activities and allocations will likely differ quite a bit.</p>\n<p><img src=\"http://i.imgur.com/YXm702N.png\" alt=\"Weekly activities\"></p>\n<h2 id=\"Insights\"><a href=\"#Insights\" class=\"headerlink\" title=\"Insights\"></a>Insights</h2><h3 id=\"Work\"><a href=\"#Work\" class=\"headerlink\" title=\"Work\"></a>Work</h3><p>Work is the only thing worth discussing at this point. Sure, we could say I don’t need that much family time and so on, but let’s just assume my numbers are correct for the discussion. What we’re seeing then is that we work too much. What? I love what I do, so that can’t be right. In Western culture, work weeks generally start at 40 hours and increase the higher up in the organization you are and how small the business is. I truly enjoy building software, so this feels like a bummer. But maybe it’s not. Maybe I would be a better crafter and I’d enjoy it more if I did it less.</p>\n<p>The other, more practical, issue is that if I only got paid for 25 hours a week, it would pose a financial problem. So where do we go from here? How do we resolve the differences? What does this say about our Western culture? (I’ll skip this last question as it’s out of scope, but interesting, nevertheless).</p>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p>This is where our design skills come in. How can we realistically design our ideal life given that we’ve identified all of the things we want to do, and yet, maintain our current income level? I see two solutions. Work for myself, or combine activities wherever possible. (Or both).</p>\n<h3 id=\"Work-for-myself-freelance\"><a href=\"#Work-for-myself-freelance\" class=\"headerlink\" title=\"Work for myself (freelance)\"></a>Work for myself (freelance)</h3><p>To maintain income levels, it is probably not possible to do this in a short amount of time at your day job. That leaves working for myself. And working for yourself can mean two different things: Building a business, or freelancing. And building a software development business is not a realistic option as the number of hours required is generally more than any full-time job in the first place. So, that leaves us with freelancing.</p>\n<p>With freelancing, to address the financial concern, it comes down to billable hours multiplied by your rate. (I won’t get into value based pricing, for the sake of simplicity). I’d be trying to maximize my billable time, meaning I’d want to minimize effort in getting clients, things like marketing, sales, etc. This would mean I’d need an amazing reputation with a great network. Then, depending on how many billable hours you could work, you could set your rate to match your current income. As an example, supposed I was able to bill 15 hours a week and my current income was $100k. If I worked 48 weeks in a year, I could set my rate to be about $140/hour.</p>\n<p>The possibly more concerning aspect of this is that as a freelance developer, it may not be realistic to find clients that are ok with with 15 hours (or whatever that number is) a week. Generally speaking, clients have timelines they must meet, and they want a lot of work done quickly. My billable capacity might be too little. Where as for someone like a chiropractor, where clients only need them for 1 hour each week, it could work out nicely.</p>\n<h3 id=\"Combine-activities\"><a href=\"#Combine-activities\" class=\"headerlink\" title=\"Combine activities\"></a>Combine activities</h3><p>If the 25 hour work week sounds like the land of unreasonable, the other way is to combine activities. For example, I could get fit and socialize at the same time by going for a jog together with a friend. The caveat here is that doing this may not always yield the same result as having them done separately. And obviously not all activities are could be combined - like work.</p>\n<p>The question is, can enough activities be combined to make your ideal activities fit together with your full work week? If you work 40 hours a week, that’s combining 15 hours worth of activities. It sounds reasonable, but I’d guess it would take a good amount of effort, and will require compromises. For example, ditching the car for public transportation so you can read during your commute, or travelling to a different gym to meet a friend.</p>\n<h2 id=\"Making-the-changes\"><a href=\"#Making-the-changes\" class=\"headerlink\" title=\"Making the changes\"></a>Making the changes</h2><p>So there it is… the ideal lifestyle and two ways to achieve it. Why does it seem so hard? True holistic health requires time. More time than our culture has carved out for us. I have my work cut out for me. As I go back to work tomorrow morning, integrating these lifestyle changes will require a lot of combining of activities. Lets see where I come out.</p>\n<p>Happy exploring!</p>"},{"title":"Finding Your Purpose - How A Bouncing Icon Clarified Mine","id":"4","date":"2013-05-27T16:38:25.000Z","_content":"\nFinding your purpose is hard. A failed business took a lot out of me, but it gave me much more strength in clarifying my life's purpose.\n\n<!--more-->\n\n> \"Your purpose in life is to find your purpose and give your whole heart and soul to it.\"\n\n― Gautama Buddha\n\nAfter pouring a lot of time, effort and money into a business called SalesCase, I recently decided to stop the project.\n\nIn the beginning, it seemed all too simple to build and sell. However, after almost a year of research, planning, developing, marketing, networking, etc., it seemed like I was still only half way there before getting an MVP to market! How could this be? It was supposed to a simple software.\n\nI know it sounds bad, and its hard to accept. But I learned a lot about software development and starting a software business. But more importantly, I made great strides in finding my purpose.\n\nWhen I look back on all of the work I did for SalesCase, research, planning, wireframing, marketing and networking, I remember I was the most excited when I clicked on the Xcode icon and it started to bounce. Because in those moments, I knew, I would soon be coding again.","source":"_posts/finding-purpose-bouncing-icon-clarified-mine.md","raw":"---\ntitle: Finding Your Purpose - How A Bouncing Icon Clarified Mine\ntags:\n  - business\n  - career\nid: 4\ncategories:\n  - Uncategorized\ndate: 2013-05-27 12:38:25\n---\n\nFinding your purpose is hard. A failed business took a lot out of me, but it gave me much more strength in clarifying my life's purpose.\n\n<!--more-->\n\n> \"Your purpose in life is to find your purpose and give your whole heart and soul to it.\"\n\n― Gautama Buddha\n\nAfter pouring a lot of time, effort and money into a business called SalesCase, I recently decided to stop the project.\n\nIn the beginning, it seemed all too simple to build and sell. However, after almost a year of research, planning, developing, marketing, networking, etc., it seemed like I was still only half way there before getting an MVP to market! How could this be? It was supposed to a simple software.\n\nI know it sounds bad, and its hard to accept. But I learned a lot about software development and starting a software business. But more importantly, I made great strides in finding my purpose.\n\nWhen I look back on all of the work I did for SalesCase, research, planning, wireframing, marketing and networking, I remember I was the most excited when I clicked on the Xcode icon and it started to bounce. Because in those moments, I knew, I would soon be coding again.","slug":"finding-purpose-bouncing-icon-clarified-mine","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswj000c3fysp0pubulm","content":"<p>Finding your purpose is hard. A failed business took a lot out of me, but it gave me much more strength in clarifying my life’s purpose.</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>“Your purpose in life is to find your purpose and give your whole heart and soul to it.”</p>\n</blockquote>\n<p>― Gautama Buddha</p>\n<p>After pouring a lot of time, effort and money into a business called SalesCase, I recently decided to stop the project.</p>\n<p>In the beginning, it seemed all too simple to build and sell. However, after almost a year of research, planning, developing, marketing, networking, etc., it seemed like I was still only half way there before getting an MVP to market! How could this be? It was supposed to a simple software.</p>\n<p>I know it sounds bad, and its hard to accept. But I learned a lot about software development and starting a software business. But more importantly, I made great strides in finding my purpose.</p>\n<p>When I look back on all of the work I did for SalesCase, research, planning, wireframing, marketing and networking, I remember I was the most excited when I clicked on the Xcode icon and it started to bounce. Because in those moments, I knew, I would soon be coding again.</p>\n","excerpt":"<p>Finding your purpose is hard. A failed business took a lot out of me, but it gave me much more strength in clarifying my life’s purpose.</p>","more":"<blockquote>\n<p>“Your purpose in life is to find your purpose and give your whole heart and soul to it.”</p>\n</blockquote>\n<p>― Gautama Buddha</p>\n<p>After pouring a lot of time, effort and money into a business called SalesCase, I recently decided to stop the project.</p>\n<p>In the beginning, it seemed all too simple to build and sell. However, after almost a year of research, planning, developing, marketing, networking, etc., it seemed like I was still only half way there before getting an MVP to market! How could this be? It was supposed to a simple software.</p>\n<p>I know it sounds bad, and its hard to accept. But I learned a lot about software development and starting a software business. But more importantly, I made great strides in finding my purpose.</p>\n<p>When I look back on all of the work I did for SalesCase, research, planning, wireframing, marketing and networking, I remember I was the most excited when I clicked on the Xcode icon and it started to bounce. Because in those moments, I knew, I would soon be coding again.</p>"},{"title":"Handling web view requests using the Chain of Responsibility pattern","id":"191","date":"2016-01-25T02:57:22.000Z","_content":"\nA real world application of the Chain of Responsibility pattern to help handling web requests inside of an iOS web view.\n\n<!--more-->\n\n[Originally published on my company's site](http://influitive.io/news/2016/01/19/chain-of-responsibility-for-web-requests.html).\n\n## Summary\n\nWe describe the application of the Chain of Responsibility pattern to help with handling web requests inside of an iOS web view. We start with some background and context around the problem, then move to implement the technique to resolve it. The example is done in the Swift language.\n\n## Background\n\nOur iOS native app contains a web view to allow users to interact with a complex web app. In this simplified example, we will have a view controller, `WebViewController`, which has the UIWebView property called `webView`. We assign `webView`'s `WKNavigationDelegate` to `WebViewController`. `WKNavigationDelegate` is used to  handle any HTTP requests `webView` makes.\n\n    import UIKit\n    import WebKit\n\n    class WebViewController: UIViewController, WKNavigationDelegate {\n        var webView: WKWebView!\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            self.setupWebView()\n        }\n\n        func logout() {\n            // code to log out\n        }\n\n        func showAboutView() {\n            // code to show the About view\n        }\n\n        func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n            let path = navigationAction.request.URL!.path\n            if path == \"sign_out\" {\n                // code to handle logging out\n                decisionHandler(.Cancel)\n                return\n            } else if path == \"about\" {\n                // code to show a native About view\n\n                decisionHandler(.Cancel)\n                return\n            }\n\n            decisionHandler(.Allow)\n        }\n\n        private func setupWebView() {\n            self.webView = WKWebView(frame: self.view.frame)\n            self.webView.navigationDelegate = self\n            self.view.addSubview(webView)\n        }\n    }\n    `</pre>\n\n    You can see in the delegate method `webView:decidePolicyForNavigationAction:decisionHandler`, there is some conditional code to handle the request and we either allow the web view to continue processing it, or we stop it.\n\n    ### Problem\n\n    Handling requests in this way poses a problem when there are more then just a couple. As development continues and more cases arise, it's clear we'll need to solve this in a better way. It sounds like the perfect case for the object oriented Chain of Responsibility design pattern.\n\n    ## Chain of Responsibility pattern\n\n    Quickly, the [Chain of Responsibility pattern](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) lets a request pass through multiple \"links\" of a chain. If a link handles the request, we're done and we bail. Otherwise, the request is passed to the next link in the chain.\n\n    ### Implementation\n\n    In our example, we want to process each HTTP request by sending it through a chain of potential handlers. And once a handler handles the request (like showing the native About view) we clearly don't want or need the other handlers to do anything. We handled it, so stop processing the request. Lets start backwards by figuring out what we want our delegate method to look like:\n\n    #### Client code\n\n    <pre>`func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n        let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n        if handled {\n            decisionHandler(.Cancel)\n        } else {\n            decisionHandler(.Allow)\n        }\n    }\n    `</pre>\n\n    A couple of things to note here. We've introduced the chain object, `requestChain`, which has the `handle` method. We'll get into this object in a bit, but for now, notice we simply check to see if the chain handled the request or not. More precisely, if any of the handlers (links), that make up the chain, handled the request. If so, stop `webView` from handling the request.\n\n    #### Chain code\n\n    To implement the chain, we need three components:\n    1\\. The link protocol (also known as an interface in other languages, like Java).\n    2\\. The concrete link classes.\n    3\\. The chain class, which holds the links.\n\n    ##### Links\n\n    <pre>`protocol RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool\n    }\n    `</pre>\n\n    Each handler in our chain will take a request, and possibly handle it. And it returns a Bool to indicate if it handled it or not. If you're wondering why we're passing the `controller` argument, it's because in this contrived example, we'll call methods on `controller` to handle requests. In general, you may want to pass in different objects, or a closure instead.\n\n    Lets look at an example of a concrete class:\n\n    <pre>`class logoutHandler: RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            if request.URL!.path == \"logout\" {\n                controller.logout()\n                return true\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    The class implements the protocol's `handle` method, by inspecting the request and conditionally handling it. All concrete `RequestHandler` classes would behave in this similar way. Here's another:\n\n    <pre>`class AboutHandler: RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            if request.URL!.path == \"about\" {\n                controller.showAboutView()\n                return true\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    ##### Chain\n\n    Now that we know what our links look like, lets put them together in our chain class, `RequestChain`.\n\n    <pre>`class RequestChain {\n        var handlers: [RequestHandler]!\n\n        init(handlers: [RequestHandler]) {\n            self.handlers = handlers\n        }\n\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            for handler in self.handlers {\n                let handled = handler.handle(request: request, controller: controller)\n                if handled {\n                    return true\n                }\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    We initialize our `RequestChain` with an array of `RequestHandlers` so we can loop over them when we want to process a request. Obviously, this is a very basic implementation and we could make this more sophisticated with guards, ability to add and remove handlers, etc. Also, you may notice that the `handle` method signature, is exactly the same as the `RequestHandler` protocol's. This is a natural thing to do, but it doesn't have to be this way, depending on your preference and scenario. In the `handle` method, we traverse chain of links and return once one of them handles the request.\n\n    #### Client code revised\n\n    Now that we have our chain setup, we simply need to instantiate and hook everything up. Here's the final version of our `WebViewController`:\n\n    <pre>`class WebViewController: UIViewController, WKNavigationDelegate {\n        var webView: WKWebView!\n        var requestChain: RequestChain!\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            self.setupWebView()\n            self.setupRequestChain()\n        }\n\n        func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n            let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n            if handled {\n                decisionHandler(.Cancel)\n            } else {\n                decisionHandler(.Allow)\n            }\n        }\n\n        func logout() {\n            // code to log out\n        }\n\n        func showAboutView() {\n            // code to show the About view\n        }\n\n        private func setupWebView() {\n            self.webView = WKWebView(frame: self.view.frame)\n            self.webView.navigationDelegate = self\n            self.view.addSubview(webView)\n        }\n\n        private func setupRequestChain() {\n            let handlers: [RequestHandler] = [LogoutHandler(), AboutHandler()]\n            self.requestChain = RequestChain(handlers: handlers)\n        }\n    }\n\n## Conclusion\n\nThe Chain of Responsibility pattern provides a clean, extendable way to handle HTTP requests from a web view. Need to handle requests in more ways?  No problem, just create new concrete `RequestHandler` classes, and add them into the chain. Our code is now [open for extension, and closed for modification](https://en.wikipedia.org/wiki/Open/closed_principle).","source":"_posts/handling-web-view-requests-using-the-chain-of-responsibility-pattern.md","raw":"---\ntitle: Handling web view requests using the Chain of Responsibility pattern\ntags:\n  - coding\n  - design patterns\nid: 191\ncategories:\n  - Uncategorized\ndate: 2016-01-24 21:57:22\n---\n\nA real world application of the Chain of Responsibility pattern to help handling web requests inside of an iOS web view.\n\n<!--more-->\n\n[Originally published on my company's site](http://influitive.io/news/2016/01/19/chain-of-responsibility-for-web-requests.html).\n\n## Summary\n\nWe describe the application of the Chain of Responsibility pattern to help with handling web requests inside of an iOS web view. We start with some background and context around the problem, then move to implement the technique to resolve it. The example is done in the Swift language.\n\n## Background\n\nOur iOS native app contains a web view to allow users to interact with a complex web app. In this simplified example, we will have a view controller, `WebViewController`, which has the UIWebView property called `webView`. We assign `webView`'s `WKNavigationDelegate` to `WebViewController`. `WKNavigationDelegate` is used to  handle any HTTP requests `webView` makes.\n\n    import UIKit\n    import WebKit\n\n    class WebViewController: UIViewController, WKNavigationDelegate {\n        var webView: WKWebView!\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            self.setupWebView()\n        }\n\n        func logout() {\n            // code to log out\n        }\n\n        func showAboutView() {\n            // code to show the About view\n        }\n\n        func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n            let path = navigationAction.request.URL!.path\n            if path == \"sign_out\" {\n                // code to handle logging out\n                decisionHandler(.Cancel)\n                return\n            } else if path == \"about\" {\n                // code to show a native About view\n\n                decisionHandler(.Cancel)\n                return\n            }\n\n            decisionHandler(.Allow)\n        }\n\n        private func setupWebView() {\n            self.webView = WKWebView(frame: self.view.frame)\n            self.webView.navigationDelegate = self\n            self.view.addSubview(webView)\n        }\n    }\n    `</pre>\n\n    You can see in the delegate method `webView:decidePolicyForNavigationAction:decisionHandler`, there is some conditional code to handle the request and we either allow the web view to continue processing it, or we stop it.\n\n    ### Problem\n\n    Handling requests in this way poses a problem when there are more then just a couple. As development continues and more cases arise, it's clear we'll need to solve this in a better way. It sounds like the perfect case for the object oriented Chain of Responsibility design pattern.\n\n    ## Chain of Responsibility pattern\n\n    Quickly, the [Chain of Responsibility pattern](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) lets a request pass through multiple \"links\" of a chain. If a link handles the request, we're done and we bail. Otherwise, the request is passed to the next link in the chain.\n\n    ### Implementation\n\n    In our example, we want to process each HTTP request by sending it through a chain of potential handlers. And once a handler handles the request (like showing the native About view) we clearly don't want or need the other handlers to do anything. We handled it, so stop processing the request. Lets start backwards by figuring out what we want our delegate method to look like:\n\n    #### Client code\n\n    <pre>`func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n        let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n        if handled {\n            decisionHandler(.Cancel)\n        } else {\n            decisionHandler(.Allow)\n        }\n    }\n    `</pre>\n\n    A couple of things to note here. We've introduced the chain object, `requestChain`, which has the `handle` method. We'll get into this object in a bit, but for now, notice we simply check to see if the chain handled the request or not. More precisely, if any of the handlers (links), that make up the chain, handled the request. If so, stop `webView` from handling the request.\n\n    #### Chain code\n\n    To implement the chain, we need three components:\n    1\\. The link protocol (also known as an interface in other languages, like Java).\n    2\\. The concrete link classes.\n    3\\. The chain class, which holds the links.\n\n    ##### Links\n\n    <pre>`protocol RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool\n    }\n    `</pre>\n\n    Each handler in our chain will take a request, and possibly handle it. And it returns a Bool to indicate if it handled it or not. If you're wondering why we're passing the `controller` argument, it's because in this contrived example, we'll call methods on `controller` to handle requests. In general, you may want to pass in different objects, or a closure instead.\n\n    Lets look at an example of a concrete class:\n\n    <pre>`class logoutHandler: RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            if request.URL!.path == \"logout\" {\n                controller.logout()\n                return true\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    The class implements the protocol's `handle` method, by inspecting the request and conditionally handling it. All concrete `RequestHandler` classes would behave in this similar way. Here's another:\n\n    <pre>`class AboutHandler: RequestHandler {\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            if request.URL!.path == \"about\" {\n                controller.showAboutView()\n                return true\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    ##### Chain\n\n    Now that we know what our links look like, lets put them together in our chain class, `RequestChain`.\n\n    <pre>`class RequestChain {\n        var handlers: [RequestHandler]!\n\n        init(handlers: [RequestHandler]) {\n            self.handlers = handlers\n        }\n\n        func handle(request request: NSURLRequest, controller: WebViewController) -&gt; Bool {\n            for handler in self.handlers {\n                let handled = handler.handle(request: request, controller: controller)\n                if handled {\n                    return true\n                }\n            }\n\n            return false\n        }\n    }\n    `</pre>\n\n    We initialize our `RequestChain` with an array of `RequestHandlers` so we can loop over them when we want to process a request. Obviously, this is a very basic implementation and we could make this more sophisticated with guards, ability to add and remove handlers, etc. Also, you may notice that the `handle` method signature, is exactly the same as the `RequestHandler` protocol's. This is a natural thing to do, but it doesn't have to be this way, depending on your preference and scenario. In the `handle` method, we traverse chain of links and return once one of them handles the request.\n\n    #### Client code revised\n\n    Now that we have our chain setup, we simply need to instantiate and hook everything up. Here's the final version of our `WebViewController`:\n\n    <pre>`class WebViewController: UIViewController, WKNavigationDelegate {\n        var webView: WKWebView!\n        var requestChain: RequestChain!\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            self.setupWebView()\n            self.setupRequestChain()\n        }\n\n        func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&gt; Void) {\n            let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n            if handled {\n                decisionHandler(.Cancel)\n            } else {\n                decisionHandler(.Allow)\n            }\n        }\n\n        func logout() {\n            // code to log out\n        }\n\n        func showAboutView() {\n            // code to show the About view\n        }\n\n        private func setupWebView() {\n            self.webView = WKWebView(frame: self.view.frame)\n            self.webView.navigationDelegate = self\n            self.view.addSubview(webView)\n        }\n\n        private func setupRequestChain() {\n            let handlers: [RequestHandler] = [LogoutHandler(), AboutHandler()]\n            self.requestChain = RequestChain(handlers: handlers)\n        }\n    }\n\n## Conclusion\n\nThe Chain of Responsibility pattern provides a clean, extendable way to handle HTTP requests from a web view. Need to handle requests in more ways?  No problem, just create new concrete `RequestHandler` classes, and add them into the chain. Our code is now [open for extension, and closed for modification](https://en.wikipedia.org/wiki/Open/closed_principle).","slug":"handling-web-view-requests-using-the-chain-of-responsibility-pattern","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswn000g3fysjfgoy5j7","content":"<p>A real world application of the Chain of Responsibility pattern to help handling web requests inside of an iOS web view.</p>\n<a id=\"more\"></a>\n<p><a href=\"http://influitive.io/news/2016/01/19/chain-of-responsibility-for-web-requests.html\" target=\"_blank\" rel=\"external\">Originally published on my company’s site</a>.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We describe the application of the Chain of Responsibility pattern to help with handling web requests inside of an iOS web view. We start with some background and context around the problem, then move to implement the technique to resolve it. The example is done in the Swift language.</p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Our iOS native app contains a web view to allow users to interact with a complex web app. In this simplified example, we will have a view controller, <code>WebViewController</code>, which has the UIWebView property called <code>webView</code>. We assign <code>webView</code>‘s <code>WKNavigationDelegate</code> to <code>WebViewController</code>. <code>WKNavigationDelegate</code> is used to  handle any HTTP requests <code>webView</code> makes.</p>\n<pre><code>import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController, WKNavigationDelegate {\n    var webView: WKWebView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.setupWebView()\n    }\n\n    func logout() {\n        // code to log out\n    }\n\n    func showAboutView() {\n        // code to show the About view\n    }\n\n    func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n        let path = navigationAction.request.URL!.path\n        if path == &quot;sign_out&quot; {\n            // code to handle logging out\n            decisionHandler(.Cancel)\n            return\n        } else if path == &quot;about&quot; {\n            // code to show a native About view\n\n            decisionHandler(.Cancel)\n            return\n        }\n\n        decisionHandler(.Allow)\n    }\n\n    private func setupWebView() {\n        self.webView = WKWebView(frame: self.view.frame)\n        self.webView.navigationDelegate = self\n        self.view.addSubview(webView)\n    }\n}\n`&lt;/pre&gt;\n\nYou can see in the delegate method `webView:decidePolicyForNavigationAction:decisionHandler`, there is some conditional code to handle the request and we either allow the web view to continue processing it, or we stop it.\n\n### Problem\n\nHandling requests in this way poses a problem when there are more then just a couple. As development continues and more cases arise, it&apos;s clear we&apos;ll need to solve this in a better way. It sounds like the perfect case for the object oriented Chain of Responsibility design pattern.\n\n## Chain of Responsibility pattern\n\nQuickly, the [Chain of Responsibility pattern](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) lets a request pass through multiple &quot;links&quot; of a chain. If a link handles the request, we&apos;re done and we bail. Otherwise, the request is passed to the next link in the chain.\n\n### Implementation\n\nIn our example, we want to process each HTTP request by sending it through a chain of potential handlers. And once a handler handles the request (like showing the native About view) we clearly don&apos;t want or need the other handlers to do anything. We handled it, so stop processing the request. Lets start backwards by figuring out what we want our delegate method to look like:\n\n#### Client code\n\n&lt;pre&gt;`func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n    let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n    if handled {\n        decisionHandler(.Cancel)\n    } else {\n        decisionHandler(.Allow)\n    }\n}\n`&lt;/pre&gt;\n\nA couple of things to note here. We&apos;ve introduced the chain object, `requestChain`, which has the `handle` method. We&apos;ll get into this object in a bit, but for now, notice we simply check to see if the chain handled the request or not. More precisely, if any of the handlers (links), that make up the chain, handled the request. If so, stop `webView` from handling the request.\n\n#### Chain code\n\nTo implement the chain, we need three components:\n1\\. The link protocol (also known as an interface in other languages, like Java).\n2\\. The concrete link classes.\n3\\. The chain class, which holds the links.\n\n##### Links\n\n&lt;pre&gt;`protocol RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool\n}\n`&lt;/pre&gt;\n\nEach handler in our chain will take a request, and possibly handle it. And it returns a Bool to indicate if it handled it or not. If you&apos;re wondering why we&apos;re passing the `controller` argument, it&apos;s because in this contrived example, we&apos;ll call methods on `controller` to handle requests. In general, you may want to pass in different objects, or a closure instead.\n\nLets look at an example of a concrete class:\n\n&lt;pre&gt;`class logoutHandler: RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        if request.URL!.path == &quot;logout&quot; {\n            controller.logout()\n            return true\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\nThe class implements the protocol&apos;s `handle` method, by inspecting the request and conditionally handling it. All concrete `RequestHandler` classes would behave in this similar way. Here&apos;s another:\n\n&lt;pre&gt;`class AboutHandler: RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        if request.URL!.path == &quot;about&quot; {\n            controller.showAboutView()\n            return true\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\n##### Chain\n\nNow that we know what our links look like, lets put them together in our chain class, `RequestChain`.\n\n&lt;pre&gt;`class RequestChain {\n    var handlers: [RequestHandler]!\n\n    init(handlers: [RequestHandler]) {\n        self.handlers = handlers\n    }\n\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        for handler in self.handlers {\n            let handled = handler.handle(request: request, controller: controller)\n            if handled {\n                return true\n            }\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\nWe initialize our `RequestChain` with an array of `RequestHandlers` so we can loop over them when we want to process a request. Obviously, this is a very basic implementation and we could make this more sophisticated with guards, ability to add and remove handlers, etc. Also, you may notice that the `handle` method signature, is exactly the same as the `RequestHandler` protocol&apos;s. This is a natural thing to do, but it doesn&apos;t have to be this way, depending on your preference and scenario. In the `handle` method, we traverse chain of links and return once one of them handles the request.\n\n#### Client code revised\n\nNow that we have our chain setup, we simply need to instantiate and hook everything up. Here&apos;s the final version of our `WebViewController`:\n\n&lt;pre&gt;`class WebViewController: UIViewController, WKNavigationDelegate {\n    var webView: WKWebView!\n    var requestChain: RequestChain!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.setupWebView()\n        self.setupRequestChain()\n    }\n\n    func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n        let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n        if handled {\n            decisionHandler(.Cancel)\n        } else {\n            decisionHandler(.Allow)\n        }\n    }\n\n    func logout() {\n        // code to log out\n    }\n\n    func showAboutView() {\n        // code to show the About view\n    }\n\n    private func setupWebView() {\n        self.webView = WKWebView(frame: self.view.frame)\n        self.webView.navigationDelegate = self\n        self.view.addSubview(webView)\n    }\n\n    private func setupRequestChain() {\n        let handlers: [RequestHandler] = [LogoutHandler(), AboutHandler()]\n        self.requestChain = RequestChain(handlers: handlers)\n    }\n}\n</code></pre><h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The Chain of Responsibility pattern provides a clean, extendable way to handle HTTP requests from a web view. Need to handle requests in more ways?  No problem, just create new concrete <code>RequestHandler</code> classes, and add them into the chain. Our code is now <a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\" target=\"_blank\" rel=\"external\">open for extension, and closed for modification</a>.</p>\n","excerpt":"<p>A real world application of the Chain of Responsibility pattern to help handling web requests inside of an iOS web view.</p>","more":"<p><a href=\"http://influitive.io/news/2016/01/19/chain-of-responsibility-for-web-requests.html\">Originally published on my company’s site</a>.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We describe the application of the Chain of Responsibility pattern to help with handling web requests inside of an iOS web view. We start with some background and context around the problem, then move to implement the technique to resolve it. The example is done in the Swift language.</p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Our iOS native app contains a web view to allow users to interact with a complex web app. In this simplified example, we will have a view controller, <code>WebViewController</code>, which has the UIWebView property called <code>webView</code>. We assign <code>webView</code>‘s <code>WKNavigationDelegate</code> to <code>WebViewController</code>. <code>WKNavigationDelegate</code> is used to  handle any HTTP requests <code>webView</code> makes.</p>\n<pre><code>import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController, WKNavigationDelegate {\n    var webView: WKWebView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.setupWebView()\n    }\n\n    func logout() {\n        // code to log out\n    }\n\n    func showAboutView() {\n        // code to show the About view\n    }\n\n    func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n        let path = navigationAction.request.URL!.path\n        if path == &quot;sign_out&quot; {\n            // code to handle logging out\n            decisionHandler(.Cancel)\n            return\n        } else if path == &quot;about&quot; {\n            // code to show a native About view\n\n            decisionHandler(.Cancel)\n            return\n        }\n\n        decisionHandler(.Allow)\n    }\n\n    private func setupWebView() {\n        self.webView = WKWebView(frame: self.view.frame)\n        self.webView.navigationDelegate = self\n        self.view.addSubview(webView)\n    }\n}\n`&lt;/pre&gt;\n\nYou can see in the delegate method `webView:decidePolicyForNavigationAction:decisionHandler`, there is some conditional code to handle the request and we either allow the web view to continue processing it, or we stop it.\n\n### Problem\n\nHandling requests in this way poses a problem when there are more then just a couple. As development continues and more cases arise, it&apos;s clear we&apos;ll need to solve this in a better way. It sounds like the perfect case for the object oriented Chain of Responsibility design pattern.\n\n## Chain of Responsibility pattern\n\nQuickly, the [Chain of Responsibility pattern](https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern) lets a request pass through multiple &quot;links&quot; of a chain. If a link handles the request, we&apos;re done and we bail. Otherwise, the request is passed to the next link in the chain.\n\n### Implementation\n\nIn our example, we want to process each HTTP request by sending it through a chain of potential handlers. And once a handler handles the request (like showing the native About view) we clearly don&apos;t want or need the other handlers to do anything. We handled it, so stop processing the request. Lets start backwards by figuring out what we want our delegate method to look like:\n\n#### Client code\n\n&lt;pre&gt;`func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n    let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n    if handled {\n        decisionHandler(.Cancel)\n    } else {\n        decisionHandler(.Allow)\n    }\n}\n`&lt;/pre&gt;\n\nA couple of things to note here. We&apos;ve introduced the chain object, `requestChain`, which has the `handle` method. We&apos;ll get into this object in a bit, but for now, notice we simply check to see if the chain handled the request or not. More precisely, if any of the handlers (links), that make up the chain, handled the request. If so, stop `webView` from handling the request.\n\n#### Chain code\n\nTo implement the chain, we need three components:\n1\\. The link protocol (also known as an interface in other languages, like Java).\n2\\. The concrete link classes.\n3\\. The chain class, which holds the links.\n\n##### Links\n\n&lt;pre&gt;`protocol RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool\n}\n`&lt;/pre&gt;\n\nEach handler in our chain will take a request, and possibly handle it. And it returns a Bool to indicate if it handled it or not. If you&apos;re wondering why we&apos;re passing the `controller` argument, it&apos;s because in this contrived example, we&apos;ll call methods on `controller` to handle requests. In general, you may want to pass in different objects, or a closure instead.\n\nLets look at an example of a concrete class:\n\n&lt;pre&gt;`class logoutHandler: RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        if request.URL!.path == &quot;logout&quot; {\n            controller.logout()\n            return true\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\nThe class implements the protocol&apos;s `handle` method, by inspecting the request and conditionally handling it. All concrete `RequestHandler` classes would behave in this similar way. Here&apos;s another:\n\n&lt;pre&gt;`class AboutHandler: RequestHandler {\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        if request.URL!.path == &quot;about&quot; {\n            controller.showAboutView()\n            return true\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\n##### Chain\n\nNow that we know what our links look like, lets put them together in our chain class, `RequestChain`.\n\n&lt;pre&gt;`class RequestChain {\n    var handlers: [RequestHandler]!\n\n    init(handlers: [RequestHandler]) {\n        self.handlers = handlers\n    }\n\n    func handle(request request: NSURLRequest, controller: WebViewController) -&amp;gt; Bool {\n        for handler in self.handlers {\n            let handled = handler.handle(request: request, controller: controller)\n            if handled {\n                return true\n            }\n        }\n\n        return false\n    }\n}\n`&lt;/pre&gt;\n\nWe initialize our `RequestChain` with an array of `RequestHandlers` so we can loop over them when we want to process a request. Obviously, this is a very basic implementation and we could make this more sophisticated with guards, ability to add and remove handlers, etc. Also, you may notice that the `handle` method signature, is exactly the same as the `RequestHandler` protocol&apos;s. This is a natural thing to do, but it doesn&apos;t have to be this way, depending on your preference and scenario. In the `handle` method, we traverse chain of links and return once one of them handles the request.\n\n#### Client code revised\n\nNow that we have our chain setup, we simply need to instantiate and hook everything up. Here&apos;s the final version of our `WebViewController`:\n\n&lt;pre&gt;`class WebViewController: UIViewController, WKNavigationDelegate {\n    var webView: WKWebView!\n    var requestChain: RequestChain!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.setupWebView()\n        self.setupRequestChain()\n    }\n\n    func webView(webView: WKWebView, decidePolicyForNavigationAction navigationAction: WKNavigationAction, decisionHandler: (WKNavigationActionPolicy) -&amp;gt; Void) {\n        let handled = self.requestChain.handle(request: navigationAction.request, controller: self)\n        if handled {\n            decisionHandler(.Cancel)\n        } else {\n            decisionHandler(.Allow)\n        }\n    }\n\n    func logout() {\n        // code to log out\n    }\n\n    func showAboutView() {\n        // code to show the About view\n    }\n\n    private func setupWebView() {\n        self.webView = WKWebView(frame: self.view.frame)\n        self.webView.navigationDelegate = self\n        self.view.addSubview(webView)\n    }\n\n    private func setupRequestChain() {\n        let handlers: [RequestHandler] = [LogoutHandler(), AboutHandler()]\n        self.requestChain = RequestChain(handlers: handlers)\n    }\n}\n</code></pre><h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The Chain of Responsibility pattern provides a clean, extendable way to handle HTTP requests from a web view. Need to handle requests in more ways?  No problem, just create new concrete <code>RequestHandler</code> classes, and add them into the chain. Our code is now <a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\">open for extension, and closed for modification</a>.</p>"},{"title":"How to Sell Without Selling","id":"25","date":"2013-06-21T01:03:04.000Z","_content":"\n![](http://imgur.com/OviwrfZ.jpg)\n\nDon't be this guy! I've been noticing that there's a far more effective way to influence potential buyers. In this short post, I explain how you can sell without explicitly selling.\n\n<!--more-->\n\nI just came back from a networking event put on by a really great grass-roots tech community. And it was hosted by a massively huge software and technology company. The ones who changed our lives in '95\\. I was really looking forward to it thinking I'd learn a lot. But aside from the before and after networking, it was largely a waste of time.\n\nWhy? Almost every speaker was from this big tech company or another big company, and they were all explicitly selling. There were boring. The only one who wasn't boring was a last-minute fill in, a business owner, who told us real stories about his business adventures. Who the heck still actually sells in this day and age?\n\nIf I want to purchase something, there is endless information from real people who don't have anything to gain from sharing their knowledge about almost every product/service on the planet. Why would want to listen to a subjective pitch?\n\nIf you want to sell something then **stop selling and start educating**. People who educate provide instant value, they build trust, and demonstrate skill, knowledge and experience. And by the way, they also offer a product or service? What the heck? Well, what do they sell?\n\n![](http://i.imgur.com/GN9Yphs.png)\n\nNot only am I reading their marketing material, I'm doing it voluntarily. I'm sure this is old news for everyone, but I was really surprised to see speakers from such big companies doing old-school sales pitches up there to mostly a younger, tech, and startup oriented crowd. I guess old habits die hard...","source":"_posts/how-to-sell-without-selling.md","raw":"---\ntitle: How to Sell Without Selling\ntags:\n  - business\nid: 25\ncategories:\n  - Uncategorized\ndate: 2013-06-20 21:03:04\n---\n\n![](http://imgur.com/OviwrfZ.jpg)\n\nDon't be this guy! I've been noticing that there's a far more effective way to influence potential buyers. In this short post, I explain how you can sell without explicitly selling.\n\n<!--more-->\n\nI just came back from a networking event put on by a really great grass-roots tech community. And it was hosted by a massively huge software and technology company. The ones who changed our lives in '95\\. I was really looking forward to it thinking I'd learn a lot. But aside from the before and after networking, it was largely a waste of time.\n\nWhy? Almost every speaker was from this big tech company or another big company, and they were all explicitly selling. There were boring. The only one who wasn't boring was a last-minute fill in, a business owner, who told us real stories about his business adventures. Who the heck still actually sells in this day and age?\n\nIf I want to purchase something, there is endless information from real people who don't have anything to gain from sharing their knowledge about almost every product/service on the planet. Why would want to listen to a subjective pitch?\n\nIf you want to sell something then **stop selling and start educating**. People who educate provide instant value, they build trust, and demonstrate skill, knowledge and experience. And by the way, they also offer a product or service? What the heck? Well, what do they sell?\n\n![](http://i.imgur.com/GN9Yphs.png)\n\nNot only am I reading their marketing material, I'm doing it voluntarily. I'm sure this is old news for everyone, but I was really surprised to see speakers from such big companies doing old-school sales pitches up there to mostly a younger, tech, and startup oriented crowd. I guess old habits die hard...","slug":"how-to-sell-without-selling","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswp000i3fysp3tq7h2m","content":"<p><img src=\"http://imgur.com/OviwrfZ.jpg\" alt=\"\"></p>\n<p>Don’t be this guy! I’ve been noticing that there’s a far more effective way to influence potential buyers. In this short post, I explain how you can sell without explicitly selling.</p>\n<a id=\"more\"></a>\n<p>I just came back from a networking event put on by a really great grass-roots tech community. And it was hosted by a massively huge software and technology company. The ones who changed our lives in ‘95. I was really looking forward to it thinking I’d learn a lot. But aside from the before and after networking, it was largely a waste of time.</p>\n<p>Why? Almost every speaker was from this big tech company or another big company, and they were all explicitly selling. There were boring. The only one who wasn’t boring was a last-minute fill in, a business owner, who told us real stories about his business adventures. Who the heck still actually sells in this day and age?</p>\n<p>If I want to purchase something, there is endless information from real people who don’t have anything to gain from sharing their knowledge about almost every product/service on the planet. Why would want to listen to a subjective pitch?</p>\n<p>If you want to sell something then <strong>stop selling and start educating</strong>. People who educate provide instant value, they build trust, and demonstrate skill, knowledge and experience. And by the way, they also offer a product or service? What the heck? Well, what do they sell?</p>\n<p><img src=\"http://i.imgur.com/GN9Yphs.png\" alt=\"\"></p>\n<p>Not only am I reading their marketing material, I’m doing it voluntarily. I’m sure this is old news for everyone, but I was really surprised to see speakers from such big companies doing old-school sales pitches up there to mostly a younger, tech, and startup oriented crowd. I guess old habits die hard…</p>\n","excerpt":"<p><img src=\"http://imgur.com/OviwrfZ.jpg\" alt=\"\"></p>\n<p>Don’t be this guy! I’ve been noticing that there’s a far more effective way to influence potential buyers. In this short post, I explain how you can sell without explicitly selling.</p>","more":"<p>I just came back from a networking event put on by a really great grass-roots tech community. And it was hosted by a massively huge software and technology company. The ones who changed our lives in ‘95. I was really looking forward to it thinking I’d learn a lot. But aside from the before and after networking, it was largely a waste of time.</p>\n<p>Why? Almost every speaker was from this big tech company or another big company, and they were all explicitly selling. There were boring. The only one who wasn’t boring was a last-minute fill in, a business owner, who told us real stories about his business adventures. Who the heck still actually sells in this day and age?</p>\n<p>If I want to purchase something, there is endless information from real people who don’t have anything to gain from sharing their knowledge about almost every product/service on the planet. Why would want to listen to a subjective pitch?</p>\n<p>If you want to sell something then <strong>stop selling and start educating</strong>. People who educate provide instant value, they build trust, and demonstrate skill, knowledge and experience. And by the way, they also offer a product or service? What the heck? Well, what do they sell?</p>\n<p><img src=\"http://i.imgur.com/GN9Yphs.png\" alt=\"\"></p>\n<p>Not only am I reading their marketing material, I’m doing it voluntarily. I’m sure this is old news for everyone, but I was really surprised to see speakers from such big companies doing old-school sales pitches up there to mostly a younger, tech, and startup oriented crowd. I guess old habits die hard…</p>"},{"title":"How to speed up modal animations in iOS","id":"104","date":"2015-01-29T02:26:20.000Z","_content":"\nApple doesn't provide an easy way to speed up the animations for presenting modals. In this post, I describe a straightforward way to do this using the `UIViewControllerAnimatedTransitioning` and `UIViewControllerAnimatedTransitioningDelegate` protocols.\n\n<!--more-->\n\n## Problem\n\nRecently, for an iOS project I was working on, I needed to speed up the modal animation and alter its duration curve to match a different custom animation somewhere else in the app. Unfortunately, the built-in modal segue or `presentViewController:animated:completion:` doesn't provide any opportunity to modify the animation.\n\nMy first thought was to get my custom animation to match Apple's built-in modal animation behaviour. But how? It's not published anywhere. I could brute force match it by trial and error, but then app would have a dependency on Apple. If Apple were to change their stock animation in the future, I'd run into the same problem.\n\n## Solution\n\nIt was clear that I needed to build my own modal animation so I could have full control without any dependencies. The solution uses the iOS 7+ custom animation protocols: `UIViewControllerAnimatedTransitioning` and `UIViewControllerAnimatedTransitioningDelegate`. There's plenty of literature about how they work. If you're interested in digging in, here is a good point: [objc.io - View Controller Transitions](http://www.objc.io/issue-5/view-controller-transitions.html). At the bottom of that article, there are more links, including reference to the WWDC video.\n\n### Example\n\nFrom a birds eye, here is how things work:\n\n*   From the presenting view controller, initialize and configure the animator.\n*   Configure the modal and present/dismiss it with animation set to `YES`. If you don't turn the animation on, the animator will not be used.*   Provide the animator to the `UIViewControllerTransitioningDelegate` delegate methods.\n*   In the animator, configure and animate your views.\n\n#### Code\n\nHere is some code that illustrates how to do this. Note that I've left out the unrelated bits.\n\n##### Presenting View Controller\n\n    // PresentingViewController.m\n\n    #import \"ModalAnimator.h\"\n\n    @interface PresentingViewController () &lt;UIViewControllerTransitioningDelegate&gt;\n    @property (strong, nonatomic) ModalAnimator *modalAnimator;\n    @end\n\n    @implementation PresentingViewController\n\n    - (void)viewDidLoad {\n        [super viewDidLoad];\n        self.modalAnimator = [ModalAnimator new];\n    }\n\n    // Storyboard \"Present Modally\" seque with \"Animates\" turned on.\n    - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n        UIViewController *viewController = segue.destinationViewController;    \n        viewController.modalPresentationStyle = UIModalPresentationCustom;\n        viewController.transitioningDelegate = self;\n    }\n\n    #pragma mark - UIViewControllerTransitioningDelegate methods\n    - (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n        [self.modalAnimator shouldPresent];\n        return self.modalAnimator;\n    }\n\n    - (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed {\n        [self.modalAnimator shouldDismiss];\n        return self.modalAnimator;\n    }\n\n    @end\n    `</pre>\n\n    Here you can see the general flow. In this example, a storyboard segue is used to present the modal. Here is how the segue is configured in the storyboard:\n\n    ![modal segue settings](http://i.imgur.com/Gohw9gX.png)\n\n    Alternatively, it could have been presented in code like so:\n\n    <pre>`viewController.modalPresentationStyle = UIModalPresentationCustom;\n    viewController.transitioningDelegate = self;\n    [self presentViewController:viewController animated:YES completion:nil];\n    `</pre>\n\n    ##### Custom Animator\n\n    <pre>`// ModalAnimator.h\n\n    @interface ModalAnimator : NSObject &lt;UIViewControllerAnimatedTransitioning&gt;\n    - (void)shouldPresent;\n    - (void)shouldDismiss;\n    @end\n    `</pre>\n\n    The public interface is very simple. Only a couple of configuration setters to let the animator know if we should be using the present or the dismiss animation. As seen above in the `PresentingViewController.m` code, these get called in the `UIViewControllerTransitioningDelegate` methods.\n\n    <pre>`// ModalAnimator.m\n\n    @interface ModalAnimator ()\n    @property (nonatomic) BOOL isPresenting;\n    @end\n\n    @implementation ModalAnimator\n\n    - (instancetype)init {\n        self = [super init];\n        if (self) {\n            self.isPresenting = YES;\n        }\n        return self;\n    }\n\n    - (void)shouldPresent {\n        self.isPresenting = YES;\n    }\n\n    - (void)shouldDismiss {\n        self.isPresenting = NO;\n    }\n\n    #pragma mark - UIViewControllerAnimatedTransitioning methods\n    - (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {\n        return 0.2;\n    }\n\n    - (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {\n        UIViewController *fromVc = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n        UIViewController *toVc = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n        UIView *fromView = fromVc.view;\n        UIView *toView = toVc.view;\n        UIView *containerView = transitionContext.containerView;\n        NSTimeInterval duration = [self transitionDuration:transitionContext];\n\n        if (self.isPresenting) {\n            UIViewController *topFromVc = [self topViewControllerForViewController:fromVc];\n            [topFromVc viewWillDisappear:YES];\n            fromView.userInteractionEnabled = NO;\n            [containerView addSubview:toView];\n\n            // Setup animating the view from the bottom of the screen. \n            CGRect originalFrame = toView.frame;\n            CGRect hiddenFrame = CGRectMake(originalFrame.origin.x, originalFrame.size.height, originalFrame.size.width, originalFrame.size.height);\n            toView.frame = hiddenFrame;\n\n            [UIView animateWithDuration:duration animations: ^{\n                toView.frame = originalFrame;\n            } completion: ^(BOOL finished) {\n                [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                [topFromVc viewDidDisappear:YES];\n            }];\n        } else {\n            UIViewController *topToVc = [self topViewControllerForViewController:toVc];\n            [topToVc viewWillAppear:YES];\n\n            CGRect hiddenFrame = CGRectMake(fromView.frame.origin.x, fromView.frame.size.height, fromView.frame.size.width, fromView.frame.size.height);\n\n            [UIView animateWithDuration:duration animations: ^{\n                fromView.frame = hiddenFrame;\n            } completion: ^(BOOL finished) {\n                [fromView removeFromSuperview];\n                toView.userInteractionEnabled = YES;\n                [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                [topToVc viewDidAppear:YES];\n            }];\n        }\n    }\n\n    #pragma mark - Private methods\n    - (UIViewController *)topViewControllerForViewController:(UIViewController *)viewController {\n        if ([viewController isKindOfClass:[UINavigationController class]]) {\n            UINavigationController *navigationController = (UINavigationController *)viewController;\n            return navigationController.topViewController;\n        } else {\n            return viewController;\n        }\n    }\n\n    @end\n\nThe animator essentially implements two delegate methods which describe the animation and its duration. A couple of things to take note of:\n\n1.  To preserve the way the default modal presentation works, manually call view lifecycle methods.\n\n2.  The private method `topViewControllerForViewController:` is here to ensure that the view life cycle methods are called on the correct view controller.\n\n## Wrap-Up\n\nI ended up using this modal animator in a few places in my app, and now it looks and feels consistent. If this has helped you or have different or better ways to speed up modal animations in iOS, feel free to comment.\n\nHappy exploring!","source":"_posts/how-to-speed-up-modal-animations-in-ios.md","raw":"---\ntitle: How to speed up modal animations in iOS\ntags:\n  - ios\nid: 104\ncategories:\n  - Uncategorized\ndate: 2015-01-28 21:26:20\n---\n\nApple doesn't provide an easy way to speed up the animations for presenting modals. In this post, I describe a straightforward way to do this using the `UIViewControllerAnimatedTransitioning` and `UIViewControllerAnimatedTransitioningDelegate` protocols.\n\n<!--more-->\n\n## Problem\n\nRecently, for an iOS project I was working on, I needed to speed up the modal animation and alter its duration curve to match a different custom animation somewhere else in the app. Unfortunately, the built-in modal segue or `presentViewController:animated:completion:` doesn't provide any opportunity to modify the animation.\n\nMy first thought was to get my custom animation to match Apple's built-in modal animation behaviour. But how? It's not published anywhere. I could brute force match it by trial and error, but then app would have a dependency on Apple. If Apple were to change their stock animation in the future, I'd run into the same problem.\n\n## Solution\n\nIt was clear that I needed to build my own modal animation so I could have full control without any dependencies. The solution uses the iOS 7+ custom animation protocols: `UIViewControllerAnimatedTransitioning` and `UIViewControllerAnimatedTransitioningDelegate`. There's plenty of literature about how they work. If you're interested in digging in, here is a good point: [objc.io - View Controller Transitions](http://www.objc.io/issue-5/view-controller-transitions.html). At the bottom of that article, there are more links, including reference to the WWDC video.\n\n### Example\n\nFrom a birds eye, here is how things work:\n\n*   From the presenting view controller, initialize and configure the animator.\n*   Configure the modal and present/dismiss it with animation set to `YES`. If you don't turn the animation on, the animator will not be used.*   Provide the animator to the `UIViewControllerTransitioningDelegate` delegate methods.\n*   In the animator, configure and animate your views.\n\n#### Code\n\nHere is some code that illustrates how to do this. Note that I've left out the unrelated bits.\n\n##### Presenting View Controller\n\n    // PresentingViewController.m\n\n    #import \"ModalAnimator.h\"\n\n    @interface PresentingViewController () &lt;UIViewControllerTransitioningDelegate&gt;\n    @property (strong, nonatomic) ModalAnimator *modalAnimator;\n    @end\n\n    @implementation PresentingViewController\n\n    - (void)viewDidLoad {\n        [super viewDidLoad];\n        self.modalAnimator = [ModalAnimator new];\n    }\n\n    // Storyboard \"Present Modally\" seque with \"Animates\" turned on.\n    - (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n        UIViewController *viewController = segue.destinationViewController;    \n        viewController.modalPresentationStyle = UIModalPresentationCustom;\n        viewController.transitioningDelegate = self;\n    }\n\n    #pragma mark - UIViewControllerTransitioningDelegate methods\n    - (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n        [self.modalAnimator shouldPresent];\n        return self.modalAnimator;\n    }\n\n    - (id&lt;UIViewControllerAnimatedTransitioning&gt;)animationControllerForDismissedController:(UIViewController *)dismissed {\n        [self.modalAnimator shouldDismiss];\n        return self.modalAnimator;\n    }\n\n    @end\n    `</pre>\n\n    Here you can see the general flow. In this example, a storyboard segue is used to present the modal. Here is how the segue is configured in the storyboard:\n\n    ![modal segue settings](http://i.imgur.com/Gohw9gX.png)\n\n    Alternatively, it could have been presented in code like so:\n\n    <pre>`viewController.modalPresentationStyle = UIModalPresentationCustom;\n    viewController.transitioningDelegate = self;\n    [self presentViewController:viewController animated:YES completion:nil];\n    `</pre>\n\n    ##### Custom Animator\n\n    <pre>`// ModalAnimator.h\n\n    @interface ModalAnimator : NSObject &lt;UIViewControllerAnimatedTransitioning&gt;\n    - (void)shouldPresent;\n    - (void)shouldDismiss;\n    @end\n    `</pre>\n\n    The public interface is very simple. Only a couple of configuration setters to let the animator know if we should be using the present or the dismiss animation. As seen above in the `PresentingViewController.m` code, these get called in the `UIViewControllerTransitioningDelegate` methods.\n\n    <pre>`// ModalAnimator.m\n\n    @interface ModalAnimator ()\n    @property (nonatomic) BOOL isPresenting;\n    @end\n\n    @implementation ModalAnimator\n\n    - (instancetype)init {\n        self = [super init];\n        if (self) {\n            self.isPresenting = YES;\n        }\n        return self;\n    }\n\n    - (void)shouldPresent {\n        self.isPresenting = YES;\n    }\n\n    - (void)shouldDismiss {\n        self.isPresenting = NO;\n    }\n\n    #pragma mark - UIViewControllerAnimatedTransitioning methods\n    - (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {\n        return 0.2;\n    }\n\n    - (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext {\n        UIViewController *fromVc = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n        UIViewController *toVc = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n        UIView *fromView = fromVc.view;\n        UIView *toView = toVc.view;\n        UIView *containerView = transitionContext.containerView;\n        NSTimeInterval duration = [self transitionDuration:transitionContext];\n\n        if (self.isPresenting) {\n            UIViewController *topFromVc = [self topViewControllerForViewController:fromVc];\n            [topFromVc viewWillDisappear:YES];\n            fromView.userInteractionEnabled = NO;\n            [containerView addSubview:toView];\n\n            // Setup animating the view from the bottom of the screen. \n            CGRect originalFrame = toView.frame;\n            CGRect hiddenFrame = CGRectMake(originalFrame.origin.x, originalFrame.size.height, originalFrame.size.width, originalFrame.size.height);\n            toView.frame = hiddenFrame;\n\n            [UIView animateWithDuration:duration animations: ^{\n                toView.frame = originalFrame;\n            } completion: ^(BOOL finished) {\n                [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                [topFromVc viewDidDisappear:YES];\n            }];\n        } else {\n            UIViewController *topToVc = [self topViewControllerForViewController:toVc];\n            [topToVc viewWillAppear:YES];\n\n            CGRect hiddenFrame = CGRectMake(fromView.frame.origin.x, fromView.frame.size.height, fromView.frame.size.width, fromView.frame.size.height);\n\n            [UIView animateWithDuration:duration animations: ^{\n                fromView.frame = hiddenFrame;\n            } completion: ^(BOOL finished) {\n                [fromView removeFromSuperview];\n                toView.userInteractionEnabled = YES;\n                [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n                [topToVc viewDidAppear:YES];\n            }];\n        }\n    }\n\n    #pragma mark - Private methods\n    - (UIViewController *)topViewControllerForViewController:(UIViewController *)viewController {\n        if ([viewController isKindOfClass:[UINavigationController class]]) {\n            UINavigationController *navigationController = (UINavigationController *)viewController;\n            return navigationController.topViewController;\n        } else {\n            return viewController;\n        }\n    }\n\n    @end\n\nThe animator essentially implements two delegate methods which describe the animation and its duration. A couple of things to take note of:\n\n1.  To preserve the way the default modal presentation works, manually call view lifecycle methods.\n\n2.  The private method `topViewControllerForViewController:` is here to ensure that the view life cycle methods are called on the correct view controller.\n\n## Wrap-Up\n\nI ended up using this modal animator in a few places in my app, and now it looks and feels consistent. If this has helped you or have different or better ways to speed up modal animations in iOS, feel free to comment.\n\nHappy exploring!","slug":"how-to-speed-up-modal-animations-in-ios","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswr000l3fysvtqnv9ct","content":"<p>Apple doesn’t provide an easy way to speed up the animations for presenting modals. In this post, I describe a straightforward way to do this using the <code>UIViewControllerAnimatedTransitioning</code> and <code>UIViewControllerAnimatedTransitioningDelegate</code> protocols.</p>\n<a id=\"more\"></a>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>Recently, for an iOS project I was working on, I needed to speed up the modal animation and alter its duration curve to match a different custom animation somewhere else in the app. Unfortunately, the built-in modal segue or <code>presentViewController:animated:completion:</code> doesn’t provide any opportunity to modify the animation.</p>\n<p>My first thought was to get my custom animation to match Apple’s built-in modal animation behaviour. But how? It’s not published anywhere. I could brute force match it by trial and error, but then app would have a dependency on Apple. If Apple were to change their stock animation in the future, I’d run into the same problem.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>It was clear that I needed to build my own modal animation so I could have full control without any dependencies. The solution uses the iOS 7+ custom animation protocols: <code>UIViewControllerAnimatedTransitioning</code> and <code>UIViewControllerAnimatedTransitioningDelegate</code>. There’s plenty of literature about how they work. If you’re interested in digging in, here is a good point: <a href=\"http://www.objc.io/issue-5/view-controller-transitions.html\" target=\"_blank\" rel=\"external\">objc.io - View Controller Transitions</a>. At the bottom of that article, there are more links, including reference to the WWDC video.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>From a birds eye, here is how things work:</p>\n<ul>\n<li>From the presenting view controller, initialize and configure the animator.</li>\n<li>Configure the modal and present/dismiss it with animation set to <code>YES</code>. If you don’t turn the animation on, the animator will not be used.*   Provide the animator to the <code>UIViewControllerTransitioningDelegate</code> delegate methods.</li>\n<li>In the animator, configure and animate your views.</li>\n</ul>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><p>Here is some code that illustrates how to do this. Note that I’ve left out the unrelated bits.</p>\n<h5 id=\"Presenting-View-Controller\"><a href=\"#Presenting-View-Controller\" class=\"headerlink\" title=\"Presenting View Controller\"></a>Presenting View Controller</h5><pre><code>// PresentingViewController.m\n\n#import &quot;ModalAnimator.h&quot;\n\n@interface PresentingViewController () &amp;lt;UIViewControllerTransitioningDelegate&amp;gt;\n@property (strong, nonatomic) ModalAnimator *modalAnimator;\n@end\n\n@implementation PresentingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.modalAnimator = [ModalAnimator new];\n}\n\n// Storyboard &quot;Present Modally&quot; seque with &quot;Animates&quot; turned on.\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    UIViewController *viewController = segue.destinationViewController;    \n    viewController.modalPresentationStyle = UIModalPresentationCustom;\n    viewController.transitioningDelegate = self;\n}\n\n#pragma mark - UIViewControllerTransitioningDelegate methods\n- (id&amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n    [self.modalAnimator shouldPresent];\n    return self.modalAnimator;\n}\n\n- (id&amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;)animationControllerForDismissedController:(UIViewController *)dismissed {\n    [self.modalAnimator shouldDismiss];\n    return self.modalAnimator;\n}\n\n@end\n`&lt;/pre&gt;\n\nHere you can see the general flow. In this example, a storyboard segue is used to present the modal. Here is how the segue is configured in the storyboard:\n\n![modal segue settings](http://i.imgur.com/Gohw9gX.png)\n\nAlternatively, it could have been presented in code like so:\n\n&lt;pre&gt;`viewController.modalPresentationStyle = UIModalPresentationCustom;\nviewController.transitioningDelegate = self;\n[self presentViewController:viewController animated:YES completion:nil];\n`&lt;/pre&gt;\n\n##### Custom Animator\n\n&lt;pre&gt;`// ModalAnimator.h\n\n@interface ModalAnimator : NSObject &amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;\n- (void)shouldPresent;\n- (void)shouldDismiss;\n@end\n`&lt;/pre&gt;\n\nThe public interface is very simple. Only a couple of configuration setters to let the animator know if we should be using the present or the dismiss animation. As seen above in the `PresentingViewController.m` code, these get called in the `UIViewControllerTransitioningDelegate` methods.\n\n&lt;pre&gt;`// ModalAnimator.m\n\n@interface ModalAnimator ()\n@property (nonatomic) BOOL isPresenting;\n@end\n\n@implementation ModalAnimator\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.isPresenting = YES;\n    }\n    return self;\n}\n\n- (void)shouldPresent {\n    self.isPresenting = YES;\n}\n\n- (void)shouldDismiss {\n    self.isPresenting = NO;\n}\n\n#pragma mark - UIViewControllerAnimatedTransitioning methods\n- (NSTimeInterval)transitionDuration:(id&amp;lt;UIViewControllerContextTransitioning&amp;gt;)transitionContext {\n    return 0.2;\n}\n\n- (void)animateTransition:(id&amp;lt;UIViewControllerContextTransitioning&amp;gt;)transitionContext {\n    UIViewController *fromVc = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVc = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *fromView = fromVc.view;\n    UIView *toView = toVc.view;\n    UIView *containerView = transitionContext.containerView;\n    NSTimeInterval duration = [self transitionDuration:transitionContext];\n\n    if (self.isPresenting) {\n        UIViewController *topFromVc = [self topViewControllerForViewController:fromVc];\n        [topFromVc viewWillDisappear:YES];\n        fromView.userInteractionEnabled = NO;\n        [containerView addSubview:toView];\n\n        // Setup animating the view from the bottom of the screen. \n        CGRect originalFrame = toView.frame;\n        CGRect hiddenFrame = CGRectMake(originalFrame.origin.x, originalFrame.size.height, originalFrame.size.width, originalFrame.size.height);\n        toView.frame = hiddenFrame;\n\n        [UIView animateWithDuration:duration animations: ^{\n            toView.frame = originalFrame;\n        } completion: ^(BOOL finished) {\n            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n            [topFromVc viewDidDisappear:YES];\n        }];\n    } else {\n        UIViewController *topToVc = [self topViewControllerForViewController:toVc];\n        [topToVc viewWillAppear:YES];\n\n        CGRect hiddenFrame = CGRectMake(fromView.frame.origin.x, fromView.frame.size.height, fromView.frame.size.width, fromView.frame.size.height);\n\n        [UIView animateWithDuration:duration animations: ^{\n            fromView.frame = hiddenFrame;\n        } completion: ^(BOOL finished) {\n            [fromView removeFromSuperview];\n            toView.userInteractionEnabled = YES;\n            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n            [topToVc viewDidAppear:YES];\n        }];\n    }\n}\n\n#pragma mark - Private methods\n- (UIViewController *)topViewControllerForViewController:(UIViewController *)viewController {\n    if ([viewController isKindOfClass:[UINavigationController class]]) {\n        UINavigationController *navigationController = (UINavigationController *)viewController;\n        return navigationController.topViewController;\n    } else {\n        return viewController;\n    }\n}\n\n@end\n</code></pre><p>The animator essentially implements two delegate methods which describe the animation and its duration. A couple of things to take note of:</p>\n<ol>\n<li><p>To preserve the way the default modal presentation works, manually call view lifecycle methods.</p>\n</li>\n<li><p>The private method <code>topViewControllerForViewController:</code> is here to ensure that the view life cycle methods are called on the correct view controller.</p>\n</li>\n</ol>\n<h2 id=\"Wrap-Up\"><a href=\"#Wrap-Up\" class=\"headerlink\" title=\"Wrap-Up\"></a>Wrap-Up</h2><p>I ended up using this modal animator in a few places in my app, and now it looks and feels consistent. If this has helped you or have different or better ways to speed up modal animations in iOS, feel free to comment.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>Apple doesn’t provide an easy way to speed up the animations for presenting modals. In this post, I describe a straightforward way to do this using the <code>UIViewControllerAnimatedTransitioning</code> and <code>UIViewControllerAnimatedTransitioningDelegate</code> protocols.</p>","more":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>Recently, for an iOS project I was working on, I needed to speed up the modal animation and alter its duration curve to match a different custom animation somewhere else in the app. Unfortunately, the built-in modal segue or <code>presentViewController:animated:completion:</code> doesn’t provide any opportunity to modify the animation.</p>\n<p>My first thought was to get my custom animation to match Apple’s built-in modal animation behaviour. But how? It’s not published anywhere. I could brute force match it by trial and error, but then app would have a dependency on Apple. If Apple were to change their stock animation in the future, I’d run into the same problem.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>It was clear that I needed to build my own modal animation so I could have full control without any dependencies. The solution uses the iOS 7+ custom animation protocols: <code>UIViewControllerAnimatedTransitioning</code> and <code>UIViewControllerAnimatedTransitioningDelegate</code>. There’s plenty of literature about how they work. If you’re interested in digging in, here is a good point: <a href=\"http://www.objc.io/issue-5/view-controller-transitions.html\">objc.io - View Controller Transitions</a>. At the bottom of that article, there are more links, including reference to the WWDC video.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>From a birds eye, here is how things work:</p>\n<ul>\n<li>From the presenting view controller, initialize and configure the animator.</li>\n<li>Configure the modal and present/dismiss it with animation set to <code>YES</code>. If you don’t turn the animation on, the animator will not be used.*   Provide the animator to the <code>UIViewControllerTransitioningDelegate</code> delegate methods.</li>\n<li>In the animator, configure and animate your views.</li>\n</ul>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h4><p>Here is some code that illustrates how to do this. Note that I’ve left out the unrelated bits.</p>\n<h5 id=\"Presenting-View-Controller\"><a href=\"#Presenting-View-Controller\" class=\"headerlink\" title=\"Presenting View Controller\"></a>Presenting View Controller</h5><pre><code>// PresentingViewController.m\n\n#import &quot;ModalAnimator.h&quot;\n\n@interface PresentingViewController () &amp;lt;UIViewControllerTransitioningDelegate&amp;gt;\n@property (strong, nonatomic) ModalAnimator *modalAnimator;\n@end\n\n@implementation PresentingViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.modalAnimator = [ModalAnimator new];\n}\n\n// Storyboard &quot;Present Modally&quot; seque with &quot;Animates&quot; turned on.\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n    UIViewController *viewController = segue.destinationViewController;    \n    viewController.modalPresentationStyle = UIModalPresentationCustom;\n    viewController.transitioningDelegate = self;\n}\n\n#pragma mark - UIViewControllerTransitioningDelegate methods\n- (id&amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {\n    [self.modalAnimator shouldPresent];\n    return self.modalAnimator;\n}\n\n- (id&amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;)animationControllerForDismissedController:(UIViewController *)dismissed {\n    [self.modalAnimator shouldDismiss];\n    return self.modalAnimator;\n}\n\n@end\n`&lt;/pre&gt;\n\nHere you can see the general flow. In this example, a storyboard segue is used to present the modal. Here is how the segue is configured in the storyboard:\n\n![modal segue settings](http://i.imgur.com/Gohw9gX.png)\n\nAlternatively, it could have been presented in code like so:\n\n&lt;pre&gt;`viewController.modalPresentationStyle = UIModalPresentationCustom;\nviewController.transitioningDelegate = self;\n[self presentViewController:viewController animated:YES completion:nil];\n`&lt;/pre&gt;\n\n##### Custom Animator\n\n&lt;pre&gt;`// ModalAnimator.h\n\n@interface ModalAnimator : NSObject &amp;lt;UIViewControllerAnimatedTransitioning&amp;gt;\n- (void)shouldPresent;\n- (void)shouldDismiss;\n@end\n`&lt;/pre&gt;\n\nThe public interface is very simple. Only a couple of configuration setters to let the animator know if we should be using the present or the dismiss animation. As seen above in the `PresentingViewController.m` code, these get called in the `UIViewControllerTransitioningDelegate` methods.\n\n&lt;pre&gt;`// ModalAnimator.m\n\n@interface ModalAnimator ()\n@property (nonatomic) BOOL isPresenting;\n@end\n\n@implementation ModalAnimator\n\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        self.isPresenting = YES;\n    }\n    return self;\n}\n\n- (void)shouldPresent {\n    self.isPresenting = YES;\n}\n\n- (void)shouldDismiss {\n    self.isPresenting = NO;\n}\n\n#pragma mark - UIViewControllerAnimatedTransitioning methods\n- (NSTimeInterval)transitionDuration:(id&amp;lt;UIViewControllerContextTransitioning&amp;gt;)transitionContext {\n    return 0.2;\n}\n\n- (void)animateTransition:(id&amp;lt;UIViewControllerContextTransitioning&amp;gt;)transitionContext {\n    UIViewController *fromVc = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];\n    UIViewController *toVc = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];\n    UIView *fromView = fromVc.view;\n    UIView *toView = toVc.view;\n    UIView *containerView = transitionContext.containerView;\n    NSTimeInterval duration = [self transitionDuration:transitionContext];\n\n    if (self.isPresenting) {\n        UIViewController *topFromVc = [self topViewControllerForViewController:fromVc];\n        [topFromVc viewWillDisappear:YES];\n        fromView.userInteractionEnabled = NO;\n        [containerView addSubview:toView];\n\n        // Setup animating the view from the bottom of the screen. \n        CGRect originalFrame = toView.frame;\n        CGRect hiddenFrame = CGRectMake(originalFrame.origin.x, originalFrame.size.height, originalFrame.size.width, originalFrame.size.height);\n        toView.frame = hiddenFrame;\n\n        [UIView animateWithDuration:duration animations: ^{\n            toView.frame = originalFrame;\n        } completion: ^(BOOL finished) {\n            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n            [topFromVc viewDidDisappear:YES];\n        }];\n    } else {\n        UIViewController *topToVc = [self topViewControllerForViewController:toVc];\n        [topToVc viewWillAppear:YES];\n\n        CGRect hiddenFrame = CGRectMake(fromView.frame.origin.x, fromView.frame.size.height, fromView.frame.size.width, fromView.frame.size.height);\n\n        [UIView animateWithDuration:duration animations: ^{\n            fromView.frame = hiddenFrame;\n        } completion: ^(BOOL finished) {\n            [fromView removeFromSuperview];\n            toView.userInteractionEnabled = YES;\n            [transitionContext completeTransition:![transitionContext transitionWasCancelled]];\n            [topToVc viewDidAppear:YES];\n        }];\n    }\n}\n\n#pragma mark - Private methods\n- (UIViewController *)topViewControllerForViewController:(UIViewController *)viewController {\n    if ([viewController isKindOfClass:[UINavigationController class]]) {\n        UINavigationController *navigationController = (UINavigationController *)viewController;\n        return navigationController.topViewController;\n    } else {\n        return viewController;\n    }\n}\n\n@end\n</code></pre><p>The animator essentially implements two delegate methods which describe the animation and its duration. A couple of things to take note of:</p>\n<ol>\n<li><p>To preserve the way the default modal presentation works, manually call view lifecycle methods.</p>\n</li>\n<li><p>The private method <code>topViewControllerForViewController:</code> is here to ensure that the view life cycle methods are called on the correct view controller.</p>\n</li>\n</ol>\n<h2 id=\"Wrap-Up\"><a href=\"#Wrap-Up\" class=\"headerlink\" title=\"Wrap-Up\"></a>Wrap-Up</h2><p>I ended up using this modal animator in a few places in my app, and now it looks and feels consistent. If this has helped you or have different or better ways to speed up modal animations in iOS, feel free to comment.</p>\n<p>Happy exploring!</p>"},{"title":"iOS 8 Share Extension Example in Swift","id":"32","date":"2014-06-17T01:41:10.000Z","_content":"\nWhile trying to get an iOS 8 Share Extension working in the new Swift language, I ran into some issues due to lack of examples and incomplete documentation. My objective was to let the user share a web page URL with my own custom app. After struggling and digging, here is a working example.\n\n<!--more-->\n\n## Setup\n\nCreate a new app extension target by going go File, New, Target in the Xcode menu, then in the left panel select Application Extension and select Share in the right pane. Next, you'll need to name it, and then make sure it belongs to your correct project and embedded in your main target. Remember, app extensions must be distributed with your main app.\n\nNow run the app in Xcode, open a website in Safari and tap the Share icon on the bottom. The Action Sheet should appear and your app should be amongst the sharing options. If you tap on your app, a native share dialog should appear. If you have that working, then we're good to move on.\n\nXcode creates a target and a folder of files which you'll see in the Project Navigator. If you inspect that folder you should see three files:\n\n1.  ShareViewController.swift\n2.  MainInterface.storyboard\n3.  Supporting Files/Info.plist\n\nIn this example, we'll ignore the MainInterface.storyboard file as we're more interested in simply getting the url from Safari to share.\n\n## Info.plist\n\nFirst thing's first, lets get our extension configured to share URLs by opening up the Info.plist file and making a few changes. If you right click on it in the Project Navigator, and select Open As, Source Code, we can it in its XML form. We need to change `NSExtensionActivationRule` to a dictionary and add `NSExtensionActivationSupportsWebURLWithMaxCount` as a Number with the value `1`. This lets the OS know that we'll be looking for a web url in our controller. The final result of the `NSExtensionKey` node in the file should look like this:\n\n    &lt;key&gt;NSExtension&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;NSExtensionAttributes&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSExtensionActivationRule&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;NSExtensionActivationSupportsWebURLWithMaxCount&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n            &lt;/dict&gt;\n            &lt;key&gt;NSExtensionPointName&lt;/key&gt;\n            &lt;string&gt;com.apple.share-services&lt;/string&gt;\n            &lt;key&gt;NSExtensionPointVersion&lt;/key&gt;\n            &lt;string&gt;1.0&lt;/string&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;NSExtensionPointIdentifier&lt;/key&gt;\n        &lt;string&gt;com.apple.share-services&lt;/string&gt;\n        &lt;key&gt;NSExtensionMainStoryboard&lt;/key&gt;\n        &lt;string&gt;MainInterface&lt;/string&gt;\n    &lt;/dict&gt;\n    `</pre>\n\n    ## Code\n\n    Now that we're configured, lets get into the code and open up ShareViewController.swift. You'll see Xcode stubs out a few methods for us, but to keep this example focused, the only method I'll work in for this example is `didSelectPost`. This is a delegate method that gets called when the user taps the \"Post\" button in the share dialog. In here, we'll add the code needed to extract the url and user entered text for our share.\n\n    <pre>`override func didSelectPost() {\n\n        //get the itemProvider which wraps the url we need\n        var item : NSExtensionItem = self.extensionContext.inputItems[0] as NSExtensionItem\n        var itemProvider : NSItemProvider = item.attachments[0] as NSItemProvider\n\n        //pull the URL out\n        if (itemProvider.hasItemConformingToTypeIdentifier(\"public.url\")) {        \n            itemProvider.loadItemForTypeIdentifier(\"public.url\", options: nil, completionHandler: { (urlItem, error) in\n                var urlString = urlItem.absoluteString\n                //do what you need to do now, such as send a request to your server with this url\n            })\n        }\n\n        //default stubbed out code which can pass data back to the host app.\n        self.extensionContext.completeRequestReturningItems(nil, completionHandler: nil)\n    }\n\nNotice in the completion handler closure, there are no typed arguments. This is because Swift will automatically infer the argument type. If we try to type `urlItem` to NSURL, we'll get compile errors, because that argument is inherently `NSSecureEncoding!`.\n\nAnd there you have it. Sharing a web url via your own app. I hope this example was helpful for you :)","source":"_posts/ios-8-share-extension-example-swift.md","raw":"---\ntitle: iOS 8 Share Extension Example in Swift\ntags:\n  - ios\n  - swift\nid: 32\ncategories:\n  - Uncategorized\ndate: 2014-06-16 21:41:10\n---\n\nWhile trying to get an iOS 8 Share Extension working in the new Swift language, I ran into some issues due to lack of examples and incomplete documentation. My objective was to let the user share a web page URL with my own custom app. After struggling and digging, here is a working example.\n\n<!--more-->\n\n## Setup\n\nCreate a new app extension target by going go File, New, Target in the Xcode menu, then in the left panel select Application Extension and select Share in the right pane. Next, you'll need to name it, and then make sure it belongs to your correct project and embedded in your main target. Remember, app extensions must be distributed with your main app.\n\nNow run the app in Xcode, open a website in Safari and tap the Share icon on the bottom. The Action Sheet should appear and your app should be amongst the sharing options. If you tap on your app, a native share dialog should appear. If you have that working, then we're good to move on.\n\nXcode creates a target and a folder of files which you'll see in the Project Navigator. If you inspect that folder you should see three files:\n\n1.  ShareViewController.swift\n2.  MainInterface.storyboard\n3.  Supporting Files/Info.plist\n\nIn this example, we'll ignore the MainInterface.storyboard file as we're more interested in simply getting the url from Safari to share.\n\n## Info.plist\n\nFirst thing's first, lets get our extension configured to share URLs by opening up the Info.plist file and making a few changes. If you right click on it in the Project Navigator, and select Open As, Source Code, we can it in its XML form. We need to change `NSExtensionActivationRule` to a dictionary and add `NSExtensionActivationSupportsWebURLWithMaxCount` as a Number with the value `1`. This lets the OS know that we'll be looking for a web url in our controller. The final result of the `NSExtensionKey` node in the file should look like this:\n\n    &lt;key&gt;NSExtension&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;NSExtensionAttributes&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSExtensionActivationRule&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;NSExtensionActivationSupportsWebURLWithMaxCount&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n            &lt;/dict&gt;\n            &lt;key&gt;NSExtensionPointName&lt;/key&gt;\n            &lt;string&gt;com.apple.share-services&lt;/string&gt;\n            &lt;key&gt;NSExtensionPointVersion&lt;/key&gt;\n            &lt;string&gt;1.0&lt;/string&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;NSExtensionPointIdentifier&lt;/key&gt;\n        &lt;string&gt;com.apple.share-services&lt;/string&gt;\n        &lt;key&gt;NSExtensionMainStoryboard&lt;/key&gt;\n        &lt;string&gt;MainInterface&lt;/string&gt;\n    &lt;/dict&gt;\n    `</pre>\n\n    ## Code\n\n    Now that we're configured, lets get into the code and open up ShareViewController.swift. You'll see Xcode stubs out a few methods for us, but to keep this example focused, the only method I'll work in for this example is `didSelectPost`. This is a delegate method that gets called when the user taps the \"Post\" button in the share dialog. In here, we'll add the code needed to extract the url and user entered text for our share.\n\n    <pre>`override func didSelectPost() {\n\n        //get the itemProvider which wraps the url we need\n        var item : NSExtensionItem = self.extensionContext.inputItems[0] as NSExtensionItem\n        var itemProvider : NSItemProvider = item.attachments[0] as NSItemProvider\n\n        //pull the URL out\n        if (itemProvider.hasItemConformingToTypeIdentifier(\"public.url\")) {        \n            itemProvider.loadItemForTypeIdentifier(\"public.url\", options: nil, completionHandler: { (urlItem, error) in\n                var urlString = urlItem.absoluteString\n                //do what you need to do now, such as send a request to your server with this url\n            })\n        }\n\n        //default stubbed out code which can pass data back to the host app.\n        self.extensionContext.completeRequestReturningItems(nil, completionHandler: nil)\n    }\n\nNotice in the completion handler closure, there are no typed arguments. This is because Swift will automatically infer the argument type. If we try to type `urlItem` to NSURL, we'll get compile errors, because that argument is inherently `NSSecureEncoding!`.\n\nAnd there you have it. Sharing a web url via your own app. I hope this example was helpful for you :)","slug":"ios-8-share-extension-example-swift","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswt000o3fysrrifn82t","content":"<p>While trying to get an iOS 8 Share Extension working in the new Swift language, I ran into some issues due to lack of examples and incomplete documentation. My objective was to let the user share a web page URL with my own custom app. After struggling and digging, here is a working example.</p>\n<a id=\"more\"></a>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Create a new app extension target by going go File, New, Target in the Xcode menu, then in the left panel select Application Extension and select Share in the right pane. Next, you’ll need to name it, and then make sure it belongs to your correct project and embedded in your main target. Remember, app extensions must be distributed with your main app.</p>\n<p>Now run the app in Xcode, open a website in Safari and tap the Share icon on the bottom. The Action Sheet should appear and your app should be amongst the sharing options. If you tap on your app, a native share dialog should appear. If you have that working, then we’re good to move on.</p>\n<p>Xcode creates a target and a folder of files which you’ll see in the Project Navigator. If you inspect that folder you should see three files:</p>\n<ol>\n<li>ShareViewController.swift</li>\n<li>MainInterface.storyboard</li>\n<li>Supporting Files/Info.plist</li>\n</ol>\n<p>In this example, we’ll ignore the MainInterface.storyboard file as we’re more interested in simply getting the url from Safari to share.</p>\n<h2 id=\"Info-plist\"><a href=\"#Info-plist\" class=\"headerlink\" title=\"Info.plist\"></a>Info.plist</h2><p>First thing’s first, lets get our extension configured to share URLs by opening up the Info.plist file and making a few changes. If you right click on it in the Project Navigator, and select Open As, Source Code, we can it in its XML form. We need to change <code>NSExtensionActivationRule</code> to a dictionary and add <code>NSExtensionActivationSupportsWebURLWithMaxCount</code> as a Number with the value <code>1</code>. This lets the OS know that we’ll be looking for a web url in our controller. The final result of the <code>NSExtensionKey</code> node in the file should look like this:</p>\n<pre><code>&amp;lt;key&amp;gt;NSExtension&amp;lt;/key&amp;gt;\n&amp;lt;dict&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionAttributes&amp;lt;/key&amp;gt;\n    &amp;lt;dict&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionActivationRule&amp;lt;/key&amp;gt;\n        &amp;lt;dict&amp;gt;\n            &amp;lt;key&amp;gt;NSExtensionActivationSupportsWebURLWithMaxCount&amp;lt;/key&amp;gt;\n            &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;\n        &amp;lt;/dict&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionPointName&amp;lt;/key&amp;gt;\n        &amp;lt;string&amp;gt;com.apple.share-services&amp;lt;/string&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionPointVersion&amp;lt;/key&amp;gt;\n        &amp;lt;string&amp;gt;1.0&amp;lt;/string&amp;gt;\n    &amp;lt;/dict&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionPointIdentifier&amp;lt;/key&amp;gt;\n    &amp;lt;string&amp;gt;com.apple.share-services&amp;lt;/string&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionMainStoryboard&amp;lt;/key&amp;gt;\n    &amp;lt;string&amp;gt;MainInterface&amp;lt;/string&amp;gt;\n&amp;lt;/dict&amp;gt;\n`&lt;/pre&gt;\n\n## Code\n\nNow that we&apos;re configured, lets get into the code and open up ShareViewController.swift. You&apos;ll see Xcode stubs out a few methods for us, but to keep this example focused, the only method I&apos;ll work in for this example is `didSelectPost`. This is a delegate method that gets called when the user taps the &quot;Post&quot; button in the share dialog. In here, we&apos;ll add the code needed to extract the url and user entered text for our share.\n\n&lt;pre&gt;`override func didSelectPost() {\n\n    //get the itemProvider which wraps the url we need\n    var item : NSExtensionItem = self.extensionContext.inputItems[0] as NSExtensionItem\n    var itemProvider : NSItemProvider = item.attachments[0] as NSItemProvider\n\n    //pull the URL out\n    if (itemProvider.hasItemConformingToTypeIdentifier(&quot;public.url&quot;)) {        \n        itemProvider.loadItemForTypeIdentifier(&quot;public.url&quot;, options: nil, completionHandler: { (urlItem, error) in\n            var urlString = urlItem.absoluteString\n            //do what you need to do now, such as send a request to your server with this url\n        })\n    }\n\n    //default stubbed out code which can pass data back to the host app.\n    self.extensionContext.completeRequestReturningItems(nil, completionHandler: nil)\n}\n</code></pre><p>Notice in the completion handler closure, there are no typed arguments. This is because Swift will automatically infer the argument type. If we try to type <code>urlItem</code> to NSURL, we’ll get compile errors, because that argument is inherently <code>NSSecureEncoding!</code>.</p>\n<p>And there you have it. Sharing a web url via your own app. I hope this example was helpful for you :)</p>\n","excerpt":"<p>While trying to get an iOS 8 Share Extension working in the new Swift language, I ran into some issues due to lack of examples and incomplete documentation. My objective was to let the user share a web page URL with my own custom app. After struggling and digging, here is a working example.</p>","more":"<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Create a new app extension target by going go File, New, Target in the Xcode menu, then in the left panel select Application Extension and select Share in the right pane. Next, you’ll need to name it, and then make sure it belongs to your correct project and embedded in your main target. Remember, app extensions must be distributed with your main app.</p>\n<p>Now run the app in Xcode, open a website in Safari and tap the Share icon on the bottom. The Action Sheet should appear and your app should be amongst the sharing options. If you tap on your app, a native share dialog should appear. If you have that working, then we’re good to move on.</p>\n<p>Xcode creates a target and a folder of files which you’ll see in the Project Navigator. If you inspect that folder you should see three files:</p>\n<ol>\n<li>ShareViewController.swift</li>\n<li>MainInterface.storyboard</li>\n<li>Supporting Files/Info.plist</li>\n</ol>\n<p>In this example, we’ll ignore the MainInterface.storyboard file as we’re more interested in simply getting the url from Safari to share.</p>\n<h2 id=\"Info-plist\"><a href=\"#Info-plist\" class=\"headerlink\" title=\"Info.plist\"></a>Info.plist</h2><p>First thing’s first, lets get our extension configured to share URLs by opening up the Info.plist file and making a few changes. If you right click on it in the Project Navigator, and select Open As, Source Code, we can it in its XML form. We need to change <code>NSExtensionActivationRule</code> to a dictionary and add <code>NSExtensionActivationSupportsWebURLWithMaxCount</code> as a Number with the value <code>1</code>. This lets the OS know that we’ll be looking for a web url in our controller. The final result of the <code>NSExtensionKey</code> node in the file should look like this:</p>\n<pre><code>&amp;lt;key&amp;gt;NSExtension&amp;lt;/key&amp;gt;\n&amp;lt;dict&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionAttributes&amp;lt;/key&amp;gt;\n    &amp;lt;dict&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionActivationRule&amp;lt;/key&amp;gt;\n        &amp;lt;dict&amp;gt;\n            &amp;lt;key&amp;gt;NSExtensionActivationSupportsWebURLWithMaxCount&amp;lt;/key&amp;gt;\n            &amp;lt;integer&amp;gt;1&amp;lt;/integer&amp;gt;\n        &amp;lt;/dict&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionPointName&amp;lt;/key&amp;gt;\n        &amp;lt;string&amp;gt;com.apple.share-services&amp;lt;/string&amp;gt;\n        &amp;lt;key&amp;gt;NSExtensionPointVersion&amp;lt;/key&amp;gt;\n        &amp;lt;string&amp;gt;1.0&amp;lt;/string&amp;gt;\n    &amp;lt;/dict&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionPointIdentifier&amp;lt;/key&amp;gt;\n    &amp;lt;string&amp;gt;com.apple.share-services&amp;lt;/string&amp;gt;\n    &amp;lt;key&amp;gt;NSExtensionMainStoryboard&amp;lt;/key&amp;gt;\n    &amp;lt;string&amp;gt;MainInterface&amp;lt;/string&amp;gt;\n&amp;lt;/dict&amp;gt;\n`&lt;/pre&gt;\n\n## Code\n\nNow that we&apos;re configured, lets get into the code and open up ShareViewController.swift. You&apos;ll see Xcode stubs out a few methods for us, but to keep this example focused, the only method I&apos;ll work in for this example is `didSelectPost`. This is a delegate method that gets called when the user taps the &quot;Post&quot; button in the share dialog. In here, we&apos;ll add the code needed to extract the url and user entered text for our share.\n\n&lt;pre&gt;`override func didSelectPost() {\n\n    //get the itemProvider which wraps the url we need\n    var item : NSExtensionItem = self.extensionContext.inputItems[0] as NSExtensionItem\n    var itemProvider : NSItemProvider = item.attachments[0] as NSItemProvider\n\n    //pull the URL out\n    if (itemProvider.hasItemConformingToTypeIdentifier(&quot;public.url&quot;)) {        \n        itemProvider.loadItemForTypeIdentifier(&quot;public.url&quot;, options: nil, completionHandler: { (urlItem, error) in\n            var urlString = urlItem.absoluteString\n            //do what you need to do now, such as send a request to your server with this url\n        })\n    }\n\n    //default stubbed out code which can pass data back to the host app.\n    self.extensionContext.completeRequestReturningItems(nil, completionHandler: nil)\n}\n</code></pre><p>Notice in the completion handler closure, there are no typed arguments. This is because Swift will automatically infer the argument type. If we try to type <code>urlItem</code> to NSURL, we’ll get compile errors, because that argument is inherently <code>NSSecureEncoding!</code>.</p>\n<p>And there you have it. Sharing a web url via your own app. I hope this example was helpful for you :)</p>"},{"title":"iOS Core Data Concurrency Example","id":"27","date":"2013-07-08T01:29:25.000Z","_content":"\nAn iOS Core Data concurrency example showing how one data store can be hot swapped with another while performing read and write operations.\n\n<!--more-->\n\nI'm working on a project that requires downloading a JSON data feed from a web server to update local data on an iOS device using a Core Data persistent store.\n\n## Problem\n\n1.  The data is not indexed by anything. Thus, I could not _update_ the local objects directly. I had to do a full data set replace, which meant deleting all the existing objects and create new objects on each sync.\n2.  The data set was over 60,000 records and over 5MB. Saving to the local store via Core Data operations was locking up the UI.\n\n3.  The UI needed access to the old data while the new data was being downloaded and written to disk.\n\n## Solution\n\nI was aware of asynchronous `NSURLConnection` techniques for the download to free up the UI thread, but that wouldn't help with the issue of UI locking when saving data to the local store. So, I dug deeper into Core Data and learned about its ability to handle concurrency, which was improved for iOS 5+.\n\nTo summarize, the solution I went with was to create a new, temporary, background `NSManagedObjectContext` (MOC) for the new data. Once all the objects were written to the MOC, I \"flipped the switch\" by replacing the existing `NSPersistentStore` then saved the MOC. This allowed all the data downloading and saving to be done in the background and being able to do a full replace update without the UI ever knowing.\n\nI chose to do it this way because MOCs are cheap, and it is simpler to implement than other setups like nested MOCs. You can read more about that on [Florian Kugler's blog](http://floriankugler.com/blog/2013/4/2/the-concurrent-core-data-stack).\n\n## Implementation\n\nI won't get into the asynchronous downloading because there are several resources online that teach it:\n\n*   [Apple Documentation - Using NSURLConnection](http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE)\n*   [Code With Chris - NSURLConnection By Example](http://codewithchris.com/tutorial-how-to-use-ios-nsurlconnection-by-example/)\n\nWhat I want to show is the actual Core Data code as I didn't find any comprehensive examples online and Apple's documentation on this topic is lacking.\n\nWhen I started the project, I checked off the Core Data option, which sets up the Core Data stack inside of your **AppDelegate** class.\n\n![](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/00a4880a-0c07-4435-bc95-78c84afb038b/00000336.png)\n\nAfter setting up my asynchronous `NSURLConnection`, in the delegate method, `connectionDidFinishLoading:connection`, this is where I was saving the data:\n\n    - (void)connectionDidFinishLoading:(NSURLConnection *)connection {\n        //prepare the data into an array of objects\n        NSData *data = [self dataForConnection:connection];\n        NSArray *objects = [self parseData:data];\n\n        //setup tempMoc\n        UIApplication *app = [UIApplication sharedApplication];\n        AppDelegate *appDelegate = (AppDelegate *)app.delegate;\n        self.moc = appDelegate.managedObjectContext;\n        NSPersistentStoreCoordinator *storeCoordinator = self.moc.persistentStoreCoordinator;\n        NSManagedObjectContext *tempMoc = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];\n        tempMoc.persistentStoreCoordinator = storeCoordinator;\n\n        NSString *entityName = NSStringFromClass([Compatibility class]);\n\n        //specify the thread for the callback after all the saving is finished\n        __block dispatch_queue_t currentQ =  dispatch_get_current_queue();\n\n        //save and do anything else for this particular MOC on a background thread inside the block\n        [self.tempMoc performBlock:^{        \n            for (NSDictionary *newObjectDict in objects) {\n                Compatibility *object = [NSEntityDescription insertNewObjectForEntityForName:entityName inManagedObjectContext:self.tempMoc];\n                object.prod1 = newObjectDict[@\"prod1\"];\n                object.prod2 = newObjectDict[@\"prod2\"];\n                object.result = newObjectDict[@\"result\"];\n            }\n\n            //after all the stuff in the block is done, execute this block on the thread specified\n            dispatch_sync(currentQ, ^(){\n                [tempMoc save:nil];\n\n                //flip the switch\n                [self.moc lock];\n                [self.moc reset];\n                NSPersistentStore *store = storeCoordinator.persistentStores.lastObject;\n                NSURL *storeUrl = store.URL;\n                [storeCoordinator removePersistentStore:store error:nil];\n                [[NSFileManager defaultManager] removeItemAtURL:store.URL error:nil];\n                [storeCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:nil error:nil];\n                [self.moc unlock];\n                self.moc = tempMoc;\n                tempMoc = nil;\n            });\n        }];\n    }\n\nLet's go over the important parts here.\n\nWhen setting up your temporary MOC, to make sure to initialize it with `initWithConcurrencyType:NSPrivateQueueConcurrencyType` so it can open and manage its own background thread and queueing operations.\n\nTo take advantage of this feature, you must use the asynchronous `peformBlock:` or synchronous `peformBlockAndWait:` methods. If you're doing more complex things with your MOCs and `NSManagedObjects` within these blocks, pay attention to the documentation to ensure things don't get messy. [Here are some summary tips](http://stackoverflow.com/a/2138332/1672161).\n\nThere is no built-in callback for these methods but there are several ways to go about it, I found best suited for my purposes the `dispatch_sync` method. Two others are described in the WWDC video mentioned at the bottom of this post if your needs are different.\n\nFlipping the switch requires getting the store and its URL, deleting the store, then creating a new store with the same URL. I learned this technique in [this post](http://stackoverflow.com/questions/1077810/delete-reset-all-entries-in-core-data), and if you hook it up to a UIButton, its a convenient way to reset things while testing.\n\nWell, that's it, I hope this was helpful.\n\nOh, and if you're working with multiple asynchronous NSURLConnections, I found [this post](http://stackoverflow.com/a/332483/1672161) to be very helpful.\n\n## References\n\n*   WWDC 2012 Session 214 - Core Data Best Practices\n*   [Apple Documentation - Dispatch Sync](http://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_sync)","source":"_posts/ios-core-data-concurrency-example.md","raw":"---\ntitle: iOS Core Data Concurrency Example\ntags:\n  - ios\nid: 27\ncategories:\n  - Uncategorized\ndate: 2013-07-07 21:29:25\n---\n\nAn iOS Core Data concurrency example showing how one data store can be hot swapped with another while performing read and write operations.\n\n<!--more-->\n\nI'm working on a project that requires downloading a JSON data feed from a web server to update local data on an iOS device using a Core Data persistent store.\n\n## Problem\n\n1.  The data is not indexed by anything. Thus, I could not _update_ the local objects directly. I had to do a full data set replace, which meant deleting all the existing objects and create new objects on each sync.\n2.  The data set was over 60,000 records and over 5MB. Saving to the local store via Core Data operations was locking up the UI.\n\n3.  The UI needed access to the old data while the new data was being downloaded and written to disk.\n\n## Solution\n\nI was aware of asynchronous `NSURLConnection` techniques for the download to free up the UI thread, but that wouldn't help with the issue of UI locking when saving data to the local store. So, I dug deeper into Core Data and learned about its ability to handle concurrency, which was improved for iOS 5+.\n\nTo summarize, the solution I went with was to create a new, temporary, background `NSManagedObjectContext` (MOC) for the new data. Once all the objects were written to the MOC, I \"flipped the switch\" by replacing the existing `NSPersistentStore` then saved the MOC. This allowed all the data downloading and saving to be done in the background and being able to do a full replace update without the UI ever knowing.\n\nI chose to do it this way because MOCs are cheap, and it is simpler to implement than other setups like nested MOCs. You can read more about that on [Florian Kugler's blog](http://floriankugler.com/blog/2013/4/2/the-concurrent-core-data-stack).\n\n## Implementation\n\nI won't get into the asynchronous downloading because there are several resources online that teach it:\n\n*   [Apple Documentation - Using NSURLConnection](http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE)\n*   [Code With Chris - NSURLConnection By Example](http://codewithchris.com/tutorial-how-to-use-ios-nsurlconnection-by-example/)\n\nWhat I want to show is the actual Core Data code as I didn't find any comprehensive examples online and Apple's documentation on this topic is lacking.\n\nWhen I started the project, I checked off the Core Data option, which sets up the Core Data stack inside of your **AppDelegate** class.\n\n![](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/00a4880a-0c07-4435-bc95-78c84afb038b/00000336.png)\n\nAfter setting up my asynchronous `NSURLConnection`, in the delegate method, `connectionDidFinishLoading:connection`, this is where I was saving the data:\n\n    - (void)connectionDidFinishLoading:(NSURLConnection *)connection {\n        //prepare the data into an array of objects\n        NSData *data = [self dataForConnection:connection];\n        NSArray *objects = [self parseData:data];\n\n        //setup tempMoc\n        UIApplication *app = [UIApplication sharedApplication];\n        AppDelegate *appDelegate = (AppDelegate *)app.delegate;\n        self.moc = appDelegate.managedObjectContext;\n        NSPersistentStoreCoordinator *storeCoordinator = self.moc.persistentStoreCoordinator;\n        NSManagedObjectContext *tempMoc = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];\n        tempMoc.persistentStoreCoordinator = storeCoordinator;\n\n        NSString *entityName = NSStringFromClass([Compatibility class]);\n\n        //specify the thread for the callback after all the saving is finished\n        __block dispatch_queue_t currentQ =  dispatch_get_current_queue();\n\n        //save and do anything else for this particular MOC on a background thread inside the block\n        [self.tempMoc performBlock:^{        \n            for (NSDictionary *newObjectDict in objects) {\n                Compatibility *object = [NSEntityDescription insertNewObjectForEntityForName:entityName inManagedObjectContext:self.tempMoc];\n                object.prod1 = newObjectDict[@\"prod1\"];\n                object.prod2 = newObjectDict[@\"prod2\"];\n                object.result = newObjectDict[@\"result\"];\n            }\n\n            //after all the stuff in the block is done, execute this block on the thread specified\n            dispatch_sync(currentQ, ^(){\n                [tempMoc save:nil];\n\n                //flip the switch\n                [self.moc lock];\n                [self.moc reset];\n                NSPersistentStore *store = storeCoordinator.persistentStores.lastObject;\n                NSURL *storeUrl = store.URL;\n                [storeCoordinator removePersistentStore:store error:nil];\n                [[NSFileManager defaultManager] removeItemAtURL:store.URL error:nil];\n                [storeCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:nil error:nil];\n                [self.moc unlock];\n                self.moc = tempMoc;\n                tempMoc = nil;\n            });\n        }];\n    }\n\nLet's go over the important parts here.\n\nWhen setting up your temporary MOC, to make sure to initialize it with `initWithConcurrencyType:NSPrivateQueueConcurrencyType` so it can open and manage its own background thread and queueing operations.\n\nTo take advantage of this feature, you must use the asynchronous `peformBlock:` or synchronous `peformBlockAndWait:` methods. If you're doing more complex things with your MOCs and `NSManagedObjects` within these blocks, pay attention to the documentation to ensure things don't get messy. [Here are some summary tips](http://stackoverflow.com/a/2138332/1672161).\n\nThere is no built-in callback for these methods but there are several ways to go about it, I found best suited for my purposes the `dispatch_sync` method. Two others are described in the WWDC video mentioned at the bottom of this post if your needs are different.\n\nFlipping the switch requires getting the store and its URL, deleting the store, then creating a new store with the same URL. I learned this technique in [this post](http://stackoverflow.com/questions/1077810/delete-reset-all-entries-in-core-data), and if you hook it up to a UIButton, its a convenient way to reset things while testing.\n\nWell, that's it, I hope this was helpful.\n\nOh, and if you're working with multiple asynchronous NSURLConnections, I found [this post](http://stackoverflow.com/a/332483/1672161) to be very helpful.\n\n## References\n\n*   WWDC 2012 Session 214 - Core Data Best Practices\n*   [Apple Documentation - Dispatch Sync](http://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_sync)","slug":"ios-core-data-concurrency-example","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswv000s3fyskij14asu","content":"<p>An iOS Core Data concurrency example showing how one data store can be hot swapped with another while performing read and write operations.</p>\n<a id=\"more\"></a>\n<p>I’m working on a project that requires downloading a JSON data feed from a web server to update local data on an iOS device using a Core Data persistent store.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><ol>\n<li>The data is not indexed by anything. Thus, I could not <em>update</em> the local objects directly. I had to do a full data set replace, which meant deleting all the existing objects and create new objects on each sync.</li>\n<li><p>The data set was over 60,000 records and over 5MB. Saving to the local store via Core Data operations was locking up the UI.</p>\n</li>\n<li><p>The UI needed access to the old data while the new data was being downloaded and written to disk.</p>\n</li>\n</ol>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>I was aware of asynchronous <code>NSURLConnection</code> techniques for the download to free up the UI thread, but that wouldn’t help with the issue of UI locking when saving data to the local store. So, I dug deeper into Core Data and learned about its ability to handle concurrency, which was improved for iOS 5+.</p>\n<p>To summarize, the solution I went with was to create a new, temporary, background <code>NSManagedObjectContext</code> (MOC) for the new data. Once all the objects were written to the MOC, I “flipped the switch” by replacing the existing <code>NSPersistentStore</code> then saved the MOC. This allowed all the data downloading and saving to be done in the background and being able to do a full replace update without the UI ever knowing.</p>\n<p>I chose to do it this way because MOCs are cheap, and it is simpler to implement than other setups like nested MOCs. You can read more about that on <a href=\"http://floriankugler.com/blog/2013/4/2/the-concurrent-core-data-stack\" target=\"_blank\" rel=\"external\">Florian Kugler’s blog</a>.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>I won’t get into the asynchronous downloading because there are several resources online that teach it:</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE\" target=\"_blank\" rel=\"external\">Apple Documentation - Using NSURLConnection</a></li>\n<li><a href=\"http://codewithchris.com/tutorial-how-to-use-ios-nsurlconnection-by-example/\" target=\"_blank\" rel=\"external\">Code With Chris - NSURLConnection By Example</a></li>\n</ul>\n<p>What I want to show is the actual Core Data code as I didn’t find any comprehensive examples online and Apple’s documentation on this topic is lacking.</p>\n<p>When I started the project, I checked off the Core Data option, which sets up the Core Data stack inside of your <strong>AppDelegate</strong> class.</p>\n<p><img src=\"http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/00a4880a-0c07-4435-bc95-78c84afb038b/00000336.png\" alt=\"\"></p>\n<p>After setting up my asynchronous <code>NSURLConnection</code>, in the delegate method, <code>connectionDidFinishLoading:connection</code>, this is where I was saving the data:</p>\n<pre><code>- (void)connectionDidFinishLoading:(NSURLConnection *)connection {\n    //prepare the data into an array of objects\n    NSData *data = [self dataForConnection:connection];\n    NSArray *objects = [self parseData:data];\n\n    //setup tempMoc\n    UIApplication *app = [UIApplication sharedApplication];\n    AppDelegate *appDelegate = (AppDelegate *)app.delegate;\n    self.moc = appDelegate.managedObjectContext;\n    NSPersistentStoreCoordinator *storeCoordinator = self.moc.persistentStoreCoordinator;\n    NSManagedObjectContext *tempMoc = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];\n    tempMoc.persistentStoreCoordinator = storeCoordinator;\n\n    NSString *entityName = NSStringFromClass([Compatibility class]);\n\n    //specify the thread for the callback after all the saving is finished\n    __block dispatch_queue_t currentQ =  dispatch_get_current_queue();\n\n    //save and do anything else for this particular MOC on a background thread inside the block\n    [self.tempMoc performBlock:^{        \n        for (NSDictionary *newObjectDict in objects) {\n            Compatibility *object = [NSEntityDescription insertNewObjectForEntityForName:entityName inManagedObjectContext:self.tempMoc];\n            object.prod1 = newObjectDict[@&quot;prod1&quot;];\n            object.prod2 = newObjectDict[@&quot;prod2&quot;];\n            object.result = newObjectDict[@&quot;result&quot;];\n        }\n\n        //after all the stuff in the block is done, execute this block on the thread specified\n        dispatch_sync(currentQ, ^(){\n            [tempMoc save:nil];\n\n            //flip the switch\n            [self.moc lock];\n            [self.moc reset];\n            NSPersistentStore *store = storeCoordinator.persistentStores.lastObject;\n            NSURL *storeUrl = store.URL;\n            [storeCoordinator removePersistentStore:store error:nil];\n            [[NSFileManager defaultManager] removeItemAtURL:store.URL error:nil];\n            [storeCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:nil error:nil];\n            [self.moc unlock];\n            self.moc = tempMoc;\n            tempMoc = nil;\n        });\n    }];\n}\n</code></pre><p>Let’s go over the important parts here.</p>\n<p>When setting up your temporary MOC, to make sure to initialize it with <code>initWithConcurrencyType:NSPrivateQueueConcurrencyType</code> so it can open and manage its own background thread and queueing operations.</p>\n<p>To take advantage of this feature, you must use the asynchronous <code>peformBlock:</code> or synchronous <code>peformBlockAndWait:</code> methods. If you’re doing more complex things with your MOCs and <code>NSManagedObjects</code> within these blocks, pay attention to the documentation to ensure things don’t get messy. <a href=\"http://stackoverflow.com/a/2138332/1672161\" target=\"_blank\" rel=\"external\">Here are some summary tips</a>.</p>\n<p>There is no built-in callback for these methods but there are several ways to go about it, I found best suited for my purposes the <code>dispatch_sync</code> method. Two others are described in the WWDC video mentioned at the bottom of this post if your needs are different.</p>\n<p>Flipping the switch requires getting the store and its URL, deleting the store, then creating a new store with the same URL. I learned this technique in <a href=\"http://stackoverflow.com/questions/1077810/delete-reset-all-entries-in-core-data\" target=\"_blank\" rel=\"external\">this post</a>, and if you hook it up to a UIButton, its a convenient way to reset things while testing.</p>\n<p>Well, that’s it, I hope this was helpful.</p>\n<p>Oh, and if you’re working with multiple asynchronous NSURLConnections, I found <a href=\"http://stackoverflow.com/a/332483/1672161\" target=\"_blank\" rel=\"external\">this post</a> to be very helpful.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li>WWDC 2012 Session 214 - Core Data Best Practices</li>\n<li><a href=\"http://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_sync\" target=\"_blank\" rel=\"external\">Apple Documentation - Dispatch Sync</a></li>\n</ul>\n","excerpt":"<p>An iOS Core Data concurrency example showing how one data store can be hot swapped with another while performing read and write operations.</p>","more":"<p>I’m working on a project that requires downloading a JSON data feed from a web server to update local data on an iOS device using a Core Data persistent store.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><ol>\n<li>The data is not indexed by anything. Thus, I could not <em>update</em> the local objects directly. I had to do a full data set replace, which meant deleting all the existing objects and create new objects on each sync.</li>\n<li><p>The data set was over 60,000 records and over 5MB. Saving to the local store via Core Data operations was locking up the UI.</p>\n</li>\n<li><p>The UI needed access to the old data while the new data was being downloaded and written to disk.</p>\n</li>\n</ol>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>I was aware of asynchronous <code>NSURLConnection</code> techniques for the download to free up the UI thread, but that wouldn’t help with the issue of UI locking when saving data to the local store. So, I dug deeper into Core Data and learned about its ability to handle concurrency, which was improved for iOS 5+.</p>\n<p>To summarize, the solution I went with was to create a new, temporary, background <code>NSManagedObjectContext</code> (MOC) for the new data. Once all the objects were written to the MOC, I “flipped the switch” by replacing the existing <code>NSPersistentStore</code> then saved the MOC. This allowed all the data downloading and saving to be done in the background and being able to do a full replace update without the UI ever knowing.</p>\n<p>I chose to do it this way because MOCs are cheap, and it is simpler to implement than other setups like nested MOCs. You can read more about that on <a href=\"http://floriankugler.com/blog/2013/4/2/the-concurrent-core-data-stack\">Florian Kugler’s blog</a>.</p>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>I won’t get into the asynchronous downloading because there are several resources online that teach it:</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE\">Apple Documentation - Using NSURLConnection</a></li>\n<li><a href=\"http://codewithchris.com/tutorial-how-to-use-ios-nsurlconnection-by-example/\">Code With Chris - NSURLConnection By Example</a></li>\n</ul>\n<p>What I want to show is the actual Core Data code as I didn’t find any comprehensive examples online and Apple’s documentation on this topic is lacking.</p>\n<p>When I started the project, I checked off the Core Data option, which sets up the Core Data stack inside of your <strong>AppDelegate</strong> class.</p>\n<p><img src=\"http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/00a4880a-0c07-4435-bc95-78c84afb038b/00000336.png\" alt=\"\"></p>\n<p>After setting up my asynchronous <code>NSURLConnection</code>, in the delegate method, <code>connectionDidFinishLoading:connection</code>, this is where I was saving the data:</p>\n<pre><code>- (void)connectionDidFinishLoading:(NSURLConnection *)connection {\n    //prepare the data into an array of objects\n    NSData *data = [self dataForConnection:connection];\n    NSArray *objects = [self parseData:data];\n\n    //setup tempMoc\n    UIApplication *app = [UIApplication sharedApplication];\n    AppDelegate *appDelegate = (AppDelegate *)app.delegate;\n    self.moc = appDelegate.managedObjectContext;\n    NSPersistentStoreCoordinator *storeCoordinator = self.moc.persistentStoreCoordinator;\n    NSManagedObjectContext *tempMoc = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSPrivateQueueConcurrencyType];\n    tempMoc.persistentStoreCoordinator = storeCoordinator;\n\n    NSString *entityName = NSStringFromClass([Compatibility class]);\n\n    //specify the thread for the callback after all the saving is finished\n    __block dispatch_queue_t currentQ =  dispatch_get_current_queue();\n\n    //save and do anything else for this particular MOC on a background thread inside the block\n    [self.tempMoc performBlock:^{        \n        for (NSDictionary *newObjectDict in objects) {\n            Compatibility *object = [NSEntityDescription insertNewObjectForEntityForName:entityName inManagedObjectContext:self.tempMoc];\n            object.prod1 = newObjectDict[@&quot;prod1&quot;];\n            object.prod2 = newObjectDict[@&quot;prod2&quot;];\n            object.result = newObjectDict[@&quot;result&quot;];\n        }\n\n        //after all the stuff in the block is done, execute this block on the thread specified\n        dispatch_sync(currentQ, ^(){\n            [tempMoc save:nil];\n\n            //flip the switch\n            [self.moc lock];\n            [self.moc reset];\n            NSPersistentStore *store = storeCoordinator.persistentStores.lastObject;\n            NSURL *storeUrl = store.URL;\n            [storeCoordinator removePersistentStore:store error:nil];\n            [[NSFileManager defaultManager] removeItemAtURL:store.URL error:nil];\n            [storeCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:nil error:nil];\n            [self.moc unlock];\n            self.moc = tempMoc;\n            tempMoc = nil;\n        });\n    }];\n}\n</code></pre><p>Let’s go over the important parts here.</p>\n<p>When setting up your temporary MOC, to make sure to initialize it with <code>initWithConcurrencyType:NSPrivateQueueConcurrencyType</code> so it can open and manage its own background thread and queueing operations.</p>\n<p>To take advantage of this feature, you must use the asynchronous <code>peformBlock:</code> or synchronous <code>peformBlockAndWait:</code> methods. If you’re doing more complex things with your MOCs and <code>NSManagedObjects</code> within these blocks, pay attention to the documentation to ensure things don’t get messy. <a href=\"http://stackoverflow.com/a/2138332/1672161\">Here are some summary tips</a>.</p>\n<p>There is no built-in callback for these methods but there are several ways to go about it, I found best suited for my purposes the <code>dispatch_sync</code> method. Two others are described in the WWDC video mentioned at the bottom of this post if your needs are different.</p>\n<p>Flipping the switch requires getting the store and its URL, deleting the store, then creating a new store with the same URL. I learned this technique in <a href=\"http://stackoverflow.com/questions/1077810/delete-reset-all-entries-in-core-data\">this post</a>, and if you hook it up to a UIButton, its a convenient way to reset things while testing.</p>\n<p>Well, that’s it, I hope this was helpful.</p>\n<p>Oh, and if you’re working with multiple asynchronous NSURLConnections, I found <a href=\"http://stackoverflow.com/a/332483/1672161\">this post</a> to be very helpful.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li>WWDC 2012 Session 214 - Core Data Best Practices</li>\n<li><a href=\"http://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_sync\">Apple Documentation - Dispatch Sync</a></li>\n</ul>"},{"title":"iOS Modal Call Sequence","id":"35","date":"2014-12-11T02:45:39.000Z","_content":"\nI needed to call these methods manually for a custom modal transition with help of [this example code](https://github.com/soleares/SOLPresentingFun). Instead of relying on my memory of the sequence of calls view lifecycle delegate calls, I document them here. And it's nice to know they are consistent for both iOS 8 and 7.\n\n<!--more-->\n\n## Presenting the Modal\n\n1.  **Modal** viewDidLoad\n2.  **Presenter** viewWillDisappear:animated:\n3.  **Modal** viewWillAppear:animated:\n4.  **Modal** viewDidAppear:animated:\n5.  **Presenter** viewDidDisappear:animated:\n\n## Dismissing the Modal\n\n1.  **Modal** viewWillDisappear:animated:\n2.  **Presenter** viewWillAppear:animated:\n3.  **Presenter** viewDidAppear:animated:\n4.  **Modal** viewDidDisappear:animated:","source":"_posts/ios-modal-call-sequence.md","raw":"---\ntitle: iOS Modal Call Sequence\ntags:\n  - ios\nid: 35\ncategories:\n  - Uncategorized\ndate: 2014-12-10 21:45:39\n---\n\nI needed to call these methods manually for a custom modal transition with help of [this example code](https://github.com/soleares/SOLPresentingFun). Instead of relying on my memory of the sequence of calls view lifecycle delegate calls, I document them here. And it's nice to know they are consistent for both iOS 8 and 7.\n\n<!--more-->\n\n## Presenting the Modal\n\n1.  **Modal** viewDidLoad\n2.  **Presenter** viewWillDisappear:animated:\n3.  **Modal** viewWillAppear:animated:\n4.  **Modal** viewDidAppear:animated:\n5.  **Presenter** viewDidDisappear:animated:\n\n## Dismissing the Modal\n\n1.  **Modal** viewWillDisappear:animated:\n2.  **Presenter** viewWillAppear:animated:\n3.  **Presenter** viewDidAppear:animated:\n4.  **Modal** viewDidDisappear:animated:","slug":"ios-modal-call-sequence","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbswx000v3fysvuhgdq9n","content":"<p>I needed to call these methods manually for a custom modal transition with help of <a href=\"https://github.com/soleares/SOLPresentingFun\" target=\"_blank\" rel=\"external\">this example code</a>. Instead of relying on my memory of the sequence of calls view lifecycle delegate calls, I document them here. And it’s nice to know they are consistent for both iOS 8 and 7.</p>\n<a id=\"more\"></a>\n<h2 id=\"Presenting-the-Modal\"><a href=\"#Presenting-the-Modal\" class=\"headerlink\" title=\"Presenting the Modal\"></a>Presenting the Modal</h2><ol>\n<li><strong>Modal</strong> viewDidLoad</li>\n<li><strong>Presenter</strong> viewWillDisappear:animated:</li>\n<li><strong>Modal</strong> viewWillAppear:animated:</li>\n<li><strong>Modal</strong> viewDidAppear:animated:</li>\n<li><strong>Presenter</strong> viewDidDisappear:animated:</li>\n</ol>\n<h2 id=\"Dismissing-the-Modal\"><a href=\"#Dismissing-the-Modal\" class=\"headerlink\" title=\"Dismissing the Modal\"></a>Dismissing the Modal</h2><ol>\n<li><strong>Modal</strong> viewWillDisappear:animated:</li>\n<li><strong>Presenter</strong> viewWillAppear:animated:</li>\n<li><strong>Presenter</strong> viewDidAppear:animated:</li>\n<li><strong>Modal</strong> viewDidDisappear:animated:</li>\n</ol>\n","excerpt":"<p>I needed to call these methods manually for a custom modal transition with help of <a href=\"https://github.com/soleares/SOLPresentingFun\">this example code</a>. Instead of relying on my memory of the sequence of calls view lifecycle delegate calls, I document them here. And it’s nice to know they are consistent for both iOS 8 and 7.</p>","more":"<h2 id=\"Presenting-the-Modal\"><a href=\"#Presenting-the-Modal\" class=\"headerlink\" title=\"Presenting the Modal\"></a>Presenting the Modal</h2><ol>\n<li><strong>Modal</strong> viewDidLoad</li>\n<li><strong>Presenter</strong> viewWillDisappear:animated:</li>\n<li><strong>Modal</strong> viewWillAppear:animated:</li>\n<li><strong>Modal</strong> viewDidAppear:animated:</li>\n<li><strong>Presenter</strong> viewDidDisappear:animated:</li>\n</ol>\n<h2 id=\"Dismissing-the-Modal\"><a href=\"#Dismissing-the-Modal\" class=\"headerlink\" title=\"Dismissing the Modal\"></a>Dismissing the Modal</h2><ol>\n<li><strong>Modal</strong> viewWillDisappear:animated:</li>\n<li><strong>Presenter</strong> viewWillAppear:animated:</li>\n<li><strong>Presenter</strong> viewDidAppear:animated:</li>\n<li><strong>Modal</strong> viewDidDisappear:animated:</li>\n</ol>"},{"title":"iOS Testing Tips with Kiwi","id":"30","date":"2014-01-23T02:36:44.000Z","_content":"\nFor those getting to know [Kiwi](https://github.com/allending/Kiwi), as an iOS testing framework, here are a few tips.\n\n<!--more-->\n\nThis post assumes you're already familiar with the basics of Kiwi testing. For more information about Kiwi, you can look at the [Kiwi documentation](https://github.com/allending/Kiwi/wiki) or read [Test Driving iOS Development with Kiwi](http://editorscut.com/Books/001kiwi/001kiwi-details.html).\n\n## Private Methods/Properties\n\nBefore learning about this, we were exposing private methods and properties in order to test them. And felt dirty in the process. To avoid this, use is a class extension. In your test file, create an interface to the class that has the private stuff you need to test. Then simply declare any private methods/properties and voila!\n\n    #import \"Kiwi.h\"\n    #import \"SGStopWatch.h\"\n\n    @interface SGStopWatch (StopWatchTesting)\n    @property (nonatomic, strong) UILabel *clockLabel;\n    - (void)resetClockLabel;\n    @end\n\n    SPEC_BEGIN(StopWatchSpec)\n    `</pre>\n\n    ## Block Variables\n\n    As everything in Kiwi is done via blocks, if you like to reset the state by instantiating (or replacing) your variable inside of a block, you need to preface your variable declaration with `__block`. This is especially useful for any `beforeEach` blocks you create.\n\n    <pre>`describe(@\"Stopwatch\", ^{\n        context(@\"when stopped\", ^{\n                    __block SGStopWatch *stopWatch;\n                    beforeEach(^{\n                            stopWatch = [SGStopWatch new];\n                    });\n    `</pre>\n\n    ## Shortcut Tests\n\n    A quick and dirty tip, but worth mentioning. You can test for `nil` using shorthand like this: `[stopWatch shouldBeNil]` or `[stopWatch shouldNotBeNil]`\n\n    ## Pending Tests\n\n    If you like stubbing out tests, and then coming back to them later, you can mark your tests \"pending\" by starting them with `pending` instead of `it`. Pending tests are not actually tested, so it won't affect your overall test result. What I like about using `pending` is that it produces a yellow compiler warning so you won't forget about it.\n\n    <pre>`pending(@\"should not be nil\", ^{\n            //I\\'ll come back to this\n    });\n    ","source":"_posts/ios-testing-tips-kiwi.md","raw":"---\ntitle: iOS Testing Tips with Kiwi\ntags:\n  - ios\n  - testing\nid: 30\ncategories:\n  - Uncategorized\ndate: 2014-01-22 21:36:44\n---\n\nFor those getting to know [Kiwi](https://github.com/allending/Kiwi), as an iOS testing framework, here are a few tips.\n\n<!--more-->\n\nThis post assumes you're already familiar with the basics of Kiwi testing. For more information about Kiwi, you can look at the [Kiwi documentation](https://github.com/allending/Kiwi/wiki) or read [Test Driving iOS Development with Kiwi](http://editorscut.com/Books/001kiwi/001kiwi-details.html).\n\n## Private Methods/Properties\n\nBefore learning about this, we were exposing private methods and properties in order to test them. And felt dirty in the process. To avoid this, use is a class extension. In your test file, create an interface to the class that has the private stuff you need to test. Then simply declare any private methods/properties and voila!\n\n    #import \"Kiwi.h\"\n    #import \"SGStopWatch.h\"\n\n    @interface SGStopWatch (StopWatchTesting)\n    @property (nonatomic, strong) UILabel *clockLabel;\n    - (void)resetClockLabel;\n    @end\n\n    SPEC_BEGIN(StopWatchSpec)\n    `</pre>\n\n    ## Block Variables\n\n    As everything in Kiwi is done via blocks, if you like to reset the state by instantiating (or replacing) your variable inside of a block, you need to preface your variable declaration with `__block`. This is especially useful for any `beforeEach` blocks you create.\n\n    <pre>`describe(@\"Stopwatch\", ^{\n        context(@\"when stopped\", ^{\n                    __block SGStopWatch *stopWatch;\n                    beforeEach(^{\n                            stopWatch = [SGStopWatch new];\n                    });\n    `</pre>\n\n    ## Shortcut Tests\n\n    A quick and dirty tip, but worth mentioning. You can test for `nil` using shorthand like this: `[stopWatch shouldBeNil]` or `[stopWatch shouldNotBeNil]`\n\n    ## Pending Tests\n\n    If you like stubbing out tests, and then coming back to them later, you can mark your tests \"pending\" by starting them with `pending` instead of `it`. Pending tests are not actually tested, so it won't affect your overall test result. What I like about using `pending` is that it produces a yellow compiler warning so you won't forget about it.\n\n    <pre>`pending(@\"should not be nil\", ^{\n            //I\\'ll come back to this\n    });\n    ","slug":"ios-testing-tips-kiwi","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsx1000z3fyswwn94ei1","content":"<p>For those getting to know <a href=\"https://github.com/allending/Kiwi\" target=\"_blank\" rel=\"external\">Kiwi</a>, as an iOS testing framework, here are a few tips.</p>\n<a id=\"more\"></a>\n<p>This post assumes you’re already familiar with the basics of Kiwi testing. For more information about Kiwi, you can look at the <a href=\"https://github.com/allending/Kiwi/wiki\" target=\"_blank\" rel=\"external\">Kiwi documentation</a> or read <a href=\"http://editorscut.com/Books/001kiwi/001kiwi-details.html\" target=\"_blank\" rel=\"external\">Test Driving iOS Development with Kiwi</a>.</p>\n<h2 id=\"Private-Methods-Properties\"><a href=\"#Private-Methods-Properties\" class=\"headerlink\" title=\"Private Methods/Properties\"></a>Private Methods/Properties</h2><p>Before learning about this, we were exposing private methods and properties in order to test them. And felt dirty in the process. To avoid this, use is a class extension. In your test file, create an interface to the class that has the private stuff you need to test. Then simply declare any private methods/properties and voila!</p>\n<pre><code>#import &quot;Kiwi.h&quot;\n#import &quot;SGStopWatch.h&quot;\n\n@interface SGStopWatch (StopWatchTesting)\n@property (nonatomic, strong) UILabel *clockLabel;\n- (void)resetClockLabel;\n@end\n\nSPEC_BEGIN(StopWatchSpec)\n`&lt;/pre&gt;\n\n## Block Variables\n\nAs everything in Kiwi is done via blocks, if you like to reset the state by instantiating (or replacing) your variable inside of a block, you need to preface your variable declaration with `__block`. This is especially useful for any `beforeEach` blocks you create.\n\n&lt;pre&gt;`describe(@&quot;Stopwatch&quot;, ^{\n    context(@&quot;when stopped&quot;, ^{\n                __block SGStopWatch *stopWatch;\n                beforeEach(^{\n                        stopWatch = [SGStopWatch new];\n                });\n`&lt;/pre&gt;\n\n## Shortcut Tests\n\nA quick and dirty tip, but worth mentioning. You can test for `nil` using shorthand like this: `[stopWatch shouldBeNil]` or `[stopWatch shouldNotBeNil]`\n\n## Pending Tests\n\nIf you like stubbing out tests, and then coming back to them later, you can mark your tests &quot;pending&quot; by starting them with `pending` instead of `it`. Pending tests are not actually tested, so it won&apos;t affect your overall test result. What I like about using `pending` is that it produces a yellow compiler warning so you won&apos;t forget about it.\n\n&lt;pre&gt;`pending(@&quot;should not be nil&quot;, ^{\n        //I\\&apos;ll come back to this\n});\n</code></pre>","excerpt":"<p>For those getting to know <a href=\"https://github.com/allending/Kiwi\">Kiwi</a>, as an iOS testing framework, here are a few tips.</p>","more":"<p>This post assumes you’re already familiar with the basics of Kiwi testing. For more information about Kiwi, you can look at the <a href=\"https://github.com/allending/Kiwi/wiki\">Kiwi documentation</a> or read <a href=\"http://editorscut.com/Books/001kiwi/001kiwi-details.html\">Test Driving iOS Development with Kiwi</a>.</p>\n<h2 id=\"Private-Methods-Properties\"><a href=\"#Private-Methods-Properties\" class=\"headerlink\" title=\"Private Methods/Properties\"></a>Private Methods/Properties</h2><p>Before learning about this, we were exposing private methods and properties in order to test them. And felt dirty in the process. To avoid this, use is a class extension. In your test file, create an interface to the class that has the private stuff you need to test. Then simply declare any private methods/properties and voila!</p>\n<pre><code>#import &quot;Kiwi.h&quot;\n#import &quot;SGStopWatch.h&quot;\n\n@interface SGStopWatch (StopWatchTesting)\n@property (nonatomic, strong) UILabel *clockLabel;\n- (void)resetClockLabel;\n@end\n\nSPEC_BEGIN(StopWatchSpec)\n`&lt;/pre&gt;\n\n## Block Variables\n\nAs everything in Kiwi is done via blocks, if you like to reset the state by instantiating (or replacing) your variable inside of a block, you need to preface your variable declaration with `__block`. This is especially useful for any `beforeEach` blocks you create.\n\n&lt;pre&gt;`describe(@&quot;Stopwatch&quot;, ^{\n    context(@&quot;when stopped&quot;, ^{\n                __block SGStopWatch *stopWatch;\n                beforeEach(^{\n                        stopWatch = [SGStopWatch new];\n                });\n`&lt;/pre&gt;\n\n## Shortcut Tests\n\nA quick and dirty tip, but worth mentioning. You can test for `nil` using shorthand like this: `[stopWatch shouldBeNil]` or `[stopWatch shouldNotBeNil]`\n\n## Pending Tests\n\nIf you like stubbing out tests, and then coming back to them later, you can mark your tests &quot;pending&quot; by starting them with `pending` instead of `it`. Pending tests are not actually tested, so it won&apos;t affect your overall test result. What I like about using `pending` is that it produces a yellow compiler warning so you won&apos;t forget about it.\n\n&lt;pre&gt;`pending(@&quot;should not be nil&quot;, ^{\n        //I\\&apos;ll come back to this\n});\n</code></pre>"},{"title":"Liquid smooth iOS collection view scrolling with lots of images","id":"177","date":"2016-01-11T02:53:30.000Z","_content":"\nAn implementation of how I achieved smooth scrolling with lots of images that needed dynamic sizing and tinting.\n\n<!--more-->\n\n## tl;dr\n\nSkip to the **[Solution](#solution)** section for the implementation which includes all the code examples.\n\n## Problem\n\nOn a recent project, I had an issue with choppy scrolling in a couple of collection views which held a grid of images. It wasn't horrible, but noticeable enough, especially on slower phones.\n\n### Original implementation\n\nThe app has a domain object called a \"cue\". Each cue had an image associated with it and we wanted to render cues in the \"library\". Because the cues were static, they were placed in the asset catalog.\n\n    // CCLibraryViewController\n    - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n        CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([CCCueCell class]) forIndexPath:indexPath];\n        CCCue *cue = self.cues[indexPath.item];\n        [cell configureWithImage:[UIImage imageNamed:cue.name]];\n        return cell;\n    }\n\n    // CCCueCell\n    - (void)configureWithImage:(UIImage *)image {\n        self.imageView.image = image;\n        [CCHelper tintImageView:self.imageView withColor:kGreyColor];\n    }\n\n    // CCHelper\n    + (void)tintImageView:(UIImageView *)imageView withColor:(UIColor *)color {\n        UIImage *tintableImage = [imageView.image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n        imageView.image = tintableImage;\n        imageView.tintColor = color;\n    }\n    `</pre>\n\n    As you can see, everything is pretty straightforward here.\n\n    ### Sidebar:\n\n    I've learned since, that you can actually set your images' rendering mode directly in the asset catalog GUI:\n\n    ![Rendering mode for asset catalog images](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/ce8c5e04-7847-4b32-8ba2-ba22c45cc1dd/00000154.png)\n\n    ## Diagnosis\n\n    It turns out there were 3 implementation details that contributed to the performance issue.\n\n1.  Tinting\n2.  `UIImage imageNamed:`\n3.  Asset Catalog\n\n    So, basically the entire implementation :)\n\n    ### Tinting\n\n    I won't get into why tinting was required, but there was a work around by providing natively sets of natively tinted images. It certainly helped, but there was still a bit of scroll lag.\n\n    ### `UIImage imageNamed:`\n\n    If you do a search for [UIImage imageNamed performance](https://duckduckgo.com/?q=uiimage%20imagenamed%20performance), you'll get a lot of hits discussing problems with how Apple implements this. The key thing for our particular problem was that when an image instantiated this way is rendered by setting on a UIImageView, and because this must be done on the main (UI) queue, it causes a performance lag. It does this because the image must be decompressed at render time.\n\n    ### Asset Catalog\n\n    Based on the issues with `UIImage imageNamed:`, using the Asset Catalog was no longer an option. This wasn't really causing anything actually, but I prefer to use the Asset Catalog when I can.\n\n    ## Solution\n\n    The goal was to get perfectly liquid smooth scrolling every time, even on the first scroll. To achieve this, I implemented a caching strategy that I pieced together from my research on the issue. In a nutshell:\n\n1.  Place the images in the bundle, not the Asset Catalog.\n2.  When the app loads, start caching asynchronously.\n3.  Instantiate images using `UIImage imageWithContentsOfFile:` decompressing them and tint it as needed.\n4.  Wrap them in NSPurgeableData instances.\n5.  Use the images from the cache if available, otherwise create them and and cache them.\n\n    Let's go through all of this with actual code examples.\n\n    ### The cache\n\n    I used a simple NSCache object to provide automatic memory managed caching. Much preferred over NSDictionary. You can [read more about NSCache here](http://nshipster.com/nscache/).\n\n    <pre>`- (void)cacheSystemCueImages {\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n            for (CCSystemCue *cue in self.systemCues) {\n                NSString *key = [cue thumbnailCacheKey];\n                if ([self.systemCueImageCache objectForKey:key]) {\n                    continue;\n                }\n\n                CCDiscardableImage *discardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n                [self.systemCueImageCache setObject:discardable forKey:key];\n            }\n        });\n    }\n    `</pre>\n\n    Here you can see the caching done on a background queue so it doesn't block the UI. Each image is stored along with a unique key, used to retrieve it later. I'll get into what a CCDiscardableImage in a bit.\n\n    ### Instantiating the images\n\n    We need to use `UIImage imageWithContentsOfFile:` to avoid the pitfalls of `UIImage imageNamed:`. Namely, don't let the OS do the caching for us. We want to fully control how we cache our images, specifically, already decompressed and tinted, so when we're on the main queue, it's only a matter of rendering a pre-processed image.\n\n    <pre>`+ (CCDiscardableImage *)decompressedImageForPath:(NSString *)path size:(CGSize)size tintable:(BOOL)tintable {\n        UIImage *image = [UIImage imageWithContentsOfFile:path];\n        return [self decompressedImage:image forSize:[self screenScaledSize:size] tintable:tintable];\n    }\n\n    + (CGSize)screenScaledSize:(CGSize)size {\n        CGFloat scale = [UIScreen mainScreen].scale;\n        return CGSizeMake(size.width*scale, size.height*scale);\n    }\n\n    + (CCDiscardableImage *)decompressedImage:(UIImage *)image forSize:(CGSize)size tintable:(BOOL)tintable {\n        UIGraphicsBeginImageContext(size);\n        [image drawInRect:CGRectMake(0, 0, size.width, size.height)];\n        image = UIGraphicsGetImageFromCurrentImageContext();\n        UIGraphicsEndImageContext();\n\n        if (tintable) {\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n        }\n\n        return [[CCDiscardableImage alloc] initWithImage:image];\n    }\n    `</pre>\n\n    For us to store a fully decompressed image in the cache, which is what will help our performance, we need to provide the size at which it will be rendered at which is done by rendering it to a UIGraphicsImageContext and snapping an image from that.\n\n    ### CCDiscardableImage: NSPurgeableData\n\n    NSPurgeableData from the horse's mouth:\n\n    > You should use the NSPurgeableData class when you have objects with bytes that can be discarded when no longer needed.\n\n    You might be wondering why we'd need to do this since NSCache already manages itself. Well, it does, but in my testing, it doesn't behave optimally. If we used NSCache directly with UIImages, the cache would fill up. But if I backgrounded the app, and then foregrounded it again, the cache would be empty and have fill up again. To avoid this, I wrapped the images in NSPurgeableData:\n\n    <pre>`#import &lt;UIKit/UIKit.h&gt;\n\n    @interface CCDiscardableImage : NSPurgeableData\n    @property (readonly, strong, nonatomic) UIImage *image;\n    - (instancetype)initWithImage:(UIImage *)image;\n    @end\n    #import \"CCDiscardableImage.h\"\n\n    @interface CCDiscardableImage()\n    @property (strong, nonatomic) UIImage *image;\n    @end\n\n    @implementation CCDiscardableImage\n    - (instancetype)initWithImage:(UIImage *)image {\n        if (self = [super init]) {\n            _image = image;\n        }\n        return self;\n    }\n    @end\n    `</pre>\n\n    ### Using the image\n\n    I try to get the image from the cache first. If it's not there, I go through the same process as before to create it.\n\n    <pre>`- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n        NSString *reuseIdentifier = NSStringFromClass([CCCueCell class]);\n        CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseIdentifier forIndexPath:indexPath];\n        CCSystemCue *cue = self.cues[indexPath.item];\n\n        NSString *key = [cue thumbnailCacheKey];\n        BOOL isSelected = [self isSelectedIndexPath:indexPath];\n        CCDiscardableImage *cachedDiscardable = [self.cueImageCache objectForKey:key];\n        if (cachedDiscardable) {\n            [cell configureWithImage:cachedDiscardable.image isSelected:isSelected];\n            return cell;\n        }\n\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n            CCDiscardableImage *newDiscardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n            [self.cueImageCache setObject:newDiscardable forKey:key];\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n                if ([self isVisibleIndexPath:indexPath]) {\n                    [cell configureWithImage:newDiscardable.image isSelected:isSelected];\n                }\n            });\n        });\n\n        return cell;\n    }\n\n    - (void)configureWithImage:(UIImage *)image isSelected:(BOOL)isSelected {\n        self.imageView.image = image;\n        isSelected ? [self addBorder] : [self removeBorder];\n    }\n\nIf we need to create the image, we do that in the background again to not lock up the UI. But remember, we need to actually _render_ the image on the main queue, otherwise, the rendering will be delayed. Also, the we really only need to render the image if the cell is still visible on the screen. If the user is scrolling super fast, the cell might be hidden at this point in time, in which case, no need to render it. A simple additional optimization.\n\n## Conclusion\n\nThe resulting implementation worked out well. There was zero scroll lag because all the heavy lifting was now done in the background. And this was because we were able to cache fully decompressed images by not using `UIImage imageNamed:`. The worse case scenario was if the user was very speedy by opening the library view and immediately scrolling down fast. This would result in some cells appearing blank for a fraction of a second. But the scrolling would remain liquid smooth. I hope this post or perhaps one bit of it was helpful for you.\n\nHappy exploring!","source":"_posts/liquid-smooth-ios-collection-view-scrolling-lots-images.md","raw":"---\ntitle: Liquid smooth iOS collection view scrolling with lots of images\ntags:\n  - ios\n  - performance\nid: 177\ncategories:\n  - Uncategorized\ndate: 2016-01-10 21:53:30\n---\n\nAn implementation of how I achieved smooth scrolling with lots of images that needed dynamic sizing and tinting.\n\n<!--more-->\n\n## tl;dr\n\nSkip to the **[Solution](#solution)** section for the implementation which includes all the code examples.\n\n## Problem\n\nOn a recent project, I had an issue with choppy scrolling in a couple of collection views which held a grid of images. It wasn't horrible, but noticeable enough, especially on slower phones.\n\n### Original implementation\n\nThe app has a domain object called a \"cue\". Each cue had an image associated with it and we wanted to render cues in the \"library\". Because the cues were static, they were placed in the asset catalog.\n\n    // CCLibraryViewController\n    - (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n        CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([CCCueCell class]) forIndexPath:indexPath];\n        CCCue *cue = self.cues[indexPath.item];\n        [cell configureWithImage:[UIImage imageNamed:cue.name]];\n        return cell;\n    }\n\n    // CCCueCell\n    - (void)configureWithImage:(UIImage *)image {\n        self.imageView.image = image;\n        [CCHelper tintImageView:self.imageView withColor:kGreyColor];\n    }\n\n    // CCHelper\n    + (void)tintImageView:(UIImageView *)imageView withColor:(UIColor *)color {\n        UIImage *tintableImage = [imageView.image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n        imageView.image = tintableImage;\n        imageView.tintColor = color;\n    }\n    `</pre>\n\n    As you can see, everything is pretty straightforward here.\n\n    ### Sidebar:\n\n    I've learned since, that you can actually set your images' rendering mode directly in the asset catalog GUI:\n\n    ![Rendering mode for asset catalog images](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/ce8c5e04-7847-4b32-8ba2-ba22c45cc1dd/00000154.png)\n\n    ## Diagnosis\n\n    It turns out there were 3 implementation details that contributed to the performance issue.\n\n1.  Tinting\n2.  `UIImage imageNamed:`\n3.  Asset Catalog\n\n    So, basically the entire implementation :)\n\n    ### Tinting\n\n    I won't get into why tinting was required, but there was a work around by providing natively sets of natively tinted images. It certainly helped, but there was still a bit of scroll lag.\n\n    ### `UIImage imageNamed:`\n\n    If you do a search for [UIImage imageNamed performance](https://duckduckgo.com/?q=uiimage%20imagenamed%20performance), you'll get a lot of hits discussing problems with how Apple implements this. The key thing for our particular problem was that when an image instantiated this way is rendered by setting on a UIImageView, and because this must be done on the main (UI) queue, it causes a performance lag. It does this because the image must be decompressed at render time.\n\n    ### Asset Catalog\n\n    Based on the issues with `UIImage imageNamed:`, using the Asset Catalog was no longer an option. This wasn't really causing anything actually, but I prefer to use the Asset Catalog when I can.\n\n    ## Solution\n\n    The goal was to get perfectly liquid smooth scrolling every time, even on the first scroll. To achieve this, I implemented a caching strategy that I pieced together from my research on the issue. In a nutshell:\n\n1.  Place the images in the bundle, not the Asset Catalog.\n2.  When the app loads, start caching asynchronously.\n3.  Instantiate images using `UIImage imageWithContentsOfFile:` decompressing them and tint it as needed.\n4.  Wrap them in NSPurgeableData instances.\n5.  Use the images from the cache if available, otherwise create them and and cache them.\n\n    Let's go through all of this with actual code examples.\n\n    ### The cache\n\n    I used a simple NSCache object to provide automatic memory managed caching. Much preferred over NSDictionary. You can [read more about NSCache here](http://nshipster.com/nscache/).\n\n    <pre>`- (void)cacheSystemCueImages {\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n            for (CCSystemCue *cue in self.systemCues) {\n                NSString *key = [cue thumbnailCacheKey];\n                if ([self.systemCueImageCache objectForKey:key]) {\n                    continue;\n                }\n\n                CCDiscardableImage *discardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n                [self.systemCueImageCache setObject:discardable forKey:key];\n            }\n        });\n    }\n    `</pre>\n\n    Here you can see the caching done on a background queue so it doesn't block the UI. Each image is stored along with a unique key, used to retrieve it later. I'll get into what a CCDiscardableImage in a bit.\n\n    ### Instantiating the images\n\n    We need to use `UIImage imageWithContentsOfFile:` to avoid the pitfalls of `UIImage imageNamed:`. Namely, don't let the OS do the caching for us. We want to fully control how we cache our images, specifically, already decompressed and tinted, so when we're on the main queue, it's only a matter of rendering a pre-processed image.\n\n    <pre>`+ (CCDiscardableImage *)decompressedImageForPath:(NSString *)path size:(CGSize)size tintable:(BOOL)tintable {\n        UIImage *image = [UIImage imageWithContentsOfFile:path];\n        return [self decompressedImage:image forSize:[self screenScaledSize:size] tintable:tintable];\n    }\n\n    + (CGSize)screenScaledSize:(CGSize)size {\n        CGFloat scale = [UIScreen mainScreen].scale;\n        return CGSizeMake(size.width*scale, size.height*scale);\n    }\n\n    + (CCDiscardableImage *)decompressedImage:(UIImage *)image forSize:(CGSize)size tintable:(BOOL)tintable {\n        UIGraphicsBeginImageContext(size);\n        [image drawInRect:CGRectMake(0, 0, size.width, size.height)];\n        image = UIGraphicsGetImageFromCurrentImageContext();\n        UIGraphicsEndImageContext();\n\n        if (tintable) {\n            image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n        }\n\n        return [[CCDiscardableImage alloc] initWithImage:image];\n    }\n    `</pre>\n\n    For us to store a fully decompressed image in the cache, which is what will help our performance, we need to provide the size at which it will be rendered at which is done by rendering it to a UIGraphicsImageContext and snapping an image from that.\n\n    ### CCDiscardableImage: NSPurgeableData\n\n    NSPurgeableData from the horse's mouth:\n\n    > You should use the NSPurgeableData class when you have objects with bytes that can be discarded when no longer needed.\n\n    You might be wondering why we'd need to do this since NSCache already manages itself. Well, it does, but in my testing, it doesn't behave optimally. If we used NSCache directly with UIImages, the cache would fill up. But if I backgrounded the app, and then foregrounded it again, the cache would be empty and have fill up again. To avoid this, I wrapped the images in NSPurgeableData:\n\n    <pre>`#import &lt;UIKit/UIKit.h&gt;\n\n    @interface CCDiscardableImage : NSPurgeableData\n    @property (readonly, strong, nonatomic) UIImage *image;\n    - (instancetype)initWithImage:(UIImage *)image;\n    @end\n    #import \"CCDiscardableImage.h\"\n\n    @interface CCDiscardableImage()\n    @property (strong, nonatomic) UIImage *image;\n    @end\n\n    @implementation CCDiscardableImage\n    - (instancetype)initWithImage:(UIImage *)image {\n        if (self = [super init]) {\n            _image = image;\n        }\n        return self;\n    }\n    @end\n    `</pre>\n\n    ### Using the image\n\n    I try to get the image from the cache first. If it's not there, I go through the same process as before to create it.\n\n    <pre>`- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n        NSString *reuseIdentifier = NSStringFromClass([CCCueCell class]);\n        CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseIdentifier forIndexPath:indexPath];\n        CCSystemCue *cue = self.cues[indexPath.item];\n\n        NSString *key = [cue thumbnailCacheKey];\n        BOOL isSelected = [self isSelectedIndexPath:indexPath];\n        CCDiscardableImage *cachedDiscardable = [self.cueImageCache objectForKey:key];\n        if (cachedDiscardable) {\n            [cell configureWithImage:cachedDiscardable.image isSelected:isSelected];\n            return cell;\n        }\n\n        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n            CCDiscardableImage *newDiscardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n            [self.cueImageCache setObject:newDiscardable forKey:key];\n\n            dispatch_async(dispatch_get_main_queue(), ^{\n                if ([self isVisibleIndexPath:indexPath]) {\n                    [cell configureWithImage:newDiscardable.image isSelected:isSelected];\n                }\n            });\n        });\n\n        return cell;\n    }\n\n    - (void)configureWithImage:(UIImage *)image isSelected:(BOOL)isSelected {\n        self.imageView.image = image;\n        isSelected ? [self addBorder] : [self removeBorder];\n    }\n\nIf we need to create the image, we do that in the background again to not lock up the UI. But remember, we need to actually _render_ the image on the main queue, otherwise, the rendering will be delayed. Also, the we really only need to render the image if the cell is still visible on the screen. If the user is scrolling super fast, the cell might be hidden at this point in time, in which case, no need to render it. A simple additional optimization.\n\n## Conclusion\n\nThe resulting implementation worked out well. There was zero scroll lag because all the heavy lifting was now done in the background. And this was because we were able to cache fully decompressed images by not using `UIImage imageNamed:`. The worse case scenario was if the user was very speedy by opening the library view and immediately scrolling down fast. This would result in some cells appearing blank for a fraction of a second. But the scrolling would remain liquid smooth. I hope this post or perhaps one bit of it was helpful for you.\n\nHappy exploring!","slug":"liquid-smooth-ios-collection-view-scrolling-lots-images","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsx300113fysm7p1o2mq","content":"<p>An implementation of how I achieved smooth scrolling with lots of images that needed dynamic sizing and tinting.</p>\n<a id=\"more\"></a>\n<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Skip to the <strong><a href=\"#solution\">Solution</a></strong> section for the implementation which includes all the code examples.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>On a recent project, I had an issue with choppy scrolling in a couple of collection views which held a grid of images. It wasn’t horrible, but noticeable enough, especially on slower phones.</p>\n<h3 id=\"Original-implementation\"><a href=\"#Original-implementation\" class=\"headerlink\" title=\"Original implementation\"></a>Original implementation</h3><p>The app has a domain object called a “cue”. Each cue had an image associated with it and we wanted to render cues in the “library”. Because the cues were static, they were placed in the asset catalog.</p>\n<pre><code>// CCLibraryViewController\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([CCCueCell class]) forIndexPath:indexPath];\n    CCCue *cue = self.cues[indexPath.item];\n    [cell configureWithImage:[UIImage imageNamed:cue.name]];\n    return cell;\n}\n\n// CCCueCell\n- (void)configureWithImage:(UIImage *)image {\n    self.imageView.image = image;\n    [CCHelper tintImageView:self.imageView withColor:kGreyColor];\n}\n\n// CCHelper\n+ (void)tintImageView:(UIImageView *)imageView withColor:(UIColor *)color {\n    UIImage *tintableImage = [imageView.image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    imageView.image = tintableImage;\n    imageView.tintColor = color;\n}\n`&lt;/pre&gt;\n\nAs you can see, everything is pretty straightforward here.\n\n### Sidebar:\n\nI&apos;ve learned since, that you can actually set your images&apos; rendering mode directly in the asset catalog GUI:\n\n![Rendering mode for asset catalog images](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/ce8c5e04-7847-4b32-8ba2-ba22c45cc1dd/00000154.png)\n\n## Diagnosis\n\nIt turns out there were 3 implementation details that contributed to the performance issue.\n</code></pre><ol>\n<li>Tinting</li>\n<li><code>UIImage imageNamed:</code></li>\n<li><p>Asset Catalog</p>\n<p>So, basically the entire implementation :)</p>\n<h3 id=\"Tinting\"><a href=\"#Tinting\" class=\"headerlink\" title=\"Tinting\"></a>Tinting</h3><p>I won’t get into why tinting was required, but there was a work around by providing natively sets of natively tinted images. It certainly helped, but there was still a bit of scroll lag.</p>\n<h3 id=\"UIImage-imageNamed\"><a href=\"#UIImage-imageNamed\" class=\"headerlink\" title=\"UIImage imageNamed:\"></a><code>UIImage imageNamed:</code></h3><p>If you do a search for <a href=\"https://duckduckgo.com/?q=uiimage%20imagenamed%20performance\" target=\"_blank\" rel=\"external\">UIImage imageNamed performance</a>, you’ll get a lot of hits discussing problems with how Apple implements this. The key thing for our particular problem was that when an image instantiated this way is rendered by setting on a UIImageView, and because this must be done on the main (UI) queue, it causes a performance lag. It does this because the image must be decompressed at render time.</p>\n<h3 id=\"Asset-Catalog\"><a href=\"#Asset-Catalog\" class=\"headerlink\" title=\"Asset Catalog\"></a>Asset Catalog</h3><p>Based on the issues with <code>UIImage imageNamed:</code>, using the Asset Catalog was no longer an option. This wasn’t really causing anything actually, but I prefer to use the Asset Catalog when I can.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>The goal was to get perfectly liquid smooth scrolling every time, even on the first scroll. To achieve this, I implemented a caching strategy that I pieced together from my research on the issue. In a nutshell:</p>\n</li>\n<li><p>Place the images in the bundle, not the Asset Catalog.</p>\n</li>\n<li>When the app loads, start caching asynchronously.</li>\n<li>Instantiate images using <code>UIImage imageWithContentsOfFile:</code> decompressing them and tint it as needed.</li>\n<li>Wrap them in NSPurgeableData instances.</li>\n<li><p>Use the images from the cache if available, otherwise create them and and cache them.</p>\n<p>Let’s go through all of this with actual code examples.</p>\n<h3 id=\"The-cache\"><a href=\"#The-cache\" class=\"headerlink\" title=\"The cache\"></a>The cache</h3><p>I used a simple NSCache object to provide automatic memory managed caching. Much preferred over NSDictionary. You can <a href=\"http://nshipster.com/nscache/\" target=\"_blank\" rel=\"external\">read more about NSCache here</a>.</p>\n<pre>`- (void)cacheSystemCueImages {\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n        for (CCSystemCue *cue in self.systemCues) {\n            NSString *key = [cue thumbnailCacheKey];\n            if ([self.systemCueImageCache objectForKey:key]) {\n                continue;\n            }\n\n            CCDiscardableImage *discardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n            [self.systemCueImageCache setObject:discardable forKey:key];\n        }\n    });\n}\n`</pre>\n\n<p>Here you can see the caching done on a background queue so it doesn’t block the UI. Each image is stored along with a unique key, used to retrieve it later. I’ll get into what a CCDiscardableImage in a bit.</p>\n<h3 id=\"Instantiating-the-images\"><a href=\"#Instantiating-the-images\" class=\"headerlink\" title=\"Instantiating the images\"></a>Instantiating the images</h3><p>We need to use <code>UIImage imageWithContentsOfFile:</code> to avoid the pitfalls of <code>UIImage imageNamed:</code>. Namely, don’t let the OS do the caching for us. We want to fully control how we cache our images, specifically, already decompressed and tinted, so when we’re on the main queue, it’s only a matter of rendering a pre-processed image.</p>\n<pre>`+ (CCDiscardableImage *)decompressedImageForPath:(NSString *)path size:(CGSize)size tintable:(BOOL)tintable {\n    UIImage *image = [UIImage imageWithContentsOfFile:path];\n    return [self decompressedImage:image forSize:[self screenScaledSize:size] tintable:tintable];\n}\n\n+ (CGSize)screenScaledSize:(CGSize)size {\n    CGFloat scale = [UIScreen mainScreen].scale;\n    return CGSizeMake(size.width*scale, size.height*scale);\n}\n\n+ (CCDiscardableImage *)decompressedImage:(UIImage *)image forSize:(CGSize)size tintable:(BOOL)tintable {\n    UIGraphicsBeginImageContext(size);\n    [image drawInRect:CGRectMake(0, 0, size.width, size.height)];\n    image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n\n    if (tintable) {\n        image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    }\n\n    return [[CCDiscardableImage alloc] initWithImage:image];\n}\n`</pre>\n\n<p>For us to store a fully decompressed image in the cache, which is what will help our performance, we need to provide the size at which it will be rendered at which is done by rendering it to a UIGraphicsImageContext and snapping an image from that.</p>\n<h3 id=\"CCDiscardableImage-NSPurgeableData\"><a href=\"#CCDiscardableImage-NSPurgeableData\" class=\"headerlink\" title=\"CCDiscardableImage: NSPurgeableData\"></a>CCDiscardableImage: NSPurgeableData</h3><p>NSPurgeableData from the horse’s mouth:</p>\n<blockquote>\n<p>You should use the NSPurgeableData class when you have objects with bytes that can be discarded when no longer needed.</p>\n</blockquote>\n<p>You might be wondering why we’d need to do this since NSCache already manages itself. Well, it does, but in my testing, it doesn’t behave optimally. If we used NSCache directly with UIImages, the cache would fill up. But if I backgrounded the app, and then foregrounded it again, the cache would be empty and have fill up again. To avoid this, I wrapped the images in NSPurgeableData:</p>\n<pre>`#import &lt;UIKit/UIKit.h&gt;\n\n@interface CCDiscardableImage : NSPurgeableData\n@property (readonly, strong, nonatomic) UIImage *image;\n- (instancetype)initWithImage:(UIImage *)image;\n@end\n#import \"CCDiscardableImage.h\"\n\n@interface CCDiscardableImage()\n@property (strong, nonatomic) UIImage *image;\n@end\n\n@implementation CCDiscardableImage\n- (instancetype)initWithImage:(UIImage *)image {\n    if (self = [super init]) {\n        _image = image;\n    }\n    return self;\n}\n@end\n`</pre>\n\n<h3 id=\"Using-the-image\"><a href=\"#Using-the-image\" class=\"headerlink\" title=\"Using the image\"></a>Using the image</h3><p>I try to get the image from the cache first. If it’s not there, I go through the same process as before to create it.</p>\n<p><pre>`- (UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {</pre></p>\n<pre><code>NSString *reuseIdentifier = NSStringFromClass([CCCueCell class]);\nCCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseIdentifier forIndexPath:indexPath];\nCCSystemCue *cue = self.cues[indexPath.item];\n\nNSString *key = [cue thumbnailCacheKey];\nBOOL isSelected = [self isSelectedIndexPath:indexPath];\nCCDiscardableImage *cachedDiscardable = [self.cueImageCache objectForKey:key];\nif (cachedDiscardable) {\n    [cell configureWithImage:cachedDiscardable.image isSelected:isSelected];\n    return cell;\n}\n\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n    CCDiscardableImage *newDiscardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n    [self.cueImageCache setObject:newDiscardable forKey:key];\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        if ([self isVisibleIndexPath:indexPath]) {\n            [cell configureWithImage:newDiscardable.image isSelected:isSelected];\n        }\n    });\n});\n\nreturn cell;\n</code></pre><p>}</p>\n<ul>\n<li>(void)configureWithImage:(UIImage *)image isSelected:(BOOL)isSelected {<br>  self.imageView.image = image;<br>  isSelected ? [self addBorder] : [self removeBorder];<br>}</li>\n</ul>\n</li>\n</ol>\n<p>If we need to create the image, we do that in the background again to not lock up the UI. But remember, we need to actually <em>render</em> the image on the main queue, otherwise, the rendering will be delayed. Also, the we really only need to render the image if the cell is still visible on the screen. If the user is scrolling super fast, the cell might be hidden at this point in time, in which case, no need to render it. A simple additional optimization.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The resulting implementation worked out well. There was zero scroll lag because all the heavy lifting was now done in the background. And this was because we were able to cache fully decompressed images by not using <code>UIImage imageNamed:</code>. The worse case scenario was if the user was very speedy by opening the library view and immediately scrolling down fast. This would result in some cells appearing blank for a fraction of a second. But the scrolling would remain liquid smooth. I hope this post or perhaps one bit of it was helpful for you.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>An implementation of how I achieved smooth scrolling with lots of images that needed dynamic sizing and tinting.</p>","more":"<h2 id=\"tl-dr\"><a href=\"#tl-dr\" class=\"headerlink\" title=\"tl;dr\"></a>tl;dr</h2><p>Skip to the <strong><a href=\"#solution\">Solution</a></strong> section for the implementation which includes all the code examples.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>On a recent project, I had an issue with choppy scrolling in a couple of collection views which held a grid of images. It wasn’t horrible, but noticeable enough, especially on slower phones.</p>\n<h3 id=\"Original-implementation\"><a href=\"#Original-implementation\" class=\"headerlink\" title=\"Original implementation\"></a>Original implementation</h3><p>The app has a domain object called a “cue”. Each cue had an image associated with it and we wanted to render cues in the “library”. Because the cues were static, they were placed in the asset catalog.</p>\n<pre><code>// CCLibraryViewController\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {\n    CCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([CCCueCell class]) forIndexPath:indexPath];\n    CCCue *cue = self.cues[indexPath.item];\n    [cell configureWithImage:[UIImage imageNamed:cue.name]];\n    return cell;\n}\n\n// CCCueCell\n- (void)configureWithImage:(UIImage *)image {\n    self.imageView.image = image;\n    [CCHelper tintImageView:self.imageView withColor:kGreyColor];\n}\n\n// CCHelper\n+ (void)tintImageView:(UIImageView *)imageView withColor:(UIColor *)color {\n    UIImage *tintableImage = [imageView.image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    imageView.image = tintableImage;\n    imageView.tintColor = color;\n}\n`&lt;/pre&gt;\n\nAs you can see, everything is pretty straightforward here.\n\n### Sidebar:\n\nI&apos;ve learned since, that you can actually set your images&apos; rendering mode directly in the asset catalog GUI:\n\n![Rendering mode for asset catalog images](http://content.screencast.com/users/SundeepG/folders/Do%20not%20delete/media/ce8c5e04-7847-4b32-8ba2-ba22c45cc1dd/00000154.png)\n\n## Diagnosis\n\nIt turns out there were 3 implementation details that contributed to the performance issue.\n</code></pre><ol>\n<li>Tinting</li>\n<li><code>UIImage imageNamed:</code></li>\n<li><p>Asset Catalog</p>\n<p>So, basically the entire implementation :)</p>\n<h3 id=\"Tinting\"><a href=\"#Tinting\" class=\"headerlink\" title=\"Tinting\"></a>Tinting</h3><p>I won’t get into why tinting was required, but there was a work around by providing natively sets of natively tinted images. It certainly helped, but there was still a bit of scroll lag.</p>\n<h3 id=\"UIImage-imageNamed\"><a href=\"#UIImage-imageNamed\" class=\"headerlink\" title=\"UIImage imageNamed:\"></a><code>UIImage imageNamed:</code></h3><p>If you do a search for <a href=\"https://duckduckgo.com/?q=uiimage%20imagenamed%20performance\">UIImage imageNamed performance</a>, you’ll get a lot of hits discussing problems with how Apple implements this. The key thing for our particular problem was that when an image instantiated this way is rendered by setting on a UIImageView, and because this must be done on the main (UI) queue, it causes a performance lag. It does this because the image must be decompressed at render time.</p>\n<h3 id=\"Asset-Catalog\"><a href=\"#Asset-Catalog\" class=\"headerlink\" title=\"Asset Catalog\"></a>Asset Catalog</h3><p>Based on the issues with <code>UIImage imageNamed:</code>, using the Asset Catalog was no longer an option. This wasn’t really causing anything actually, but I prefer to use the Asset Catalog when I can.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>The goal was to get perfectly liquid smooth scrolling every time, even on the first scroll. To achieve this, I implemented a caching strategy that I pieced together from my research on the issue. In a nutshell:</p>\n</li>\n<li><p>Place the images in the bundle, not the Asset Catalog.</p>\n</li>\n<li>When the app loads, start caching asynchronously.</li>\n<li>Instantiate images using <code>UIImage imageWithContentsOfFile:</code> decompressing them and tint it as needed.</li>\n<li>Wrap them in NSPurgeableData instances.</li>\n<li><p>Use the images from the cache if available, otherwise create them and and cache them.</p>\n<p>Let’s go through all of this with actual code examples.</p>\n<h3 id=\"The-cache\"><a href=\"#The-cache\" class=\"headerlink\" title=\"The cache\"></a>The cache</h3><p>I used a simple NSCache object to provide automatic memory managed caching. Much preferred over NSDictionary. You can <a href=\"http://nshipster.com/nscache/\">read more about NSCache here</a>.</p>\n<pre>`- (void)cacheSystemCueImages {\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n        for (CCSystemCue *cue in self.systemCues) {\n            NSString *key = [cue thumbnailCacheKey];\n            if ([self.systemCueImageCache objectForKey:key]) {\n                continue;\n            }\n\n            CCDiscardableImage *discardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n            [self.systemCueImageCache setObject:discardable forKey:key];\n        }\n    });\n}\n`</pre>\n\n<p>Here you can see the caching done on a background queue so it doesn’t block the UI. Each image is stored along with a unique key, used to retrieve it later. I’ll get into what a CCDiscardableImage in a bit.</p>\n<h3 id=\"Instantiating-the-images\"><a href=\"#Instantiating-the-images\" class=\"headerlink\" title=\"Instantiating the images\"></a>Instantiating the images</h3><p>We need to use <code>UIImage imageWithContentsOfFile:</code> to avoid the pitfalls of <code>UIImage imageNamed:</code>. Namely, don’t let the OS do the caching for us. We want to fully control how we cache our images, specifically, already decompressed and tinted, so when we’re on the main queue, it’s only a matter of rendering a pre-processed image.</p>\n<pre>`+ (CCDiscardableImage *)decompressedImageForPath:(NSString *)path size:(CGSize)size tintable:(BOOL)tintable {\n    UIImage *image = [UIImage imageWithContentsOfFile:path];\n    return [self decompressedImage:image forSize:[self screenScaledSize:size] tintable:tintable];\n}\n\n+ (CGSize)screenScaledSize:(CGSize)size {\n    CGFloat scale = [UIScreen mainScreen].scale;\n    return CGSizeMake(size.width*scale, size.height*scale);\n}\n\n+ (CCDiscardableImage *)decompressedImage:(UIImage *)image forSize:(CGSize)size tintable:(BOOL)tintable {\n    UIGraphicsBeginImageContext(size);\n    [image drawInRect:CGRectMake(0, 0, size.width, size.height)];\n    image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n\n    if (tintable) {\n        image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];\n    }\n\n    return [[CCDiscardableImage alloc] initWithImage:image];\n}\n`</pre>\n\n<p>For us to store a fully decompressed image in the cache, which is what will help our performance, we need to provide the size at which it will be rendered at which is done by rendering it to a UIGraphicsImageContext and snapping an image from that.</p>\n<h3 id=\"CCDiscardableImage-NSPurgeableData\"><a href=\"#CCDiscardableImage-NSPurgeableData\" class=\"headerlink\" title=\"CCDiscardableImage: NSPurgeableData\"></a>CCDiscardableImage: NSPurgeableData</h3><p>NSPurgeableData from the horse’s mouth:</p>\n<blockquote>\n<p>You should use the NSPurgeableData class when you have objects with bytes that can be discarded when no longer needed.</p>\n</blockquote>\n<p>You might be wondering why we’d need to do this since NSCache already manages itself. Well, it does, but in my testing, it doesn’t behave optimally. If we used NSCache directly with UIImages, the cache would fill up. But if I backgrounded the app, and then foregrounded it again, the cache would be empty and have fill up again. To avoid this, I wrapped the images in NSPurgeableData:</p>\n<pre>`#import &lt;UIKit/UIKit.h&gt;\n\n@interface CCDiscardableImage : NSPurgeableData\n@property (readonly, strong, nonatomic) UIImage *image;\n- (instancetype)initWithImage:(UIImage *)image;\n@end\n#import \"CCDiscardableImage.h\"\n\n@interface CCDiscardableImage()\n@property (strong, nonatomic) UIImage *image;\n@end\n\n@implementation CCDiscardableImage\n- (instancetype)initWithImage:(UIImage *)image {\n    if (self = [super init]) {\n        _image = image;\n    }\n    return self;\n}\n@end\n`</pre>\n\n<h3 id=\"Using-the-image\"><a href=\"#Using-the-image\" class=\"headerlink\" title=\"Using the image\"></a>Using the image</h3><p>I try to get the image from the cache first. If it’s not there, I go through the same process as before to create it.</p>\n<p><pre>`- (UICollectionViewCell <em>)collectionView:(UICollectionView </em>)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {</p>\n<pre><code>NSString *reuseIdentifier = NSStringFromClass([CCCueCell class]);\nCCCueCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:reuseIdentifier forIndexPath:indexPath];\nCCSystemCue *cue = self.cues[indexPath.item];\n\nNSString *key = [cue thumbnailCacheKey];\nBOOL isSelected = [self isSelectedIndexPath:indexPath];\nCCDiscardableImage *cachedDiscardable = [self.cueImageCache objectForKey:key];\nif (cachedDiscardable) {\n    [cell configureWithImage:cachedDiscardable.image isSelected:isSelected];\n    return cell;\n}\n\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{\n    CCDiscardableImage *newDiscardable = [CCHelper decompressedImageForPath:[cue imagePath] size:[cue thumbnailSize] tintable:[cue tintable]];\n    [self.cueImageCache setObject:newDiscardable forKey:key];\n\n    dispatch_async(dispatch_get_main_queue(), ^{\n        if ([self isVisibleIndexPath:indexPath]) {\n            [cell configureWithImage:newDiscardable.image isSelected:isSelected];\n        }\n    });\n});\n\nreturn cell;\n</code></pre><p>}</p>\n<ul>\n<li>(void)configureWithImage:(UIImage *)image isSelected:(BOOL)isSelected {<br>  self.imageView.image = image;<br>  isSelected ? [self addBorder] : [self removeBorder];<br>}</li>\n</ul>\n</li>\n</ol>\n<p>If we need to create the image, we do that in the background again to not lock up the UI. But remember, we need to actually <em>render</em> the image on the main queue, otherwise, the rendering will be delayed. Also, the we really only need to render the image if the cell is still visible on the screen. If the user is scrolling super fast, the cell might be hidden at this point in time, in which case, no need to render it. A simple additional optimization.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The resulting implementation worked out well. There was zero scroll lag because all the heavy lifting was now done in the background. And this was because we were able to cache fully decompressed images by not using <code>UIImage imageNamed:</code>. The worse case scenario was if the user was very speedy by opening the library view and immediately scrolling down fast. This would result in some cells appearing blank for a fraction of a second. But the scrolling would remain liquid smooth. I hope this post or perhaps one bit of it was helpful for you.</p>\n<p>Happy exploring!</p>"},{"title":"The Longest Variable Name Ever!","id":"21","date":"2013-06-18T00:51:50.000Z","_content":"\nIs this the longest variable name ever?\n\n<!--more-->\n\nI found this while working on a client project. The client uses an eCommerce software (which I won't name here), and while debugging an issue, I ran into this bad boy:\n\n[![](http://i.imgur.com/NXSnoxK.png \"Long variable name\")](http://i.imgur.com/NXSnoxK.png)\n\nI know self-documenting code is good, and sometimes that involves long names, but this is ridiculous. It is obvious there are deeper issues at hand here. As you can see, there are three logical inferences built into this single boolean variable with words \"Is\", \"ButHasNo\" and \"Yet\". Not to mention a host of other information.\n\nI hope I never run into anything longer than this.","source":"_posts/longest-variable-name-ever.md","raw":"---\ntitle: The Longest Variable Name Ever!\ntags:\n  - fun\nid: 21\ncategories:\n  - Uncategorized\ndate: 2013-06-17 20:51:50\n---\n\nIs this the longest variable name ever?\n\n<!--more-->\n\nI found this while working on a client project. The client uses an eCommerce software (which I won't name here), and while debugging an issue, I ran into this bad boy:\n\n[![](http://i.imgur.com/NXSnoxK.png \"Long variable name\")](http://i.imgur.com/NXSnoxK.png)\n\nI know self-documenting code is good, and sometimes that involves long names, but this is ridiculous. It is obvious there are deeper issues at hand here. As you can see, there are three logical inferences built into this single boolean variable with words \"Is\", \"ButHasNo\" and \"Yet\". Not to mention a host of other information.\n\nI hope I never run into anything longer than this.","slug":"longest-variable-name-ever","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsx500143fysmfziwjsz","content":"<p>Is this the longest variable name ever?</p>\n<a id=\"more\"></a>\n<p>I found this while working on a client project. The client uses an eCommerce software (which I won’t name here), and while debugging an issue, I ran into this bad boy:</p>\n<p><a href=\"http://i.imgur.com/NXSnoxK.png\" target=\"_blank\" rel=\"external\"><img src=\"http://i.imgur.com/NXSnoxK.png\" alt=\"\" title=\"Long variable name\"></a></p>\n<p>I know self-documenting code is good, and sometimes that involves long names, but this is ridiculous. It is obvious there are deeper issues at hand here. As you can see, there are three logical inferences built into this single boolean variable with words “Is”, “ButHasNo” and “Yet”. Not to mention a host of other information.</p>\n<p>I hope I never run into anything longer than this.</p>\n","excerpt":"<p>Is this the longest variable name ever?</p>","more":"<p>I found this while working on a client project. The client uses an eCommerce software (which I won’t name here), and while debugging an issue, I ran into this bad boy:</p>\n<p><a href=\"http://i.imgur.com/NXSnoxK.png\"><img src=\"http://i.imgur.com/NXSnoxK.png\" alt=\"\" title=\"Long variable name\"></a></p>\n<p>I know self-documenting code is good, and sometimes that involves long names, but this is ridiculous. It is obvious there are deeper issues at hand here. As you can see, there are three logical inferences built into this single boolean variable with words “Is”, “ButHasNo” and “Yet”. Not to mention a host of other information.</p>\n<p>I hope I never run into anything longer than this.</p>"},{"title":"Making sure you get paid by your clients","id":"113","date":"2015-02-15T19:19:38.000Z","_content":"\n![](http://i.imgur.com/BZbTcMz.jpg)\n\nThrough my experiences running a business and freelancing, I've accumulated some best practices to help protect me from non-paying clients.\n\n<!--more-->\n\n#### Disclaimer\n\nI’m not a lawyer. This post is me sharing best practices from my own personal experiences. You should consult your lawyer if you need legal advice.\n\n## Background\n\nYou could call this a complimentary post to [Mike Monteiro’s \"F*ck You, Pay Me\" talk](http://vimeo.com/22053820). This post is complimentary because here I describe many concrete things I learned to do to protect myself from clients who don’t pay. The following is about choosing the right clients, terms to consider for your contract, and practical tips on engaging and working with your client. I’m not suggesting you need to follow everything I write about here. Do what makes sense for your situation.\n\n### Not getting paid really sucks\n\nPart of the motivation to write about this is because when you don’t get paid, it really sucks, especially when you freelance. You personally and directly do the work and you put your heart into it. A lot of times, you become friends with your client, intended or not. So when they stop paying you, it can really burn. Lets not forget that it affects your financial life which puts strain on you and your family.\n\n## Work with the right clients\n\nWhen you work with the right clients, you’re less likely to have payment issues in the first place. Client selection is worth at least a blog post or probably a book on its own. Not only is it important from a payment risk perspective, but also extremely important for your business as a whole.\n\nThis might be obvious, but its worth outlining the rationale here. If you work with the right client, you’ll be solving a problem for the client, thus you’ll be making/saving your client money. If you have the right client, you’ll be in control of the project which means you'll perform at your best. All of these things add up to your client being _happy_ to pay you. Obviously this isn’t a guarantee, but its your first big step in minimizing your payment risk (and helping grow your business).\n\nSelecting the right client is one of the hardest things to do. One book that helped me gain more clarity on this subject is [The Win Without Pitching Manifesto by Blair Enns](https://www.winwithoutpitching.com).\n\n### Questions for clients\n\nFrom a money point of view, if you’re interested in reducing payment risk, you can get a pretty good picture of the risk you’ll be taking by digging a bit deeper into the client. Here are some questions that you may want answered when prospecting:\n\n*   How long have they been in business? The longer, the more of a reputation they'll want to uphold.\n*   How viable is there cash flow? Do they make sales? What are their cash sources? Startups obviously are more risky, especially if they are dependent only on investment cash.*   What is the project? Is it meant to go into production or is it experimental? How valuable is it to the client? Basically, how worthy is the project? If the project doesn't add value to their business, they won't care as much or worse may abondon it after it starts.*   How large is the project? Does it fit the business/people? If the project is really big, it might be too ambitious for them, and can quickly fall apart. People are much less motivated to pay into a failed project.\n\nKeeping these questions in mind will help you evaluate the riskiness of the client, project and their ability to pay you.\n\n## The contract\n\nIf you’re asking yourself, if you need a contract as a freelancer, the answer is a big “YES”. I recommend watching [Mike Monteiro’s talk](http://vimeo.com/22053820) if you have this question or aren't fully convinced.\n\nOnce you’ve found the right client, you'll both want to be crystal clear on the project, but also the money stuff too. Describing money issues in the contract is absolutely necessary in order to protect yourself. This is the _only thing_ that you'll have to stand on if your financial relationship goes sour because it’s the only thing the courts will care about.\n\n> Once you’ve decided to work with a client, the contract is the only thing that can protect you from non-payment.\n\nMore importantly, however, is that formally agreeing to these terms sets up clear expectations in the client’s mind as to what their responsibilities are. If you have the contract right, getting paid will be a lot easier.\n\n### Contract terms\n\nWhat kind of terms do I need in the contract? The quick and dirty answer is: everything that’s important to you. I never really knew what was important to me until I had more experience, especially after a client didn't pay.\n\nThere are several resources online with contract templates including [The Freelancers Union Contract Creator](https://www.freelancersunion.org/contract-creator/). It’s likely that they won’t include everything that’s important to you, so here are the things that I considered for my own contracts based on my experiences:\n\n*   Collect a deposit to kick things off. And get it via cheque so you can capture their bank info. Bank info is helpful in case you need to sue and garnish their bank account. On a practical level, a deposit shows the client has some cash, and is serious about working with you.\n*   Specify pricing like billing rates and quotes.\n*   Describe how and when you should be paid. For example, every week within 7 days of the invoice date via bank transfer. This is very important. I never used to put this here, and then I’d always be playing catch-up with the client. Putting this stuff in the contract is the difference between asking for payment and reminding them about payment.*   Specify that if payment is not made according to the terms above, that the code/work/software remains your property. Further, that the code/work will not be given to the client. This gives you practical leverage.*   How subcontractors are dealt with. This may not be important to you, but for some larger projects I hired my own subcontractors. Spell it out in the contract if you need this flexibility and what the policy will be. One thing worth considering is protecting yourself from the client “stealing” away your subcontractor or visa-versa. By the way, having a contract with your subcontractor is something you should also have.*   All code, software and work remains your property until fully paid for.\n*   If your client is a corporation, that means the people signing the contract aren’t actually personally responsible for paying. They may be Mr. or Ms. Moneybags, but if their corporation doesn’t pay you, tough luck. To avoid this, situation, add a personal guarantee into the contract that ensures if the corporation doesn’t pay, the people will.\n\nI should also mention that it is completely acceptable to put terms on your invoice template as well, so again, if it's important, go ahead and do it.\n\n### Who’s contract?\n\nIts not really a question of yours or theirs, because it is a shared thing. The contract binds both of you. Obviously it’s easier to use your own because it’ll already have the terms important to you. If this is not possible though, you’ll need to do more work and ensure all the terms you want are in there. You'll also have to comb through the client's terms to make sure they are reasonable. In this case, you may want to consider a lawyer's expertise to help with any hardcore legal stuff.\n\n## Practical tips to keep the cash flowing\n\nBased on my experience, and depending on your situation, here are some more best practices I’ve learned along the way.\n\n### Get paid upfront\n\nIf you can, do it. End of story. I haven't actually tried this but a friend does this with some of his clients so I know its reasonable to to do. The client would pay you in advance for a set amount of billable time, say two weeks. Then you’d work for two weeks and stop until the client pays again. Obviously, this is an ideal situation and really does nip the problem in the bud. The drawbacks are that it may be used as negotiating leverage for the other terms of the engagement, like your rate for example. And I would imagine it's harder to find clients willing to do this.\n\n### Control the code\n\nMaybe the best thing I've learned is to use your own code repository. One that the client cannot access. This is not always possible, but if it is, it's worth the extra overhead. It’s a free, built-in protective measure to use as leverage against non-payment. If they don’t pay, they know they won’t get the code.\n\n### Due diligence\n\nWhen I hear this term I think of a corporate takeover, but what I’m trying to say here check the facts. Is the company who they say they are? Is the person you’re dealing with legitimately employed there? Do they have signing authority? Is their address correct? This is good to do because it'll tell you if they lied about anything and how their business is setup. You'll need to know this for when the contract is made. There are companies that do this in case it makes sense for you to outsource it.\n\n#### Credit checks\n\nWhen your client pays _after_ you do the work, you're really extending credit to them. Part of your due diligence process might be to do a formal credit check. Internet searching will bring you lots of reading on this aspect but at a high level, it involves collecting their bank info, names, addresses, credit references, and permission to contact these people to verify their credit worthiness. Part of that process can involve getting a credit report from [Dunn &amp; Bradstreet](http://www.dnb.com) or similar corporate reporting agency.\n\n### Be transparent\n\nYou’re probably already transparent about your work on the project and it should be the same about money issues. I learned this the hard way and screwed up exiting a project because I wasn’t transparent about the client’s payment issues. It ended up with a bunch of money lost.\n\nWhat I learned is I should simply communicate payment issues plainly. Its a touchy subject, so use discretion and judgement but do not be afraid to bring it up. Be clear and direct about it. Your confidence about money will make them feel better about you, not worse. If they’re starting to be late on payments, let them know that payments need to be made according to what you agreed to. Its hard, but if you can learn how to do this, you'll be a better freelancer for it and lose less money.\n\n## Wrap up\n\nDoing software development work for people is truly a joy. Its a shame that some clients just don't or can't pay for the heart and soul we put into solving their problems. I hope this can serve as a guide for making sure you get paid by your clients.\n\nHappy exploring!","source":"_posts/making-sure-you-get-paid-by-your-clients.md","raw":"---\ntitle: Making sure you get paid by your clients\ntags:\n  - business\n  - consulting\nid: 113\ncategories:\n  - Uncategorized\ndate: 2015-02-15 14:19:38\n---\n\n![](http://i.imgur.com/BZbTcMz.jpg)\n\nThrough my experiences running a business and freelancing, I've accumulated some best practices to help protect me from non-paying clients.\n\n<!--more-->\n\n#### Disclaimer\n\nI’m not a lawyer. This post is me sharing best practices from my own personal experiences. You should consult your lawyer if you need legal advice.\n\n## Background\n\nYou could call this a complimentary post to [Mike Monteiro’s \"F*ck You, Pay Me\" talk](http://vimeo.com/22053820). This post is complimentary because here I describe many concrete things I learned to do to protect myself from clients who don’t pay. The following is about choosing the right clients, terms to consider for your contract, and practical tips on engaging and working with your client. I’m not suggesting you need to follow everything I write about here. Do what makes sense for your situation.\n\n### Not getting paid really sucks\n\nPart of the motivation to write about this is because when you don’t get paid, it really sucks, especially when you freelance. You personally and directly do the work and you put your heart into it. A lot of times, you become friends with your client, intended or not. So when they stop paying you, it can really burn. Lets not forget that it affects your financial life which puts strain on you and your family.\n\n## Work with the right clients\n\nWhen you work with the right clients, you’re less likely to have payment issues in the first place. Client selection is worth at least a blog post or probably a book on its own. Not only is it important from a payment risk perspective, but also extremely important for your business as a whole.\n\nThis might be obvious, but its worth outlining the rationale here. If you work with the right client, you’ll be solving a problem for the client, thus you’ll be making/saving your client money. If you have the right client, you’ll be in control of the project which means you'll perform at your best. All of these things add up to your client being _happy_ to pay you. Obviously this isn’t a guarantee, but its your first big step in minimizing your payment risk (and helping grow your business).\n\nSelecting the right client is one of the hardest things to do. One book that helped me gain more clarity on this subject is [The Win Without Pitching Manifesto by Blair Enns](https://www.winwithoutpitching.com).\n\n### Questions for clients\n\nFrom a money point of view, if you’re interested in reducing payment risk, you can get a pretty good picture of the risk you’ll be taking by digging a bit deeper into the client. Here are some questions that you may want answered when prospecting:\n\n*   How long have they been in business? The longer, the more of a reputation they'll want to uphold.\n*   How viable is there cash flow? Do they make sales? What are their cash sources? Startups obviously are more risky, especially if they are dependent only on investment cash.*   What is the project? Is it meant to go into production or is it experimental? How valuable is it to the client? Basically, how worthy is the project? If the project doesn't add value to their business, they won't care as much or worse may abondon it after it starts.*   How large is the project? Does it fit the business/people? If the project is really big, it might be too ambitious for them, and can quickly fall apart. People are much less motivated to pay into a failed project.\n\nKeeping these questions in mind will help you evaluate the riskiness of the client, project and their ability to pay you.\n\n## The contract\n\nIf you’re asking yourself, if you need a contract as a freelancer, the answer is a big “YES”. I recommend watching [Mike Monteiro’s talk](http://vimeo.com/22053820) if you have this question or aren't fully convinced.\n\nOnce you’ve found the right client, you'll both want to be crystal clear on the project, but also the money stuff too. Describing money issues in the contract is absolutely necessary in order to protect yourself. This is the _only thing_ that you'll have to stand on if your financial relationship goes sour because it’s the only thing the courts will care about.\n\n> Once you’ve decided to work with a client, the contract is the only thing that can protect you from non-payment.\n\nMore importantly, however, is that formally agreeing to these terms sets up clear expectations in the client’s mind as to what their responsibilities are. If you have the contract right, getting paid will be a lot easier.\n\n### Contract terms\n\nWhat kind of terms do I need in the contract? The quick and dirty answer is: everything that’s important to you. I never really knew what was important to me until I had more experience, especially after a client didn't pay.\n\nThere are several resources online with contract templates including [The Freelancers Union Contract Creator](https://www.freelancersunion.org/contract-creator/). It’s likely that they won’t include everything that’s important to you, so here are the things that I considered for my own contracts based on my experiences:\n\n*   Collect a deposit to kick things off. And get it via cheque so you can capture their bank info. Bank info is helpful in case you need to sue and garnish their bank account. On a practical level, a deposit shows the client has some cash, and is serious about working with you.\n*   Specify pricing like billing rates and quotes.\n*   Describe how and when you should be paid. For example, every week within 7 days of the invoice date via bank transfer. This is very important. I never used to put this here, and then I’d always be playing catch-up with the client. Putting this stuff in the contract is the difference between asking for payment and reminding them about payment.*   Specify that if payment is not made according to the terms above, that the code/work/software remains your property. Further, that the code/work will not be given to the client. This gives you practical leverage.*   How subcontractors are dealt with. This may not be important to you, but for some larger projects I hired my own subcontractors. Spell it out in the contract if you need this flexibility and what the policy will be. One thing worth considering is protecting yourself from the client “stealing” away your subcontractor or visa-versa. By the way, having a contract with your subcontractor is something you should also have.*   All code, software and work remains your property until fully paid for.\n*   If your client is a corporation, that means the people signing the contract aren’t actually personally responsible for paying. They may be Mr. or Ms. Moneybags, but if their corporation doesn’t pay you, tough luck. To avoid this, situation, add a personal guarantee into the contract that ensures if the corporation doesn’t pay, the people will.\n\nI should also mention that it is completely acceptable to put terms on your invoice template as well, so again, if it's important, go ahead and do it.\n\n### Who’s contract?\n\nIts not really a question of yours or theirs, because it is a shared thing. The contract binds both of you. Obviously it’s easier to use your own because it’ll already have the terms important to you. If this is not possible though, you’ll need to do more work and ensure all the terms you want are in there. You'll also have to comb through the client's terms to make sure they are reasonable. In this case, you may want to consider a lawyer's expertise to help with any hardcore legal stuff.\n\n## Practical tips to keep the cash flowing\n\nBased on my experience, and depending on your situation, here are some more best practices I’ve learned along the way.\n\n### Get paid upfront\n\nIf you can, do it. End of story. I haven't actually tried this but a friend does this with some of his clients so I know its reasonable to to do. The client would pay you in advance for a set amount of billable time, say two weeks. Then you’d work for two weeks and stop until the client pays again. Obviously, this is an ideal situation and really does nip the problem in the bud. The drawbacks are that it may be used as negotiating leverage for the other terms of the engagement, like your rate for example. And I would imagine it's harder to find clients willing to do this.\n\n### Control the code\n\nMaybe the best thing I've learned is to use your own code repository. One that the client cannot access. This is not always possible, but if it is, it's worth the extra overhead. It’s a free, built-in protective measure to use as leverage against non-payment. If they don’t pay, they know they won’t get the code.\n\n### Due diligence\n\nWhen I hear this term I think of a corporate takeover, but what I’m trying to say here check the facts. Is the company who they say they are? Is the person you’re dealing with legitimately employed there? Do they have signing authority? Is their address correct? This is good to do because it'll tell you if they lied about anything and how their business is setup. You'll need to know this for when the contract is made. There are companies that do this in case it makes sense for you to outsource it.\n\n#### Credit checks\n\nWhen your client pays _after_ you do the work, you're really extending credit to them. Part of your due diligence process might be to do a formal credit check. Internet searching will bring you lots of reading on this aspect but at a high level, it involves collecting their bank info, names, addresses, credit references, and permission to contact these people to verify their credit worthiness. Part of that process can involve getting a credit report from [Dunn &amp; Bradstreet](http://www.dnb.com) or similar corporate reporting agency.\n\n### Be transparent\n\nYou’re probably already transparent about your work on the project and it should be the same about money issues. I learned this the hard way and screwed up exiting a project because I wasn’t transparent about the client’s payment issues. It ended up with a bunch of money lost.\n\nWhat I learned is I should simply communicate payment issues plainly. Its a touchy subject, so use discretion and judgement but do not be afraid to bring it up. Be clear and direct about it. Your confidence about money will make them feel better about you, not worse. If they’re starting to be late on payments, let them know that payments need to be made according to what you agreed to. Its hard, but if you can learn how to do this, you'll be a better freelancer for it and lose less money.\n\n## Wrap up\n\nDoing software development work for people is truly a joy. Its a shame that some clients just don't or can't pay for the heart and soul we put into solving their problems. I hope this can serve as a guide for making sure you get paid by your clients.\n\nHappy exploring!","slug":"making-sure-you-get-paid-by-your-clients","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsx600163fysy3nmp377","content":"<p><img src=\"http://i.imgur.com/BZbTcMz.jpg\" alt=\"\"></p>\n<p>Through my experiences running a business and freelancing, I’ve accumulated some best practices to help protect me from non-paying clients.</p>\n<a id=\"more\"></a>\n<h4 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h4><p>I’m not a lawyer. This post is me sharing best practices from my own personal experiences. You should consult your lawyer if you need legal advice.</p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>You could call this a complimentary post to <a href=\"http://vimeo.com/22053820\" target=\"_blank\" rel=\"external\">Mike Monteiro’s “F*ck You, Pay Me” talk</a>. This post is complimentary because here I describe many concrete things I learned to do to protect myself from clients who don’t pay. The following is about choosing the right clients, terms to consider for your contract, and practical tips on engaging and working with your client. I’m not suggesting you need to follow everything I write about here. Do what makes sense for your situation.</p>\n<h3 id=\"Not-getting-paid-really-sucks\"><a href=\"#Not-getting-paid-really-sucks\" class=\"headerlink\" title=\"Not getting paid really sucks\"></a>Not getting paid really sucks</h3><p>Part of the motivation to write about this is because when you don’t get paid, it really sucks, especially when you freelance. You personally and directly do the work and you put your heart into it. A lot of times, you become friends with your client, intended or not. So when they stop paying you, it can really burn. Lets not forget that it affects your financial life which puts strain on you and your family.</p>\n<h2 id=\"Work-with-the-right-clients\"><a href=\"#Work-with-the-right-clients\" class=\"headerlink\" title=\"Work with the right clients\"></a>Work with the right clients</h2><p>When you work with the right clients, you’re less likely to have payment issues in the first place. Client selection is worth at least a blog post or probably a book on its own. Not only is it important from a payment risk perspective, but also extremely important for your business as a whole.</p>\n<p>This might be obvious, but its worth outlining the rationale here. If you work with the right client, you’ll be solving a problem for the client, thus you’ll be making/saving your client money. If you have the right client, you’ll be in control of the project which means you’ll perform at your best. All of these things add up to your client being <em>happy</em> to pay you. Obviously this isn’t a guarantee, but its your first big step in minimizing your payment risk (and helping grow your business).</p>\n<p>Selecting the right client is one of the hardest things to do. One book that helped me gain more clarity on this subject is <a href=\"https://www.winwithoutpitching.com\" target=\"_blank\" rel=\"external\">The Win Without Pitching Manifesto by Blair Enns</a>.</p>\n<h3 id=\"Questions-for-clients\"><a href=\"#Questions-for-clients\" class=\"headerlink\" title=\"Questions for clients\"></a>Questions for clients</h3><p>From a money point of view, if you’re interested in reducing payment risk, you can get a pretty good picture of the risk you’ll be taking by digging a bit deeper into the client. Here are some questions that you may want answered when prospecting:</p>\n<ul>\n<li>How long have they been in business? The longer, the more of a reputation they’ll want to uphold.</li>\n<li>How viable is there cash flow? Do they make sales? What are their cash sources? Startups obviously are more risky, especially if they are dependent only on investment cash.<em>   What is the project? Is it meant to go into production or is it experimental? How valuable is it to the client? Basically, how worthy is the project? If the project doesn’t add value to their business, they won’t care as much or worse may abondon it after it starts.</em>   How large is the project? Does it fit the business/people? If the project is really big, it might be too ambitious for them, and can quickly fall apart. People are much less motivated to pay into a failed project.</li>\n</ul>\n<p>Keeping these questions in mind will help you evaluate the riskiness of the client, project and their ability to pay you.</p>\n<h2 id=\"The-contract\"><a href=\"#The-contract\" class=\"headerlink\" title=\"The contract\"></a>The contract</h2><p>If you’re asking yourself, if you need a contract as a freelancer, the answer is a big “YES”. I recommend watching <a href=\"http://vimeo.com/22053820\" target=\"_blank\" rel=\"external\">Mike Monteiro’s talk</a> if you have this question or aren’t fully convinced.</p>\n<p>Once you’ve found the right client, you’ll both want to be crystal clear on the project, but also the money stuff too. Describing money issues in the contract is absolutely necessary in order to protect yourself. This is the <em>only thing</em> that you’ll have to stand on if your financial relationship goes sour because it’s the only thing the courts will care about.</p>\n<blockquote>\n<p>Once you’ve decided to work with a client, the contract is the only thing that can protect you from non-payment.</p>\n</blockquote>\n<p>More importantly, however, is that formally agreeing to these terms sets up clear expectations in the client’s mind as to what their responsibilities are. If you have the contract right, getting paid will be a lot easier.</p>\n<h3 id=\"Contract-terms\"><a href=\"#Contract-terms\" class=\"headerlink\" title=\"Contract terms\"></a>Contract terms</h3><p>What kind of terms do I need in the contract? The quick and dirty answer is: everything that’s important to you. I never really knew what was important to me until I had more experience, especially after a client didn’t pay.</p>\n<p>There are several resources online with contract templates including <a href=\"https://www.freelancersunion.org/contract-creator/\" target=\"_blank\" rel=\"external\">The Freelancers Union Contract Creator</a>. It’s likely that they won’t include everything that’s important to you, so here are the things that I considered for my own contracts based on my experiences:</p>\n<ul>\n<li>Collect a deposit to kick things off. And get it via cheque so you can capture their bank info. Bank info is helpful in case you need to sue and garnish their bank account. On a practical level, a deposit shows the client has some cash, and is serious about working with you.</li>\n<li>Specify pricing like billing rates and quotes.</li>\n<li>Describe how and when you should be paid. For example, every week within 7 days of the invoice date via bank transfer. This is very important. I never used to put this here, and then I’d always be playing catch-up with the client. Putting this stuff in the contract is the difference between asking for payment and reminding them about payment.<em>   Specify that if payment is not made according to the terms above, that the code/work/software remains your property. Further, that the code/work will not be given to the client. This gives you practical leverage.</em>   How subcontractors are dealt with. This may not be important to you, but for some larger projects I hired my own subcontractors. Spell it out in the contract if you need this flexibility and what the policy will be. One thing worth considering is protecting yourself from the client “stealing” away your subcontractor or visa-versa. By the way, having a contract with your subcontractor is something you should also have.*   All code, software and work remains your property until fully paid for.</li>\n<li>If your client is a corporation, that means the people signing the contract aren’t actually personally responsible for paying. They may be Mr. or Ms. Moneybags, but if their corporation doesn’t pay you, tough luck. To avoid this, situation, add a personal guarantee into the contract that ensures if the corporation doesn’t pay, the people will.</li>\n</ul>\n<p>I should also mention that it is completely acceptable to put terms on your invoice template as well, so again, if it’s important, go ahead and do it.</p>\n<h3 id=\"Who’s-contract\"><a href=\"#Who’s-contract\" class=\"headerlink\" title=\"Who’s contract?\"></a>Who’s contract?</h3><p>Its not really a question of yours or theirs, because it is a shared thing. The contract binds both of you. Obviously it’s easier to use your own because it’ll already have the terms important to you. If this is not possible though, you’ll need to do more work and ensure all the terms you want are in there. You’ll also have to comb through the client’s terms to make sure they are reasonable. In this case, you may want to consider a lawyer’s expertise to help with any hardcore legal stuff.</p>\n<h2 id=\"Practical-tips-to-keep-the-cash-flowing\"><a href=\"#Practical-tips-to-keep-the-cash-flowing\" class=\"headerlink\" title=\"Practical tips to keep the cash flowing\"></a>Practical tips to keep the cash flowing</h2><p>Based on my experience, and depending on your situation, here are some more best practices I’ve learned along the way.</p>\n<h3 id=\"Get-paid-upfront\"><a href=\"#Get-paid-upfront\" class=\"headerlink\" title=\"Get paid upfront\"></a>Get paid upfront</h3><p>If you can, do it. End of story. I haven’t actually tried this but a friend does this with some of his clients so I know its reasonable to to do. The client would pay you in advance for a set amount of billable time, say two weeks. Then you’d work for two weeks and stop until the client pays again. Obviously, this is an ideal situation and really does nip the problem in the bud. The drawbacks are that it may be used as negotiating leverage for the other terms of the engagement, like your rate for example. And I would imagine it’s harder to find clients willing to do this.</p>\n<h3 id=\"Control-the-code\"><a href=\"#Control-the-code\" class=\"headerlink\" title=\"Control the code\"></a>Control the code</h3><p>Maybe the best thing I’ve learned is to use your own code repository. One that the client cannot access. This is not always possible, but if it is, it’s worth the extra overhead. It’s a free, built-in protective measure to use as leverage against non-payment. If they don’t pay, they know they won’t get the code.</p>\n<h3 id=\"Due-diligence\"><a href=\"#Due-diligence\" class=\"headerlink\" title=\"Due diligence\"></a>Due diligence</h3><p>When I hear this term I think of a corporate takeover, but what I’m trying to say here check the facts. Is the company who they say they are? Is the person you’re dealing with legitimately employed there? Do they have signing authority? Is their address correct? This is good to do because it’ll tell you if they lied about anything and how their business is setup. You’ll need to know this for when the contract is made. There are companies that do this in case it makes sense for you to outsource it.</p>\n<h4 id=\"Credit-checks\"><a href=\"#Credit-checks\" class=\"headerlink\" title=\"Credit checks\"></a>Credit checks</h4><p>When your client pays <em>after</em> you do the work, you’re really extending credit to them. Part of your due diligence process might be to do a formal credit check. Internet searching will bring you lots of reading on this aspect but at a high level, it involves collecting their bank info, names, addresses, credit references, and permission to contact these people to verify their credit worthiness. Part of that process can involve getting a credit report from <a href=\"http://www.dnb.com\" target=\"_blank\" rel=\"external\">Dunn &amp; Bradstreet</a> or similar corporate reporting agency.</p>\n<h3 id=\"Be-transparent\"><a href=\"#Be-transparent\" class=\"headerlink\" title=\"Be transparent\"></a>Be transparent</h3><p>You’re probably already transparent about your work on the project and it should be the same about money issues. I learned this the hard way and screwed up exiting a project because I wasn’t transparent about the client’s payment issues. It ended up with a bunch of money lost.</p>\n<p>What I learned is I should simply communicate payment issues plainly. Its a touchy subject, so use discretion and judgement but do not be afraid to bring it up. Be clear and direct about it. Your confidence about money will make them feel better about you, not worse. If they’re starting to be late on payments, let them know that payments need to be made according to what you agreed to. Its hard, but if you can learn how to do this, you’ll be a better freelancer for it and lose less money.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>Doing software development work for people is truly a joy. Its a shame that some clients just don’t or can’t pay for the heart and soul we put into solving their problems. I hope this can serve as a guide for making sure you get paid by your clients.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p><img src=\"http://i.imgur.com/BZbTcMz.jpg\" alt=\"\"></p>\n<p>Through my experiences running a business and freelancing, I’ve accumulated some best practices to help protect me from non-paying clients.</p>","more":"<h4 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h4><p>I’m not a lawyer. This post is me sharing best practices from my own personal experiences. You should consult your lawyer if you need legal advice.</p>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>You could call this a complimentary post to <a href=\"http://vimeo.com/22053820\">Mike Monteiro’s “F*ck You, Pay Me” talk</a>. This post is complimentary because here I describe many concrete things I learned to do to protect myself from clients who don’t pay. The following is about choosing the right clients, terms to consider for your contract, and practical tips on engaging and working with your client. I’m not suggesting you need to follow everything I write about here. Do what makes sense for your situation.</p>\n<h3 id=\"Not-getting-paid-really-sucks\"><a href=\"#Not-getting-paid-really-sucks\" class=\"headerlink\" title=\"Not getting paid really sucks\"></a>Not getting paid really sucks</h3><p>Part of the motivation to write about this is because when you don’t get paid, it really sucks, especially when you freelance. You personally and directly do the work and you put your heart into it. A lot of times, you become friends with your client, intended or not. So when they stop paying you, it can really burn. Lets not forget that it affects your financial life which puts strain on you and your family.</p>\n<h2 id=\"Work-with-the-right-clients\"><a href=\"#Work-with-the-right-clients\" class=\"headerlink\" title=\"Work with the right clients\"></a>Work with the right clients</h2><p>When you work with the right clients, you’re less likely to have payment issues in the first place. Client selection is worth at least a blog post or probably a book on its own. Not only is it important from a payment risk perspective, but also extremely important for your business as a whole.</p>\n<p>This might be obvious, but its worth outlining the rationale here. If you work with the right client, you’ll be solving a problem for the client, thus you’ll be making/saving your client money. If you have the right client, you’ll be in control of the project which means you’ll perform at your best. All of these things add up to your client being <em>happy</em> to pay you. Obviously this isn’t a guarantee, but its your first big step in minimizing your payment risk (and helping grow your business).</p>\n<p>Selecting the right client is one of the hardest things to do. One book that helped me gain more clarity on this subject is <a href=\"https://www.winwithoutpitching.com\">The Win Without Pitching Manifesto by Blair Enns</a>.</p>\n<h3 id=\"Questions-for-clients\"><a href=\"#Questions-for-clients\" class=\"headerlink\" title=\"Questions for clients\"></a>Questions for clients</h3><p>From a money point of view, if you’re interested in reducing payment risk, you can get a pretty good picture of the risk you’ll be taking by digging a bit deeper into the client. Here are some questions that you may want answered when prospecting:</p>\n<ul>\n<li>How long have they been in business? The longer, the more of a reputation they’ll want to uphold.</li>\n<li>How viable is there cash flow? Do they make sales? What are their cash sources? Startups obviously are more risky, especially if they are dependent only on investment cash.<em>   What is the project? Is it meant to go into production or is it experimental? How valuable is it to the client? Basically, how worthy is the project? If the project doesn’t add value to their business, they won’t care as much or worse may abondon it after it starts.</em>   How large is the project? Does it fit the business/people? If the project is really big, it might be too ambitious for them, and can quickly fall apart. People are much less motivated to pay into a failed project.</li>\n</ul>\n<p>Keeping these questions in mind will help you evaluate the riskiness of the client, project and their ability to pay you.</p>\n<h2 id=\"The-contract\"><a href=\"#The-contract\" class=\"headerlink\" title=\"The contract\"></a>The contract</h2><p>If you’re asking yourself, if you need a contract as a freelancer, the answer is a big “YES”. I recommend watching <a href=\"http://vimeo.com/22053820\">Mike Monteiro’s talk</a> if you have this question or aren’t fully convinced.</p>\n<p>Once you’ve found the right client, you’ll both want to be crystal clear on the project, but also the money stuff too. Describing money issues in the contract is absolutely necessary in order to protect yourself. This is the <em>only thing</em> that you’ll have to stand on if your financial relationship goes sour because it’s the only thing the courts will care about.</p>\n<blockquote>\n<p>Once you’ve decided to work with a client, the contract is the only thing that can protect you from non-payment.</p>\n</blockquote>\n<p>More importantly, however, is that formally agreeing to these terms sets up clear expectations in the client’s mind as to what their responsibilities are. If you have the contract right, getting paid will be a lot easier.</p>\n<h3 id=\"Contract-terms\"><a href=\"#Contract-terms\" class=\"headerlink\" title=\"Contract terms\"></a>Contract terms</h3><p>What kind of terms do I need in the contract? The quick and dirty answer is: everything that’s important to you. I never really knew what was important to me until I had more experience, especially after a client didn’t pay.</p>\n<p>There are several resources online with contract templates including <a href=\"https://www.freelancersunion.org/contract-creator/\">The Freelancers Union Contract Creator</a>. It’s likely that they won’t include everything that’s important to you, so here are the things that I considered for my own contracts based on my experiences:</p>\n<ul>\n<li>Collect a deposit to kick things off. And get it via cheque so you can capture their bank info. Bank info is helpful in case you need to sue and garnish their bank account. On a practical level, a deposit shows the client has some cash, and is serious about working with you.</li>\n<li>Specify pricing like billing rates and quotes.</li>\n<li>Describe how and when you should be paid. For example, every week within 7 days of the invoice date via bank transfer. This is very important. I never used to put this here, and then I’d always be playing catch-up with the client. Putting this stuff in the contract is the difference between asking for payment and reminding them about payment.<em>   Specify that if payment is not made according to the terms above, that the code/work/software remains your property. Further, that the code/work will not be given to the client. This gives you practical leverage.</em>   How subcontractors are dealt with. This may not be important to you, but for some larger projects I hired my own subcontractors. Spell it out in the contract if you need this flexibility and what the policy will be. One thing worth considering is protecting yourself from the client “stealing” away your subcontractor or visa-versa. By the way, having a contract with your subcontractor is something you should also have.*   All code, software and work remains your property until fully paid for.</li>\n<li>If your client is a corporation, that means the people signing the contract aren’t actually personally responsible for paying. They may be Mr. or Ms. Moneybags, but if their corporation doesn’t pay you, tough luck. To avoid this, situation, add a personal guarantee into the contract that ensures if the corporation doesn’t pay, the people will.</li>\n</ul>\n<p>I should also mention that it is completely acceptable to put terms on your invoice template as well, so again, if it’s important, go ahead and do it.</p>\n<h3 id=\"Who’s-contract\"><a href=\"#Who’s-contract\" class=\"headerlink\" title=\"Who’s contract?\"></a>Who’s contract?</h3><p>Its not really a question of yours or theirs, because it is a shared thing. The contract binds both of you. Obviously it’s easier to use your own because it’ll already have the terms important to you. If this is not possible though, you’ll need to do more work and ensure all the terms you want are in there. You’ll also have to comb through the client’s terms to make sure they are reasonable. In this case, you may want to consider a lawyer’s expertise to help with any hardcore legal stuff.</p>\n<h2 id=\"Practical-tips-to-keep-the-cash-flowing\"><a href=\"#Practical-tips-to-keep-the-cash-flowing\" class=\"headerlink\" title=\"Practical tips to keep the cash flowing\"></a>Practical tips to keep the cash flowing</h2><p>Based on my experience, and depending on your situation, here are some more best practices I’ve learned along the way.</p>\n<h3 id=\"Get-paid-upfront\"><a href=\"#Get-paid-upfront\" class=\"headerlink\" title=\"Get paid upfront\"></a>Get paid upfront</h3><p>If you can, do it. End of story. I haven’t actually tried this but a friend does this with some of his clients so I know its reasonable to to do. The client would pay you in advance for a set amount of billable time, say two weeks. Then you’d work for two weeks and stop until the client pays again. Obviously, this is an ideal situation and really does nip the problem in the bud. The drawbacks are that it may be used as negotiating leverage for the other terms of the engagement, like your rate for example. And I would imagine it’s harder to find clients willing to do this.</p>\n<h3 id=\"Control-the-code\"><a href=\"#Control-the-code\" class=\"headerlink\" title=\"Control the code\"></a>Control the code</h3><p>Maybe the best thing I’ve learned is to use your own code repository. One that the client cannot access. This is not always possible, but if it is, it’s worth the extra overhead. It’s a free, built-in protective measure to use as leverage against non-payment. If they don’t pay, they know they won’t get the code.</p>\n<h3 id=\"Due-diligence\"><a href=\"#Due-diligence\" class=\"headerlink\" title=\"Due diligence\"></a>Due diligence</h3><p>When I hear this term I think of a corporate takeover, but what I’m trying to say here check the facts. Is the company who they say they are? Is the person you’re dealing with legitimately employed there? Do they have signing authority? Is their address correct? This is good to do because it’ll tell you if they lied about anything and how their business is setup. You’ll need to know this for when the contract is made. There are companies that do this in case it makes sense for you to outsource it.</p>\n<h4 id=\"Credit-checks\"><a href=\"#Credit-checks\" class=\"headerlink\" title=\"Credit checks\"></a>Credit checks</h4><p>When your client pays <em>after</em> you do the work, you’re really extending credit to them. Part of your due diligence process might be to do a formal credit check. Internet searching will bring you lots of reading on this aspect but at a high level, it involves collecting their bank info, names, addresses, credit references, and permission to contact these people to verify their credit worthiness. Part of that process can involve getting a credit report from <a href=\"http://www.dnb.com\">Dunn &amp; Bradstreet</a> or similar corporate reporting agency.</p>\n<h3 id=\"Be-transparent\"><a href=\"#Be-transparent\" class=\"headerlink\" title=\"Be transparent\"></a>Be transparent</h3><p>You’re probably already transparent about your work on the project and it should be the same about money issues. I learned this the hard way and screwed up exiting a project because I wasn’t transparent about the client’s payment issues. It ended up with a bunch of money lost.</p>\n<p>What I learned is I should simply communicate payment issues plainly. Its a touchy subject, so use discretion and judgement but do not be afraid to bring it up. Be clear and direct about it. Your confidence about money will make them feel better about you, not worse. If they’re starting to be late on payments, let them know that payments need to be made according to what you agreed to. Its hard, but if you can learn how to do this, you’ll be a better freelancer for it and lose less money.</p>\n<h2 id=\"Wrap-up\"><a href=\"#Wrap-up\" class=\"headerlink\" title=\"Wrap up\"></a>Wrap up</h2><p>Doing software development work for people is truly a joy. Its a shame that some clients just don’t or can’t pay for the heart and soul we put into solving their problems. I hope this can serve as a guide for making sure you get paid by your clients.</p>\n<p>Happy exploring!</p>"},{"title":"Strategy pattern done with Functional Programming","id":"184","date":"2016-01-18T02:51:00.000Z","_content":"\nA quick, simple technique to help transition your Object Oriented code to a more functional style.\n\n<!--more-->\n\n## Intro\n\nShowers are a mysterious place where for some reason, insights appear. I made a mini break through with the practice of Functional Programming (FP) in the shower. In hindsight, it's not groundbreaking, but I think it's worth discussing, especially if you're struggling to grasp how FP can be used in practice.\n\nA while back, a functional approach nicely solved a problem I was having, where I was going to implement some type of interface with a set of concrete classes, but then realized a function would be easier and cleaner. So, I'm calling this out as a technique.\n\n> FP can be used in place of the common Object Oriented practice of [programming to interfaces, not implementations.](http://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface)\n\nI don't know yet if this is true in general, but it's certainly true for the Strategy Pattern. I'll use my previous post, [Dependency injection example in Swift](http://sundeepgupta.ca/dependency-injection-example-in-swift/) to illustrate this.\n\n## Code\n\nThe Swift Playground for this post can be found in [this repo](https://github.com/sundeepgupta/functional-strategy-pattern) if you'd like to download it.\n\n## Object Oriented example\n\nFirst, let's review the OO example. This was inspired by a Sandi Metz Ruby exercise I experienced a while back, and ported to Swift to illustrate what exactly Dependency Injection is and how it can be useful. The technique described in the post is more precisely known as the [Strategy Pattern](https://en.wikipedia.org/wiki/Strategy_pattern).\n\nQuickly, the `Song` class has a `recite()` method to sing a short song consisting of an array of phrases. Using the Strategy Pattern, we can instantiate and recite the song, but remixed in a certain way, at runtime. To do this, we to pass in an object that conforms to the `Remixer` protocol (in other OO languages, like Java, a protocol is called an interface). In the example, we implement `Repeater` and `Reverser` to recite the song with repeated phrases and reversed phrases, respectively.\n\n    class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        init(remixer: Remixer?) {\n            if remixer != nil {\n                self.phrases = remixer!.result(self.phrases)\n            }\n        }\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = linePhrases.joinWithSeparator(\" \")\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return lines.joinWithSeparator(\"\\n\")\n        }\n    }\n\n    protocol Remixer {\n        func result(list: [String]) -&gt; [String]\n    }\n\n    class Repeater: Remixer {\n        func result(list: [String]) -&gt; [String] {\n            return list.map {\n                return $0 + \" \" + $0\n            }\n        }\n    }\n\n    class Reverser: Remixer {\n        func result(list: [String]) -&gt; [String] {\n            return list.reverse()\n        }\n    }\n\n    Song(remixer: nil).recite()\n    Song(remixer: Repeater()).recite()\n    Song(remixer: Reverser()).recite()\n    `</pre>\n\n    ## Functional example\n\n    In the OO example, above, `Song` uses the `Remixer` protocol defined method `result()` on the object being passed in. Now, instead of passing in an object, which conforms to the `Remixer` protocol, which implements `result()`, in a sense, we'll pass in the `result()` _function_ directly. Easy, right? Let's look at the code.\n\n    <pre>`class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        init(remixer: Remixer?) {\n            guard let r = remixer else { return }\n\n            self.phrases = r(phrases)\n        }\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = linePhrases.joinWithSeparator(\" \")\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return lines.joinWithSeparator(\"\\n\")\n        }\n    }\n\n    typealias Remixer = [String] -&gt; [String]\n\n    let repeater: Remixer = { lines in\n        return lines.map {\n            return $0 + \" \" + $0\n        }\n    }\n\n    let reverser: Remixer = { lines in\n        return lines.reverse()\n    }\n\n    Song(remixer: nil).recite()\n    Song(remixer: repeater).recite()\n    Song(remixer: reverser).recite()\n\n`Song` looks identical to the OO version except for inside `init()`. `init()` still takes a parameter of type `Remixer?`, but now, `Remixer`'s type is a function, not a protocol. In place of our concrete classes which implemented the dynamic behaviour in `result()`, we define constants of type `Remixer`, our function type.\n\nIf you have dynamic behaviour in your OO code and you're looking to introduce FP into your practice, this is one approach that can help you get into the swing of it.\n\nHappy exploring!","source":"_posts/strategy-pattern-done-functional-programming.md","raw":"---\ntitle: Strategy pattern done with Functional Programming\ntags:\n  - coding\n  - design patterns\n  - functional programming\n  - swift\nid: 184\ncategories:\n  - Uncategorized\ndate: 2016-01-17 21:51:00\n---\n\nA quick, simple technique to help transition your Object Oriented code to a more functional style.\n\n<!--more-->\n\n## Intro\n\nShowers are a mysterious place where for some reason, insights appear. I made a mini break through with the practice of Functional Programming (FP) in the shower. In hindsight, it's not groundbreaking, but I think it's worth discussing, especially if you're struggling to grasp how FP can be used in practice.\n\nA while back, a functional approach nicely solved a problem I was having, where I was going to implement some type of interface with a set of concrete classes, but then realized a function would be easier and cleaner. So, I'm calling this out as a technique.\n\n> FP can be used in place of the common Object Oriented practice of [programming to interfaces, not implementations.](http://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface)\n\nI don't know yet if this is true in general, but it's certainly true for the Strategy Pattern. I'll use my previous post, [Dependency injection example in Swift](http://sundeepgupta.ca/dependency-injection-example-in-swift/) to illustrate this.\n\n## Code\n\nThe Swift Playground for this post can be found in [this repo](https://github.com/sundeepgupta/functional-strategy-pattern) if you'd like to download it.\n\n## Object Oriented example\n\nFirst, let's review the OO example. This was inspired by a Sandi Metz Ruby exercise I experienced a while back, and ported to Swift to illustrate what exactly Dependency Injection is and how it can be useful. The technique described in the post is more precisely known as the [Strategy Pattern](https://en.wikipedia.org/wiki/Strategy_pattern).\n\nQuickly, the `Song` class has a `recite()` method to sing a short song consisting of an array of phrases. Using the Strategy Pattern, we can instantiate and recite the song, but remixed in a certain way, at runtime. To do this, we to pass in an object that conforms to the `Remixer` protocol (in other OO languages, like Java, a protocol is called an interface). In the example, we implement `Repeater` and `Reverser` to recite the song with repeated phrases and reversed phrases, respectively.\n\n    class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        init(remixer: Remixer?) {\n            if remixer != nil {\n                self.phrases = remixer!.result(self.phrases)\n            }\n        }\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = linePhrases.joinWithSeparator(\" \")\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return lines.joinWithSeparator(\"\\n\")\n        }\n    }\n\n    protocol Remixer {\n        func result(list: [String]) -&gt; [String]\n    }\n\n    class Repeater: Remixer {\n        func result(list: [String]) -&gt; [String] {\n            return list.map {\n                return $0 + \" \" + $0\n            }\n        }\n    }\n\n    class Reverser: Remixer {\n        func result(list: [String]) -&gt; [String] {\n            return list.reverse()\n        }\n    }\n\n    Song(remixer: nil).recite()\n    Song(remixer: Repeater()).recite()\n    Song(remixer: Reverser()).recite()\n    `</pre>\n\n    ## Functional example\n\n    In the OO example, above, `Song` uses the `Remixer` protocol defined method `result()` on the object being passed in. Now, instead of passing in an object, which conforms to the `Remixer` protocol, which implements `result()`, in a sense, we'll pass in the `result()` _function_ directly. Easy, right? Let's look at the code.\n\n    <pre>`class Song {\n        private let lineStart = \"This is \"\n        private let lineEnd = \".\"\n        private var phrases = [\n            \"the house that Jack built\",\n            \"the malt that lay in\",\n            \"the rat that ate\"\n        ]\n\n        init(remixer: Remixer?) {\n            guard let r = remixer else { return }\n\n            self.phrases = r(phrases)\n        }\n\n        func line(number: Int) -&gt; String {\n            let linePhrases = self.phrases[0...number-1].reverse()\n            let line = linePhrases.joinWithSeparator(\" \")\n            return self.lineStart + line + self.lineEnd\n        }\n\n        func recite() -&gt; String {\n            var lines = [String]()\n            for i in 1...self.phrases.count {\n                lines.append(self.line(i))\n            }\n            return lines.joinWithSeparator(\"\\n\")\n        }\n    }\n\n    typealias Remixer = [String] -&gt; [String]\n\n    let repeater: Remixer = { lines in\n        return lines.map {\n            return $0 + \" \" + $0\n        }\n    }\n\n    let reverser: Remixer = { lines in\n        return lines.reverse()\n    }\n\n    Song(remixer: nil).recite()\n    Song(remixer: repeater).recite()\n    Song(remixer: reverser).recite()\n\n`Song` looks identical to the OO version except for inside `init()`. `init()` still takes a parameter of type `Remixer?`, but now, `Remixer`'s type is a function, not a protocol. In place of our concrete classes which implemented the dynamic behaviour in `result()`, we define constants of type `Remixer`, our function type.\n\nIf you have dynamic behaviour in your OO code and you're looking to introduce FP into your practice, this is one approach that can help you get into the swing of it.\n\nHappy exploring!","slug":"strategy-pattern-done-functional-programming","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsx800183fys4azewa3h","content":"<p>A quick, simple technique to help transition your Object Oriented code to a more functional style.</p>\n<a id=\"more\"></a>\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Showers are a mysterious place where for some reason, insights appear. I made a mini break through with the practice of Functional Programming (FP) in the shower. In hindsight, it’s not groundbreaking, but I think it’s worth discussing, especially if you’re struggling to grasp how FP can be used in practice.</p>\n<p>A while back, a functional approach nicely solved a problem I was having, where I was going to implement some type of interface with a set of concrete classes, but then realized a function would be easier and cleaner. So, I’m calling this out as a technique.</p>\n<blockquote>\n<p>FP can be used in place of the common Object Oriented practice of <a href=\"http://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface\" target=\"_blank\" rel=\"external\">programming to interfaces, not implementations.</a></p>\n</blockquote>\n<p>I don’t know yet if this is true in general, but it’s certainly true for the Strategy Pattern. I’ll use my previous post, <a href=\"http://sundeepgupta.ca/dependency-injection-example-in-swift/\" target=\"_blank\" rel=\"external\">Dependency injection example in Swift</a> to illustrate this.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>The Swift Playground for this post can be found in <a href=\"https://github.com/sundeepgupta/functional-strategy-pattern\" target=\"_blank\" rel=\"external\">this repo</a> if you’d like to download it.</p>\n<h2 id=\"Object-Oriented-example\"><a href=\"#Object-Oriented-example\" class=\"headerlink\" title=\"Object Oriented example\"></a>Object Oriented example</h2><p>First, let’s review the OO example. This was inspired by a Sandi Metz Ruby exercise I experienced a while back, and ported to Swift to illustrate what exactly Dependency Injection is and how it can be useful. The technique described in the post is more precisely known as the <a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\" target=\"_blank\" rel=\"external\">Strategy Pattern</a>.</p>\n<p>Quickly, the <code>Song</code> class has a <code>recite()</code> method to sing a short song consisting of an array of phrases. Using the Strategy Pattern, we can instantiate and recite the song, but remixed in a certain way, at runtime. To do this, we to pass in an object that conforms to the <code>Remixer</code> protocol (in other OO languages, like Java, a protocol is called an interface). In the example, we implement <code>Repeater</code> and <code>Reverser</code> to recite the song with repeated phrases and reversed phrases, respectively.</p>\n<pre><code>class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private var phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    init(remixer: Remixer?) {\n        if remixer != nil {\n            self.phrases = remixer!.result(self.phrases)\n        }\n    }\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = linePhrases.joinWithSeparator(&quot; &quot;)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return lines.joinWithSeparator(&quot;\\n&quot;)\n    }\n}\n\nprotocol Remixer {\n    func result(list: [String]) -&amp;gt; [String]\n}\n\nclass Repeater: Remixer {\n    func result(list: [String]) -&amp;gt; [String] {\n        return list.map {\n            return $0 + &quot; &quot; + $0\n        }\n    }\n}\n\nclass Reverser: Remixer {\n    func result(list: [String]) -&amp;gt; [String] {\n        return list.reverse()\n    }\n}\n\nSong(remixer: nil).recite()\nSong(remixer: Repeater()).recite()\nSong(remixer: Reverser()).recite()\n`&lt;/pre&gt;\n\n## Functional example\n\nIn the OO example, above, `Song` uses the `Remixer` protocol defined method `result()` on the object being passed in. Now, instead of passing in an object, which conforms to the `Remixer` protocol, which implements `result()`, in a sense, we&apos;ll pass in the `result()` _function_ directly. Easy, right? Let&apos;s look at the code.\n\n&lt;pre&gt;`class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private var phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    init(remixer: Remixer?) {\n        guard let r = remixer else { return }\n\n        self.phrases = r(phrases)\n    }\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = linePhrases.joinWithSeparator(&quot; &quot;)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return lines.joinWithSeparator(&quot;\\n&quot;)\n    }\n}\n\ntypealias Remixer = [String] -&amp;gt; [String]\n\nlet repeater: Remixer = { lines in\n    return lines.map {\n        return $0 + &quot; &quot; + $0\n    }\n}\n\nlet reverser: Remixer = { lines in\n    return lines.reverse()\n}\n\nSong(remixer: nil).recite()\nSong(remixer: repeater).recite()\nSong(remixer: reverser).recite()\n</code></pre><p><code>Song</code> looks identical to the OO version except for inside <code>init()</code>. <code>init()</code> still takes a parameter of type <code>Remixer?</code>, but now, <code>Remixer</code>‘s type is a function, not a protocol. In place of our concrete classes which implemented the dynamic behaviour in <code>result()</code>, we define constants of type <code>Remixer</code>, our function type.</p>\n<p>If you have dynamic behaviour in your OO code and you’re looking to introduce FP into your practice, this is one approach that can help you get into the swing of it.</p>\n<p>Happy exploring!</p>\n","excerpt":"<p>A quick, simple technique to help transition your Object Oriented code to a more functional style.</p>","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Showers are a mysterious place where for some reason, insights appear. I made a mini break through with the practice of Functional Programming (FP) in the shower. In hindsight, it’s not groundbreaking, but I think it’s worth discussing, especially if you’re struggling to grasp how FP can be used in practice.</p>\n<p>A while back, a functional approach nicely solved a problem I was having, where I was going to implement some type of interface with a set of concrete classes, but then realized a function would be easier and cleaner. So, I’m calling this out as a technique.</p>\n<blockquote>\n<p>FP can be used in place of the common Object Oriented practice of <a href=\"http://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface\">programming to interfaces, not implementations.</a></p>\n</blockquote>\n<p>I don’t know yet if this is true in general, but it’s certainly true for the Strategy Pattern. I’ll use my previous post, <a href=\"http://sundeepgupta.ca/dependency-injection-example-in-swift/\">Dependency injection example in Swift</a> to illustrate this.</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>The Swift Playground for this post can be found in <a href=\"https://github.com/sundeepgupta/functional-strategy-pattern\">this repo</a> if you’d like to download it.</p>\n<h2 id=\"Object-Oriented-example\"><a href=\"#Object-Oriented-example\" class=\"headerlink\" title=\"Object Oriented example\"></a>Object Oriented example</h2><p>First, let’s review the OO example. This was inspired by a Sandi Metz Ruby exercise I experienced a while back, and ported to Swift to illustrate what exactly Dependency Injection is and how it can be useful. The technique described in the post is more precisely known as the <a href=\"https://en.wikipedia.org/wiki/Strategy_pattern\">Strategy Pattern</a>.</p>\n<p>Quickly, the <code>Song</code> class has a <code>recite()</code> method to sing a short song consisting of an array of phrases. Using the Strategy Pattern, we can instantiate and recite the song, but remixed in a certain way, at runtime. To do this, we to pass in an object that conforms to the <code>Remixer</code> protocol (in other OO languages, like Java, a protocol is called an interface). In the example, we implement <code>Repeater</code> and <code>Reverser</code> to recite the song with repeated phrases and reversed phrases, respectively.</p>\n<pre><code>class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private var phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    init(remixer: Remixer?) {\n        if remixer != nil {\n            self.phrases = remixer!.result(self.phrases)\n        }\n    }\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = linePhrases.joinWithSeparator(&quot; &quot;)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return lines.joinWithSeparator(&quot;\\n&quot;)\n    }\n}\n\nprotocol Remixer {\n    func result(list: [String]) -&amp;gt; [String]\n}\n\nclass Repeater: Remixer {\n    func result(list: [String]) -&amp;gt; [String] {\n        return list.map {\n            return $0 + &quot; &quot; + $0\n        }\n    }\n}\n\nclass Reverser: Remixer {\n    func result(list: [String]) -&amp;gt; [String] {\n        return list.reverse()\n    }\n}\n\nSong(remixer: nil).recite()\nSong(remixer: Repeater()).recite()\nSong(remixer: Reverser()).recite()\n`&lt;/pre&gt;\n\n## Functional example\n\nIn the OO example, above, `Song` uses the `Remixer` protocol defined method `result()` on the object being passed in. Now, instead of passing in an object, which conforms to the `Remixer` protocol, which implements `result()`, in a sense, we&apos;ll pass in the `result()` _function_ directly. Easy, right? Let&apos;s look at the code.\n\n&lt;pre&gt;`class Song {\n    private let lineStart = &quot;This is &quot;\n    private let lineEnd = &quot;.&quot;\n    private var phrases = [\n        &quot;the house that Jack built&quot;,\n        &quot;the malt that lay in&quot;,\n        &quot;the rat that ate&quot;\n    ]\n\n    init(remixer: Remixer?) {\n        guard let r = remixer else { return }\n\n        self.phrases = r(phrases)\n    }\n\n    func line(number: Int) -&amp;gt; String {\n        let linePhrases = self.phrases[0...number-1].reverse()\n        let line = linePhrases.joinWithSeparator(&quot; &quot;)\n        return self.lineStart + line + self.lineEnd\n    }\n\n    func recite() -&amp;gt; String {\n        var lines = [String]()\n        for i in 1...self.phrases.count {\n            lines.append(self.line(i))\n        }\n        return lines.joinWithSeparator(&quot;\\n&quot;)\n    }\n}\n\ntypealias Remixer = [String] -&amp;gt; [String]\n\nlet repeater: Remixer = { lines in\n    return lines.map {\n        return $0 + &quot; &quot; + $0\n    }\n}\n\nlet reverser: Remixer = { lines in\n    return lines.reverse()\n}\n\nSong(remixer: nil).recite()\nSong(remixer: repeater).recite()\nSong(remixer: reverser).recite()\n</code></pre><p><code>Song</code> looks identical to the OO version except for inside <code>init()</code>. <code>init()</code> still takes a parameter of type <code>Remixer?</code>, but now, <code>Remixer</code>‘s type is a function, not a protocol. In place of our concrete classes which implemented the dynamic behaviour in <code>result()</code>, we define constants of type <code>Remixer</code>, our function type.</p>\n<p>If you have dynamic behaviour in your OO code and you’re looking to introduce FP into your practice, this is one approach that can help you get into the swing of it.</p>\n<p>Happy exploring!</p>"},{"title":"Working with Contacts, An iOS Addressbook Tutorial","id":"23","date":"2013-06-19T00:54:08.000Z","_content":"\niOS's Addressbook framework is quite handy for enhancing the user's experience when your app requires any contact related data. In this iOS Addressbook tutorial, I detail how I use this framework in conjunction with Core Data.\n\n<!--more-->\n\n## Overview\n\nThis guide will explain how to:\n\n*   Show the address book picker.\n*   Store a reference to a contact.\n*   Retrieve a contact using a stored reference.\n\nIt assumes prior knowledge of iOS programming and Core Data.\n\nI had to do this for a personal project I'm working on. I didn't find any good guides, so I thought I'd write one.\n\nReferences:\n\n*   [Address Book Programming Guide for iOS](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Introduction.html)\n\n## Show the address book picker\n\nWe must add **AddressBook.framework** and **AddressBookUI.framework** into our project. After doing this, import the **AddressBookUI** framework and add the appropriate protocols you require into your class's .h file. For my purposes, I'm using the **ABPeoplePickerNavigationControllerDelegate** protocol.\n\n    //  ParticipantsVC.h\n\n    #import &lt;UIKit/UIKit.h&gt;\n    #import &lt;AddressBookUI/AddressBookUI.h&gt;\n\n    @interface ParticipantsVC : UITableViewController &lt;ABPeoplePickerNavigationControllerDelegate&gt;\n\n    @end\n    `</pre>\n\n    Next, implement the required and optional methods defined by the protocol in the corresponding .m file. I've added a bit of code already to prevent crashing.\n\n    <pre>`- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n          shouldContinueAfterSelectingPerson:(ABRecordRef)person {\n        return NO;\n    }\n\n    - (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n          shouldContinueAfterSelectingPerson:(ABRecordRef)person\n                                    property:(ABPropertyID)property\n                                  identifier:(ABMultiValueIdentifier)identifier {\n        return NO;\n    }\n\n    - (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker {\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }\n    `</pre>\n\n    Next, I setup a UI button press event to show the address book picker. We simply instantiate the picker object, set the picker's delegate property, and present it (modally).\n\n    <pre>`- (IBAction)newButtonPress:(id)sender {\n        ABPeoplePickerNavigationController *peoplePicker = [[ABPeoplePickerNavigationController alloc] init];\n        peoplePicker.peoplePickerDelegate = self;\n\n        [self presentViewController:peoplePicker animated:YES completion:nil];\n    }\n    `</pre>\n\n    _No contacts?_ My simulator had an empty address book, so I added a few manually via the Contacts app. If you need to import a lot of contacts for testing, take a look at [this](http://stackoverflow.com/questions/901132/importing-addressbook-data-into-the-iphone-simulator).\n\n    ## Store a reference to a contact\n\n    Here is where the delegate methods come into play. I used the `-(BOOL)peoplePickerNavigationController:shouldContinueAfterSelectingPerson:` method as a handle to do things with the selected contact. Returning `YES` will push the contact detail view onto the picker's navigation stack. If you don't need that, just return `NO`.\n\n    The most important part of this is getting the ID of the contact/person (aka ABRecordRef). To get it, use this function: `ABRecordID contactId = ABRecordGetRecordID(contact)` This will return a primitive type of `ABRecordID` which is really a 32-bit integer. Thus, your entity attribute that will hold this value should also be 32-bit integer. But don't forget before you can save it to your entity object, it needs to be wrapped in an NSNumber by calling this method: `NSNumber *contactId = [NSNumber numberWithInt:ABRecordGetRecordID(contact)]`\n\n    A similar thing will need to happen if you want to store other properties of the ABRecordRef object. Here is an example of the contact's composite name: `NSString *contactName = (__bridge NSString *)(ABRecordCopyCompositeName(contact))`.\n\n    In fact, [Apple suggests storing the first and last name](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Chapters/DirectInteraction.html).\n\n    > The recommended way to keep a long-term reference to a particular record is to store the first and last name, or a hash of the first and last name, in addition to the identifier. When you look up a record by ID, compare the record’s name to your stored name. If they don’t match, use the stored name to find the record, and store the new ID for the record.\n\n    Once you have the ID and the other values you need to save, go ahead and store them.\n\n    ## Retrieve a contact using a stored reference\n\n    When it's time to use your reference to look up a contact, we first need to instantiate the address book object. I ran into a hiccup in testing for iOS 5 because the method in the docs is updated for iOS 6 only and doesn't explicitly say anything about iOS 5.\n\n    To get the address book in a backwards compatible way, you can simply do this:\n\n    <pre>`ABAddressBookRef addressBook;\n    if (&amp;ABAddressBookCreateWithOptions != NULL) {\n        addressBook = ABAddressBookCreateWithOptions(nil, nil);\n    } else { //below iOS 6\n        addressBook = ABAddressBookCreate();\n    }\n    `</pre>\n\n    Once you have the address book object, you can use this method to retrieve a contact and any of their properties by the ID you have stored. In the code below, `participant` is a Core Data entity object.\n\n    <pre>`ABRecordID contactID = (ABRecordID)participant.contactID.intValue;\n    ABRecordRef contact = ABAddressBookGetPersonWithRecordID(addressBook, contactID);\n    NSString *contactName = (__bridge NSString *)ABRecordCopyCompositeName(contact);\n\n## Conclusion\n\nI hope this makes things a bit easier for anyone starting to dig into the address book API.","source":"_posts/working-contacts-ios-addressbook-tutorial.md","raw":"---\ntitle: 'Working with Contacts, An iOS Addressbook Tutorial'\ntags:\n  - ios\nid: 23\ncategories:\n  - Uncategorized\ndate: 2013-06-18 20:54:08\n---\n\niOS's Addressbook framework is quite handy for enhancing the user's experience when your app requires any contact related data. In this iOS Addressbook tutorial, I detail how I use this framework in conjunction with Core Data.\n\n<!--more-->\n\n## Overview\n\nThis guide will explain how to:\n\n*   Show the address book picker.\n*   Store a reference to a contact.\n*   Retrieve a contact using a stored reference.\n\nIt assumes prior knowledge of iOS programming and Core Data.\n\nI had to do this for a personal project I'm working on. I didn't find any good guides, so I thought I'd write one.\n\nReferences:\n\n*   [Address Book Programming Guide for iOS](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Introduction.html)\n\n## Show the address book picker\n\nWe must add **AddressBook.framework** and **AddressBookUI.framework** into our project. After doing this, import the **AddressBookUI** framework and add the appropriate protocols you require into your class's .h file. For my purposes, I'm using the **ABPeoplePickerNavigationControllerDelegate** protocol.\n\n    //  ParticipantsVC.h\n\n    #import &lt;UIKit/UIKit.h&gt;\n    #import &lt;AddressBookUI/AddressBookUI.h&gt;\n\n    @interface ParticipantsVC : UITableViewController &lt;ABPeoplePickerNavigationControllerDelegate&gt;\n\n    @end\n    `</pre>\n\n    Next, implement the required and optional methods defined by the protocol in the corresponding .m file. I've added a bit of code already to prevent crashing.\n\n    <pre>`- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n          shouldContinueAfterSelectingPerson:(ABRecordRef)person {\n        return NO;\n    }\n\n    - (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n          shouldContinueAfterSelectingPerson:(ABRecordRef)person\n                                    property:(ABPropertyID)property\n                                  identifier:(ABMultiValueIdentifier)identifier {\n        return NO;\n    }\n\n    - (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker {\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }\n    `</pre>\n\n    Next, I setup a UI button press event to show the address book picker. We simply instantiate the picker object, set the picker's delegate property, and present it (modally).\n\n    <pre>`- (IBAction)newButtonPress:(id)sender {\n        ABPeoplePickerNavigationController *peoplePicker = [[ABPeoplePickerNavigationController alloc] init];\n        peoplePicker.peoplePickerDelegate = self;\n\n        [self presentViewController:peoplePicker animated:YES completion:nil];\n    }\n    `</pre>\n\n    _No contacts?_ My simulator had an empty address book, so I added a few manually via the Contacts app. If you need to import a lot of contacts for testing, take a look at [this](http://stackoverflow.com/questions/901132/importing-addressbook-data-into-the-iphone-simulator).\n\n    ## Store a reference to a contact\n\n    Here is where the delegate methods come into play. I used the `-(BOOL)peoplePickerNavigationController:shouldContinueAfterSelectingPerson:` method as a handle to do things with the selected contact. Returning `YES` will push the contact detail view onto the picker's navigation stack. If you don't need that, just return `NO`.\n\n    The most important part of this is getting the ID of the contact/person (aka ABRecordRef). To get it, use this function: `ABRecordID contactId = ABRecordGetRecordID(contact)` This will return a primitive type of `ABRecordID` which is really a 32-bit integer. Thus, your entity attribute that will hold this value should also be 32-bit integer. But don't forget before you can save it to your entity object, it needs to be wrapped in an NSNumber by calling this method: `NSNumber *contactId = [NSNumber numberWithInt:ABRecordGetRecordID(contact)]`\n\n    A similar thing will need to happen if you want to store other properties of the ABRecordRef object. Here is an example of the contact's composite name: `NSString *contactName = (__bridge NSString *)(ABRecordCopyCompositeName(contact))`.\n\n    In fact, [Apple suggests storing the first and last name](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Chapters/DirectInteraction.html).\n\n    > The recommended way to keep a long-term reference to a particular record is to store the first and last name, or a hash of the first and last name, in addition to the identifier. When you look up a record by ID, compare the record’s name to your stored name. If they don’t match, use the stored name to find the record, and store the new ID for the record.\n\n    Once you have the ID and the other values you need to save, go ahead and store them.\n\n    ## Retrieve a contact using a stored reference\n\n    When it's time to use your reference to look up a contact, we first need to instantiate the address book object. I ran into a hiccup in testing for iOS 5 because the method in the docs is updated for iOS 6 only and doesn't explicitly say anything about iOS 5.\n\n    To get the address book in a backwards compatible way, you can simply do this:\n\n    <pre>`ABAddressBookRef addressBook;\n    if (&amp;ABAddressBookCreateWithOptions != NULL) {\n        addressBook = ABAddressBookCreateWithOptions(nil, nil);\n    } else { //below iOS 6\n        addressBook = ABAddressBookCreate();\n    }\n    `</pre>\n\n    Once you have the address book object, you can use this method to retrieve a contact and any of their properties by the ID you have stored. In the code below, `participant` is a Core Data entity object.\n\n    <pre>`ABRecordID contactID = (ABRecordID)participant.contactID.intValue;\n    ABRecordRef contact = ABAddressBookGetPersonWithRecordID(addressBook, contactID);\n    NSString *contactName = (__bridge NSString *)ABRecordCopyCompositeName(contact);\n\n## Conclusion\n\nI hope this makes things a bit easier for anyone starting to dig into the address book API.","slug":"working-contacts-ios-addressbook-tutorial","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsxb001c3fyspidh4uhn","content":"<p>iOS’s Addressbook framework is quite handy for enhancing the user’s experience when your app requires any contact related data. In this iOS Addressbook tutorial, I detail how I use this framework in conjunction with Core Data.</p>\n<a id=\"more\"></a>\n<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>This guide will explain how to:</p>\n<ul>\n<li>Show the address book picker.</li>\n<li>Store a reference to a contact.</li>\n<li>Retrieve a contact using a stored reference.</li>\n</ul>\n<p>It assumes prior knowledge of iOS programming and Core Data.</p>\n<p>I had to do this for a personal project I’m working on. I didn’t find any good guides, so I thought I’d write one.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Introduction.html\" target=\"_blank\" rel=\"external\">Address Book Programming Guide for iOS</a></li>\n</ul>\n<h2 id=\"Show-the-address-book-picker\"><a href=\"#Show-the-address-book-picker\" class=\"headerlink\" title=\"Show the address book picker\"></a>Show the address book picker</h2><p>We must add <strong>AddressBook.framework</strong> and <strong>AddressBookUI.framework</strong> into our project. After doing this, import the <strong>AddressBookUI</strong> framework and add the appropriate protocols you require into your class’s .h file. For my purposes, I’m using the <strong>ABPeoplePickerNavigationControllerDelegate</strong> protocol.</p>\n<pre><code>//  ParticipantsVC.h\n\n#import &amp;lt;UIKit/UIKit.h&amp;gt;\n#import &amp;lt;AddressBookUI/AddressBookUI.h&amp;gt;\n\n@interface ParticipantsVC : UITableViewController &amp;lt;ABPeoplePickerNavigationControllerDelegate&amp;gt;\n\n@end\n`&lt;/pre&gt;\n\nNext, implement the required and optional methods defined by the protocol in the corresponding .m file. I&apos;ve added a bit of code already to prevent crashing.\n\n&lt;pre&gt;`- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n      shouldContinueAfterSelectingPerson:(ABRecordRef)person {\n    return NO;\n}\n\n- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n      shouldContinueAfterSelectingPerson:(ABRecordRef)person\n                                property:(ABPropertyID)property\n                              identifier:(ABMultiValueIdentifier)identifier {\n    return NO;\n}\n\n- (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\nNext, I setup a UI button press event to show the address book picker. We simply instantiate the picker object, set the picker&apos;s delegate property, and present it (modally).\n\n&lt;pre&gt;`- (IBAction)newButtonPress:(id)sender {\n    ABPeoplePickerNavigationController *peoplePicker = [[ABPeoplePickerNavigationController alloc] init];\n    peoplePicker.peoplePickerDelegate = self;\n\n    [self presentViewController:peoplePicker animated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\n_No contacts?_ My simulator had an empty address book, so I added a few manually via the Contacts app. If you need to import a lot of contacts for testing, take a look at [this](http://stackoverflow.com/questions/901132/importing-addressbook-data-into-the-iphone-simulator).\n\n## Store a reference to a contact\n\nHere is where the delegate methods come into play. I used the `-(BOOL)peoplePickerNavigationController:shouldContinueAfterSelectingPerson:` method as a handle to do things with the selected contact. Returning `YES` will push the contact detail view onto the picker&apos;s navigation stack. If you don&apos;t need that, just return `NO`.\n\nThe most important part of this is getting the ID of the contact/person (aka ABRecordRef). To get it, use this function: `ABRecordID contactId = ABRecordGetRecordID(contact)` This will return a primitive type of `ABRecordID` which is really a 32-bit integer. Thus, your entity attribute that will hold this value should also be 32-bit integer. But don&apos;t forget before you can save it to your entity object, it needs to be wrapped in an NSNumber by calling this method: `NSNumber *contactId = [NSNumber numberWithInt:ABRecordGetRecordID(contact)]`\n\nA similar thing will need to happen if you want to store other properties of the ABRecordRef object. Here is an example of the contact&apos;s composite name: `NSString *contactName = (__bridge NSString *)(ABRecordCopyCompositeName(contact))`.\n\nIn fact, [Apple suggests storing the first and last name](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Chapters/DirectInteraction.html).\n\n&gt; The recommended way to keep a long-term reference to a particular record is to store the first and last name, or a hash of the first and last name, in addition to the identifier. When you look up a record by ID, compare the record’s name to your stored name. If they don’t match, use the stored name to find the record, and store the new ID for the record.\n\nOnce you have the ID and the other values you need to save, go ahead and store them.\n\n## Retrieve a contact using a stored reference\n\nWhen it&apos;s time to use your reference to look up a contact, we first need to instantiate the address book object. I ran into a hiccup in testing for iOS 5 because the method in the docs is updated for iOS 6 only and doesn&apos;t explicitly say anything about iOS 5.\n\nTo get the address book in a backwards compatible way, you can simply do this:\n\n&lt;pre&gt;`ABAddressBookRef addressBook;\nif (&amp;amp;ABAddressBookCreateWithOptions != NULL) {\n    addressBook = ABAddressBookCreateWithOptions(nil, nil);\n} else { //below iOS 6\n    addressBook = ABAddressBookCreate();\n}\n`&lt;/pre&gt;\n\nOnce you have the address book object, you can use this method to retrieve a contact and any of their properties by the ID you have stored. In the code below, `participant` is a Core Data entity object.\n\n&lt;pre&gt;`ABRecordID contactID = (ABRecordID)participant.contactID.intValue;\nABRecordRef contact = ABAddressBookGetPersonWithRecordID(addressBook, contactID);\nNSString *contactName = (__bridge NSString *)ABRecordCopyCompositeName(contact);\n</code></pre><h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I hope this makes things a bit easier for anyone starting to dig into the address book API.</p>\n","excerpt":"<p>iOS’s Addressbook framework is quite handy for enhancing the user’s experience when your app requires any contact related data. In this iOS Addressbook tutorial, I detail how I use this framework in conjunction with Core Data.</p>","more":"<h2 id=\"Overview\"><a href=\"#Overview\" class=\"headerlink\" title=\"Overview\"></a>Overview</h2><p>This guide will explain how to:</p>\n<ul>\n<li>Show the address book picker.</li>\n<li>Store a reference to a contact.</li>\n<li>Retrieve a contact using a stored reference.</li>\n</ul>\n<p>It assumes prior knowledge of iOS programming and Core Data.</p>\n<p>I had to do this for a personal project I’m working on. I didn’t find any good guides, so I thought I’d write one.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Introduction.html\">Address Book Programming Guide for iOS</a></li>\n</ul>\n<h2 id=\"Show-the-address-book-picker\"><a href=\"#Show-the-address-book-picker\" class=\"headerlink\" title=\"Show the address book picker\"></a>Show the address book picker</h2><p>We must add <strong>AddressBook.framework</strong> and <strong>AddressBookUI.framework</strong> into our project. After doing this, import the <strong>AddressBookUI</strong> framework and add the appropriate protocols you require into your class’s .h file. For my purposes, I’m using the <strong>ABPeoplePickerNavigationControllerDelegate</strong> protocol.</p>\n<pre><code>//  ParticipantsVC.h\n\n#import &amp;lt;UIKit/UIKit.h&amp;gt;\n#import &amp;lt;AddressBookUI/AddressBookUI.h&amp;gt;\n\n@interface ParticipantsVC : UITableViewController &amp;lt;ABPeoplePickerNavigationControllerDelegate&amp;gt;\n\n@end\n`&lt;/pre&gt;\n\nNext, implement the required and optional methods defined by the protocol in the corresponding .m file. I&apos;ve added a bit of code already to prevent crashing.\n\n&lt;pre&gt;`- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n      shouldContinueAfterSelectingPerson:(ABRecordRef)person {\n    return NO;\n}\n\n- (BOOL)peoplePickerNavigationController:(ABPeoplePickerNavigationController *)peoplePicker\n      shouldContinueAfterSelectingPerson:(ABRecordRef)person\n                                property:(ABPropertyID)property\n                              identifier:(ABMultiValueIdentifier)identifier {\n    return NO;\n}\n\n- (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker {\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\nNext, I setup a UI button press event to show the address book picker. We simply instantiate the picker object, set the picker&apos;s delegate property, and present it (modally).\n\n&lt;pre&gt;`- (IBAction)newButtonPress:(id)sender {\n    ABPeoplePickerNavigationController *peoplePicker = [[ABPeoplePickerNavigationController alloc] init];\n    peoplePicker.peoplePickerDelegate = self;\n\n    [self presentViewController:peoplePicker animated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\n_No contacts?_ My simulator had an empty address book, so I added a few manually via the Contacts app. If you need to import a lot of contacts for testing, take a look at [this](http://stackoverflow.com/questions/901132/importing-addressbook-data-into-the-iphone-simulator).\n\n## Store a reference to a contact\n\nHere is where the delegate methods come into play. I used the `-(BOOL)peoplePickerNavigationController:shouldContinueAfterSelectingPerson:` method as a handle to do things with the selected contact. Returning `YES` will push the contact detail view onto the picker&apos;s navigation stack. If you don&apos;t need that, just return `NO`.\n\nThe most important part of this is getting the ID of the contact/person (aka ABRecordRef). To get it, use this function: `ABRecordID contactId = ABRecordGetRecordID(contact)` This will return a primitive type of `ABRecordID` which is really a 32-bit integer. Thus, your entity attribute that will hold this value should also be 32-bit integer. But don&apos;t forget before you can save it to your entity object, it needs to be wrapped in an NSNumber by calling this method: `NSNumber *contactId = [NSNumber numberWithInt:ABRecordGetRecordID(contact)]`\n\nA similar thing will need to happen if you want to store other properties of the ABRecordRef object. Here is an example of the contact&apos;s composite name: `NSString *contactName = (__bridge NSString *)(ABRecordCopyCompositeName(contact))`.\n\nIn fact, [Apple suggests storing the first and last name](http://developer.apple.com/library/ios/#documentation/ContactData/Conceptual/AddressBookProgrammingGuideforiPhone/Chapters/DirectInteraction.html).\n\n&gt; The recommended way to keep a long-term reference to a particular record is to store the first and last name, or a hash of the first and last name, in addition to the identifier. When you look up a record by ID, compare the record’s name to your stored name. If they don’t match, use the stored name to find the record, and store the new ID for the record.\n\nOnce you have the ID and the other values you need to save, go ahead and store them.\n\n## Retrieve a contact using a stored reference\n\nWhen it&apos;s time to use your reference to look up a contact, we first need to instantiate the address book object. I ran into a hiccup in testing for iOS 5 because the method in the docs is updated for iOS 6 only and doesn&apos;t explicitly say anything about iOS 5.\n\nTo get the address book in a backwards compatible way, you can simply do this:\n\n&lt;pre&gt;`ABAddressBookRef addressBook;\nif (&amp;amp;ABAddressBookCreateWithOptions != NULL) {\n    addressBook = ABAddressBookCreateWithOptions(nil, nil);\n} else { //below iOS 6\n    addressBook = ABAddressBookCreate();\n}\n`&lt;/pre&gt;\n\nOnce you have the address book object, you can use this method to retrieve a contact and any of their properties by the ID you have stored. In the code below, `participant` is a Core Data entity object.\n\n&lt;pre&gt;`ABRecordID contactID = (ABRecordID)participant.contactID.intValue;\nABRecordRef contact = ABAddressBookGetPersonWithRecordID(addressBook, contactID);\nNSString *contactName = (__bridge NSString *)ABRecordCopyCompositeName(contact);\n</code></pre><h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>I hope this makes things a bit easier for anyone starting to dig into the address book API.</p>"},{"title":"Writing Clean Functions","id":"14","date":"2013-06-07T16:51:05.000Z","_content":"\nAfter reading some more of the book Clean Code, I was excited to try things out and demonstrate writing clean functions.\n\n<!--more-->\n\nI read part way through Chapter 3 on Functions today from the book [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). I think the biggest take away from writing functions is to keep them absolutely tiny. What stuck into my brain is this:\n\n1.  The function should have a pure and single purpose.\n2.  The purpose should be clearly stated via the function name\n3.  The function's code should be made up of only one level of abstraction below the function's level of abstraction.\n\nI think 1 and 2 are pretty clear, but 3 is something new to me. I wanted to try this on a real example of my own code (in Objective-C) to fully absorb this. Here is the before:\n\n    - (void)emailOrder\n    {\n        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n        mailer.mailComposeDelegate = self;\n\n        //Get the user's company name\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        NSDictionary *companyInfo = [defaults objectForKey:USER_COMPANY_INFO];\n        NSString *userCompanyName = companyInfo[USER_COMPANY_NAME];\n\n        NSString *subject = [NSString stringWithFormat:@\"Order #%@ from %@\", self.order.scOrderId, userCompanyName];\n        NSString *fileName = [NSString stringWithFormat:@\"Order %@\", self.order.scOrderId];\n        NSString *body = [NSString stringWithFormat:@\"Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n\", self.order.customer.dbaName];\n\n        NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n        if (pdfPath) {\n            NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n            [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n            [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n        }\n\n        [mailer setSubject:subject];\n\n        //Get the email objects, then build array with the actual email address strings\n        NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n        for (SCEmail *email in self.order.customer.emailList.allObjects) {\n            [emailStrings addObject:email.address];\n        }\n\n        [mailer setToRecipients:emailStrings];\n        if ([companyInfo objectForKey:USER_COMPANY_EMAIL]) {\n            NSArray *ccArray = [NSArray arrayWithObject:[companyInfo objectForKey:USER_COMPANY_EMAIL]];\n            [mailer setCcRecipients:ccArray];\n        }\n\n        [mailer setMessageBody:body isHTML:NO];\n        [self presentViewController:mailer animated:YES completion:nil];\n    }\n    `</pre>\n\n    The code has several things going on and certainly goes several levels of abstraction deep. So lets break it down using the method in the book. I'll only go down one branch of the hierarchy.\n\n*   To email the order, we setup the mailer and we display it on screen.\n        *   To setup the email composer, we instantiate the emailer object and set its properties.\n            *   To set the mailer's properties, we setup the delegate and we setup the recipients and we setup the subject and we setup the body and we setup the attachments.\n                *   To setup the recipients, we setup the \"to\" recipients and we setup the \"cc\" recipients.\n                    *   To setup the \"to\" recipients, we create an array and we fill the array with the email addresses and we set the mailer's property with that array.\n\n    Here is the after:\n\n    <pre>`- (void)emailOrder\n    {\n        MFMailComposeViewController *mailer = [self setupMailer];\n        [self presentViewController:mailer animated:YES completion:nil];\n    }\n\n    - (MFMailComposeViewController *)setupMailer\n    {\n        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n        [self setupPropertiesforMailer:mailer];\n        return mailer;\n    }\n\n    - (void)setupPropertiesforMailer:(MFMailComposeViewController *)mailer\n    {\n        mailer.mailComposeDelegate = self;\n        [self setupRecipientsForMailer:mailer];\n        [self setupSubjectForMailer:mailer];\n        [self setupBodyForMailer:mailer];\n        [self setupAttachmentForMailer:mailer];\n    }\n\n    - (void)setupRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        [self setupToRecipientsForMailer:mailer];\n        [self setupCcRecipientsForMailer:mailer];\n    }\n\n    - (void)setupToRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n        for (SCEmail *email in self.order.customer.emailList.allObjects) {\n            [emailStrings addObject:email.address];\n        }\n        [mailer setToRecipients:emailStrings];\n    }\n\n    - (void)setupCcRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSDictionary *userCompanyInfo = [self fetchUserCompanyInfo];\n        if ([userCompanyInfo objectForKey:USER_COMPANY_EMAIL]) {\n            NSArray *ccArray = [NSArray arrayWithObject:[userCompanyInfo objectForKey:USER_COMPANY_EMAIL]];\n            [mailer setCcRecipients:ccArray];\n        }\n    }\n\n    - (void)setupSubjectForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSDictionary *userCompanyInfo = [self fetchUserCompanyInfo];\n        NSString *userCompanyName = userCompanyInfo[USER_COMPANY_NAME];\n        NSString *subject = [NSString stringWithFormat:@\"Order #%@ from %@\", self.order.scOrderId, userCompanyName];\n        [mailer setSubject:subject];\n    }\n\n    - (void)setupBodyForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSString *body = [NSString stringWithFormat:@\"Dear %@,\\\\n\\\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\\\n\\\\n\", self.order.customer.dbaName];\n        [mailer setMessageBody:body isHTML:NO];\n    }\n\n    - (void)setupAttachmentForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSString *fileName = [NSString stringWithFormat:@\"Order %@\", self.order.scOrderId];\n        NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n        if (pdfPath) {\n            NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n            [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n            [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n        }\n    }\n\n    - (NSDictionary *)fetchUserCompanyInfo\n    {\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        return [defaults objectForKey:USER_COMPANY_INFO];\n    }\n\nIt took some time to refactor it, and it still needs a clean up on the names, but now I have a good idea of the concept. It felt like I was thinking more like a robot - very logical and procedural thinking. One observation I have is that the code is definitely more readable now. I can tell what a function is doing now at a glance. The only exception however are the leaf functions in the hierarchy. Because the code in those are not made up of more function calls, the language syntax makes it less readable.","source":"_posts/writing-clean-functions.md","raw":"---\ntitle: Writing Clean Functions\ntags:\n  - coding\nid: 14\ncategories:\n  - Uncategorized\ndate: 2013-06-07 12:51:05\n---\n\nAfter reading some more of the book Clean Code, I was excited to try things out and demonstrate writing clean functions.\n\n<!--more-->\n\nI read part way through Chapter 3 on Functions today from the book [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882). I think the biggest take away from writing functions is to keep them absolutely tiny. What stuck into my brain is this:\n\n1.  The function should have a pure and single purpose.\n2.  The purpose should be clearly stated via the function name\n3.  The function's code should be made up of only one level of abstraction below the function's level of abstraction.\n\nI think 1 and 2 are pretty clear, but 3 is something new to me. I wanted to try this on a real example of my own code (in Objective-C) to fully absorb this. Here is the before:\n\n    - (void)emailOrder\n    {\n        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n        mailer.mailComposeDelegate = self;\n\n        //Get the user's company name\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        NSDictionary *companyInfo = [defaults objectForKey:USER_COMPANY_INFO];\n        NSString *userCompanyName = companyInfo[USER_COMPANY_NAME];\n\n        NSString *subject = [NSString stringWithFormat:@\"Order #%@ from %@\", self.order.scOrderId, userCompanyName];\n        NSString *fileName = [NSString stringWithFormat:@\"Order %@\", self.order.scOrderId];\n        NSString *body = [NSString stringWithFormat:@\"Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n\", self.order.customer.dbaName];\n\n        NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n        if (pdfPath) {\n            NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n            [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n            [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n        }\n\n        [mailer setSubject:subject];\n\n        //Get the email objects, then build array with the actual email address strings\n        NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n        for (SCEmail *email in self.order.customer.emailList.allObjects) {\n            [emailStrings addObject:email.address];\n        }\n\n        [mailer setToRecipients:emailStrings];\n        if ([companyInfo objectForKey:USER_COMPANY_EMAIL]) {\n            NSArray *ccArray = [NSArray arrayWithObject:[companyInfo objectForKey:USER_COMPANY_EMAIL]];\n            [mailer setCcRecipients:ccArray];\n        }\n\n        [mailer setMessageBody:body isHTML:NO];\n        [self presentViewController:mailer animated:YES completion:nil];\n    }\n    `</pre>\n\n    The code has several things going on and certainly goes several levels of abstraction deep. So lets break it down using the method in the book. I'll only go down one branch of the hierarchy.\n\n*   To email the order, we setup the mailer and we display it on screen.\n        *   To setup the email composer, we instantiate the emailer object and set its properties.\n            *   To set the mailer's properties, we setup the delegate and we setup the recipients and we setup the subject and we setup the body and we setup the attachments.\n                *   To setup the recipients, we setup the \"to\" recipients and we setup the \"cc\" recipients.\n                    *   To setup the \"to\" recipients, we create an array and we fill the array with the email addresses and we set the mailer's property with that array.\n\n    Here is the after:\n\n    <pre>`- (void)emailOrder\n    {\n        MFMailComposeViewController *mailer = [self setupMailer];\n        [self presentViewController:mailer animated:YES completion:nil];\n    }\n\n    - (MFMailComposeViewController *)setupMailer\n    {\n        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n        [self setupPropertiesforMailer:mailer];\n        return mailer;\n    }\n\n    - (void)setupPropertiesforMailer:(MFMailComposeViewController *)mailer\n    {\n        mailer.mailComposeDelegate = self;\n        [self setupRecipientsForMailer:mailer];\n        [self setupSubjectForMailer:mailer];\n        [self setupBodyForMailer:mailer];\n        [self setupAttachmentForMailer:mailer];\n    }\n\n    - (void)setupRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        [self setupToRecipientsForMailer:mailer];\n        [self setupCcRecipientsForMailer:mailer];\n    }\n\n    - (void)setupToRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n        for (SCEmail *email in self.order.customer.emailList.allObjects) {\n            [emailStrings addObject:email.address];\n        }\n        [mailer setToRecipients:emailStrings];\n    }\n\n    - (void)setupCcRecipientsForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSDictionary *userCompanyInfo = [self fetchUserCompanyInfo];\n        if ([userCompanyInfo objectForKey:USER_COMPANY_EMAIL]) {\n            NSArray *ccArray = [NSArray arrayWithObject:[userCompanyInfo objectForKey:USER_COMPANY_EMAIL]];\n            [mailer setCcRecipients:ccArray];\n        }\n    }\n\n    - (void)setupSubjectForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSDictionary *userCompanyInfo = [self fetchUserCompanyInfo];\n        NSString *userCompanyName = userCompanyInfo[USER_COMPANY_NAME];\n        NSString *subject = [NSString stringWithFormat:@\"Order #%@ from %@\", self.order.scOrderId, userCompanyName];\n        [mailer setSubject:subject];\n    }\n\n    - (void)setupBodyForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSString *body = [NSString stringWithFormat:@\"Dear %@,\\\\n\\\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\\\n\\\\n\", self.order.customer.dbaName];\n        [mailer setMessageBody:body isHTML:NO];\n    }\n\n    - (void)setupAttachmentForMailer:(MFMailComposeViewController *)mailer\n    {\n        NSString *fileName = [NSString stringWithFormat:@\"Order %@\", self.order.scOrderId];\n        NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n        if (pdfPath) {\n            NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n            [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n            [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n        }\n    }\n\n    - (NSDictionary *)fetchUserCompanyInfo\n    {\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        return [defaults objectForKey:USER_COMPANY_INFO];\n    }\n\nIt took some time to refactor it, and it still needs a clean up on the names, but now I have a good idea of the concept. It felt like I was thinking more like a robot - very logical and procedural thinking. One observation I have is that the code is definitely more readable now. I can tell what a function is doing now at a glance. The only exception however are the leaf functions in the hierarchy. Because the code in those are not made up of more function calls, the language syntax makes it less readable.","slug":"writing-clean-functions","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsxd001f3fysatx7rx6k","content":"<p>After reading some more of the book Clean Code, I was excited to try things out and demonstrate writing clean functions.</p>\n<a id=\"more\"></a>\n<p>I read part way through Chapter 3 on Functions today from the book <a href=\"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\" target=\"_blank\" rel=\"external\">Clean Code</a>. I think the biggest take away from writing functions is to keep them absolutely tiny. What stuck into my brain is this:</p>\n<ol>\n<li>The function should have a pure and single purpose.</li>\n<li>The purpose should be clearly stated via the function name</li>\n<li>The function’s code should be made up of only one level of abstraction below the function’s level of abstraction.</li>\n</ol>\n<p>I think 1 and 2 are pretty clear, but 3 is something new to me. I wanted to try this on a real example of my own code (in Objective-C) to fully absorb this. Here is the before:</p>\n<pre><code>- (void)emailOrder\n{\n    MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n    mailer.mailComposeDelegate = self;\n\n    //Get the user&apos;s company name\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    NSDictionary *companyInfo = [defaults objectForKey:USER_COMPANY_INFO];\n    NSString *userCompanyName = companyInfo[USER_COMPANY_NAME];\n\n    NSString *subject = [NSString stringWithFormat:@&quot;Order #%@ from %@&quot;, self.order.scOrderId, userCompanyName];\n    NSString *fileName = [NSString stringWithFormat:@&quot;Order %@&quot;, self.order.scOrderId];\n    NSString *body = [NSString stringWithFormat:@&quot;Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n&quot;, self.order.customer.dbaName];\n\n    NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n    if (pdfPath) {\n        NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n        [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n        [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n    }\n\n    [mailer setSubject:subject];\n\n    //Get the email objects, then build array with the actual email address strings\n    NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n    for (SCEmail *email in self.order.customer.emailList.allObjects) {\n        [emailStrings addObject:email.address];\n    }\n\n    [mailer setToRecipients:emailStrings];\n    if ([companyInfo objectForKey:USER_COMPANY_EMAIL]) {\n        NSArray *ccArray = [NSArray arrayWithObject:[companyInfo objectForKey:USER_COMPANY_EMAIL]];\n        [mailer setCcRecipients:ccArray];\n    }\n\n    [mailer setMessageBody:body isHTML:NO];\n    [self presentViewController:mailer animated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\nThe code has several things going on and certainly goes several levels of abstraction deep. So lets break it down using the method in the book. I&apos;ll only go down one branch of the hierarchy.\n</code></pre><ul>\n<li><p>To email the order, we setup the mailer and we display it on screen.</p>\n<pre><code>*   To setup the email composer, we instantiate the emailer object and set its properties.\n    *   To set the mailer&apos;s properties, we setup the delegate and we setup the recipients and we setup the subject and we setup the body and we setup the attachments.\n        *   To setup the recipients, we setup the &quot;to&quot; recipients and we setup the &quot;cc&quot; recipients.\n            *   To setup the &quot;to&quot; recipients, we create an array and we fill the array with the email addresses and we set the mailer&apos;s property with that array.\n</code></pre><p>Here is the after:</p>\n<p><pre>`- (void)emailOrder<br>{</pre></p>\n<pre><code>MFMailComposeViewController *mailer = [self setupMailer];\n[self presentViewController:mailer animated:YES completion:nil];\n</code></pre><p>}</p>\n<ul>\n<li><p>(MFMailComposeViewController <em>)setupMailer<br>{<br>  MFMailComposeViewController </em>mailer = [[MFMailComposeViewController alloc] init];<br>  [self setupPropertiesforMailer:mailer];<br>  return mailer;<br>}</p>\n</li>\n<li><p>(void)setupPropertiesforMailer:(MFMailComposeViewController *)mailer<br>{<br>  mailer.mailComposeDelegate = self;<br>  [self setupRecipientsForMailer:mailer];<br>  [self setupSubjectForMailer:mailer];<br>  [self setupBodyForMailer:mailer];<br>  [self setupAttachmentForMailer:mailer];<br>}</p>\n</li>\n<li><p>(void)setupRecipientsForMailer:(MFMailComposeViewController *)mailer<br>{<br>  [self setupToRecipientsForMailer:mailer];<br>  [self setupCcRecipientsForMailer:mailer];<br>}</p>\n</li>\n<li><p>(void)setupToRecipientsForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSMutableArray </em>emailStrings = [[NSMutableArray alloc] init];<br>  for (SCEmail *email in self.order.customer.emailList.allObjects) {</p>\n<pre><code>[emailStrings addObject:email.address];\n</code></pre><p>  }<br>  [mailer setToRecipients:emailStrings];<br>}</p>\n</li>\n<li><p>(void)setupCcRecipientsForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSDictionary </em>userCompanyInfo = [self fetchUserCompanyInfo];<br>  if ([userCompanyInfo objectForKey:USER_COMPANY_EMAIL]) {</p>\n<pre><code>NSArray *ccArray = [NSArray arrayWithObject:[userCompanyInfo objectForKey:USER_COMPANY_EMAIL]];\n[mailer setCcRecipients:ccArray];\n</code></pre><p>  }<br>}</p>\n</li>\n<li><p>(void)setupSubjectForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSDictionary </em>userCompanyInfo = [self fetchUserCompanyInfo];<br>  NSString <em>userCompanyName = userCompanyInfo[USER_COMPANY_NAME];<br>  NSString </em>subject = [NSString stringWithFormat:@”Order #%@ from %@”, self.order.scOrderId, userCompanyName];<br>  [mailer setSubject:subject];<br>}</p>\n</li>\n<li><p>(void)setupBodyForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSString </em>body = [NSString stringWithFormat:@”Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n”, self.order.customer.dbaName];<br>  [mailer setMessageBody:body isHTML:NO];<br>}</p>\n</li>\n<li><p>(void)setupAttachmentForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSString </em>fileName = [NSString stringWithFormat:@”Order %@”, self.order.scOrderId];<br>  NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];<br>  if (pdfPath) {</p>\n<pre><code>NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n[self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n[mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n</code></pre><p>  }<br>}</p>\n</li>\n<li><p>(NSDictionary <em>)fetchUserCompanyInfo<br>{<br>  NSUserDefaults </em>defaults = [NSUserDefaults standardUserDefaults];<br>  return [defaults objectForKey:USER_COMPANY_INFO];<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>It took some time to refactor it, and it still needs a clean up on the names, but now I have a good idea of the concept. It felt like I was thinking more like a robot - very logical and procedural thinking. One observation I have is that the code is definitely more readable now. I can tell what a function is doing now at a glance. The only exception however are the leaf functions in the hierarchy. Because the code in those are not made up of more function calls, the language syntax makes it less readable.</p>\n","excerpt":"<p>After reading some more of the book Clean Code, I was excited to try things out and demonstrate writing clean functions.</p>","more":"<p>I read part way through Chapter 3 on Functions today from the book <a href=\"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">Clean Code</a>. I think the biggest take away from writing functions is to keep them absolutely tiny. What stuck into my brain is this:</p>\n<ol>\n<li>The function should have a pure and single purpose.</li>\n<li>The purpose should be clearly stated via the function name</li>\n<li>The function’s code should be made up of only one level of abstraction below the function’s level of abstraction.</li>\n</ol>\n<p>I think 1 and 2 are pretty clear, but 3 is something new to me. I wanted to try this on a real example of my own code (in Objective-C) to fully absorb this. Here is the before:</p>\n<pre><code>- (void)emailOrder\n{\n    MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];\n    mailer.mailComposeDelegate = self;\n\n    //Get the user&apos;s company name\n    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n    NSDictionary *companyInfo = [defaults objectForKey:USER_COMPANY_INFO];\n    NSString *userCompanyName = companyInfo[USER_COMPANY_NAME];\n\n    NSString *subject = [NSString stringWithFormat:@&quot;Order #%@ from %@&quot;, self.order.scOrderId, userCompanyName];\n    NSString *fileName = [NSString stringWithFormat:@&quot;Order %@&quot;, self.order.scOrderId];\n    NSString *body = [NSString stringWithFormat:@&quot;Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n&quot;, self.order.customer.dbaName];\n\n    NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];\n    if (pdfPath) {\n        NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n        [self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n        [mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n    }\n\n    [mailer setSubject:subject];\n\n    //Get the email objects, then build array with the actual email address strings\n    NSMutableArray *emailStrings = [[NSMutableArray alloc] init];\n    for (SCEmail *email in self.order.customer.emailList.allObjects) {\n        [emailStrings addObject:email.address];\n    }\n\n    [mailer setToRecipients:emailStrings];\n    if ([companyInfo objectForKey:USER_COMPANY_EMAIL]) {\n        NSArray *ccArray = [NSArray arrayWithObject:[companyInfo objectForKey:USER_COMPANY_EMAIL]];\n        [mailer setCcRecipients:ccArray];\n    }\n\n    [mailer setMessageBody:body isHTML:NO];\n    [self presentViewController:mailer animated:YES completion:nil];\n}\n`&lt;/pre&gt;\n\nThe code has several things going on and certainly goes several levels of abstraction deep. So lets break it down using the method in the book. I&apos;ll only go down one branch of the hierarchy.\n</code></pre><ul>\n<li><p>To email the order, we setup the mailer and we display it on screen.</p>\n<pre><code>*   To setup the email composer, we instantiate the emailer object and set its properties.\n    *   To set the mailer&apos;s properties, we setup the delegate and we setup the recipients and we setup the subject and we setup the body and we setup the attachments.\n        *   To setup the recipients, we setup the &quot;to&quot; recipients and we setup the &quot;cc&quot; recipients.\n            *   To setup the &quot;to&quot; recipients, we create an array and we fill the array with the email addresses and we set the mailer&apos;s property with that array.\n</code></pre><p>Here is the after:</p>\n<p><pre>`- (void)emailOrder<br>{</p>\n<pre><code>MFMailComposeViewController *mailer = [self setupMailer];\n[self presentViewController:mailer animated:YES completion:nil];\n</code></pre><p>}</p>\n<ul>\n<li><p>(MFMailComposeViewController <em>)setupMailer<br>{<br>  MFMailComposeViewController </em>mailer = [[MFMailComposeViewController alloc] init];<br>  [self setupPropertiesforMailer:mailer];<br>  return mailer;<br>}</p>\n</li>\n<li><p>(void)setupPropertiesforMailer:(MFMailComposeViewController *)mailer<br>{<br>  mailer.mailComposeDelegate = self;<br>  [self setupRecipientsForMailer:mailer];<br>  [self setupSubjectForMailer:mailer];<br>  [self setupBodyForMailer:mailer];<br>  [self setupAttachmentForMailer:mailer];<br>}</p>\n</li>\n<li><p>(void)setupRecipientsForMailer:(MFMailComposeViewController *)mailer<br>{<br>  [self setupToRecipientsForMailer:mailer];<br>  [self setupCcRecipientsForMailer:mailer];<br>}</p>\n</li>\n<li><p>(void)setupToRecipientsForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSMutableArray </em>emailStrings = [[NSMutableArray alloc] init];<br>  for (SCEmail *email in self.order.customer.emailList.allObjects) {</p>\n<pre><code>[emailStrings addObject:email.address];\n</code></pre><p>  }<br>  [mailer setToRecipients:emailStrings];<br>}</p>\n</li>\n<li><p>(void)setupCcRecipientsForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSDictionary </em>userCompanyInfo = [self fetchUserCompanyInfo];<br>  if ([userCompanyInfo objectForKey:USER_COMPANY_EMAIL]) {</p>\n<pre><code>NSArray *ccArray = [NSArray arrayWithObject:[userCompanyInfo objectForKey:USER_COMPANY_EMAIL]];\n[mailer setCcRecipients:ccArray];\n</code></pre><p>  }<br>}</p>\n</li>\n<li><p>(void)setupSubjectForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSDictionary </em>userCompanyInfo = [self fetchUserCompanyInfo];<br>  NSString <em>userCompanyName = userCompanyInfo[USER_COMPANY_NAME];<br>  NSString </em>subject = [NSString stringWithFormat:@”Order #%@ from %@”, self.order.scOrderId, userCompanyName];<br>  [mailer setSubject:subject];<br>}</p>\n</li>\n<li><p>(void)setupBodyForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSString </em>body = [NSString stringWithFormat:@”Dear %@,\\n\\nA copy of your order is attached to this email. We appreciate your business, thank you.\\n\\n”, self.order.customer.dbaName];<br>  [mailer setMessageBody:body isHTML:NO];<br>}</p>\n</li>\n<li><p>(void)setupAttachmentForMailer:(MFMailComposeViewController <em>)mailer<br>{<br>  NSString </em>fileName = [NSString stringWithFormat:@”Order %@”, self.order.scOrderId];<br>  NSString *pdfPath = [self pathForFileName:PDF_FILENAME withFileNameExtension:PDF_FILENAME_EXTENSION];<br>  if (pdfPath) {</p>\n<pre><code>NSData *pdfData = [NSData dataWithContentsOfFile:pdfPath];\n[self.webView loadData:pdfData MIMEType:PDF_MIME_TYPE textEncodingName:PDF_TEXT_ENCODING baseURL:nil];\n[mailer addAttachmentData:pdfData mimeType:PDF_MIME_TYPE fileName:fileName];\n</code></pre><p>  }<br>}</p>\n</li>\n<li><p>(NSDictionary <em>)fetchUserCompanyInfo<br>{<br>  NSUserDefaults </em>defaults = [NSUserDefaults standardUserDefaults];<br>  return [defaults objectForKey:USER_COMPANY_INFO];<br>}</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>It took some time to refactor it, and it still needs a clean up on the names, but now I have a good idea of the concept. It felt like I was thinking more like a robot - very logical and procedural thinking. One observation I have is that the code is definitely more readable now. I can tell what a function is doing now at a glance. The only exception however are the leaf functions in the hierarchy. Because the code in those are not made up of more function calls, the language syntax makes it less readable.</p>"},{"title":"Writing Great Git Commit Messages","id":"86","date":"2015-01-17T18:34:14.000Z","_content":"\nPeople care about _why_ you do things, more than _what_ you do. This notion certainly carries true for our Git commits. Today, I explore a best practice for writing great Git commit messages.\n\n<!--more-->\n\n## The Golden Circle\n\nI recently re-watched one of my favourite TED Talks by Simon Sinek: [How Great Leaders Inspire Action](http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action)\n\nIn this talk, Simon explains a very simple notion that people are inspired by why leaders do things, not what they do. Well guess what! It's the same for our git commit messages.\n\n![](http://i.imgur.com/QCpZaIk.png)\n\nSimon draws the \"golden circle\" above (a heck of lot better than mine) and explains that great companies have a profound purpose and are really good at communicating that purpose. With our code, we can think of each commit having its own purpose. And that it's our job to communicate it.\n\n## Why Does This Matter?\n\nYou may be wondering, what's the big deal? Why write about something so inconsequential. If you've ever worked on a team, or a long term project, you'll come across code you need to work with and don't understand why it's there. You'll [`git blame`](http://git-scm.com/docs/git-blame) it, find the commit and look at it. After the mini anxiety attack you just encountered hoping that commit wasn't made by you :), you read the commit message hoping to find your answer to \"why was this done?\".\n\nFurther, the vast majority of commit messages I've seen suffer from this problem. Including mine, until not so long ago. In fact, I used to be proud of my commit messages. I thought about them carefully and wrote them as clear as I could.\n\n## The \"Aha\" Moment\n\nOne day, I was pairing with [Craig Savolainen](https://twitter.com/maedhr), a mentor and one of the best developers I know. We were ready to commit our code and I wrote what I thought was a pretty decent commit message, until he explained that my commit message wan't useful. Then told me this:\n\n> Anyone can see WHAT you did just by looking at the code. But the code can never tell someone WHY you did it.\n\nBrilliant! I immediately switched to the new, purposeful commit messages. But it took some time getting used to it, because now I actually had to think - imagine that! Answering the question \"Why?\" definitely takes more brain power. But now that I've been doing it regularly, it's becoming fluid and natural. A pattern I've noticed is using the word \"should\" can help frame things.\n\n## Example\n\nHere's an example from an old project. I wrote this commit message in the old _what_ style:\n\n> Card view controller added.\n\nIf I were to write this again in the new and improved _why_ style, it would be:\n\n> User should be able to see the card before editing it.\n\nSee the difference? The second version provides the context around why this work was done. And this context can mean valuable effort saved by the developer working with this code later. And when that developer has questions, they will come looking for me. So, it also means effort saved by me, especially if I forgot why I originally made this commit, which will likely be the case!\n\n## Conclusion\n\nWriting a Git commit message that explains why we did something as opposed to what we did will help our teams out, and ourselves. A little bit of effort goes a long way here while making another stride in our journey to becoming better software craftsmen. If you have thoughts on this, or more Git message best practices, we'd love to hear about them.\n\nHappy exploring!\n\n* * *\n\n#### Side Note\n\nObviously, this tip goes beyond Git and applies to any source control tool. I originally was using the term \"code commit\", but based on feedback, I decided \"Git commit\" was more clear.","source":"_posts/writing-great-git-commit-messages.md","raw":"---\ntitle: Writing Great Git Commit Messages\ntags:\n  - craftsmanship\n  - source control\nid: 86\ncategories:\n  - Uncategorized\ndate: 2015-01-17 13:34:14\n---\n\nPeople care about _why_ you do things, more than _what_ you do. This notion certainly carries true for our Git commits. Today, I explore a best practice for writing great Git commit messages.\n\n<!--more-->\n\n## The Golden Circle\n\nI recently re-watched one of my favourite TED Talks by Simon Sinek: [How Great Leaders Inspire Action](http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action)\n\nIn this talk, Simon explains a very simple notion that people are inspired by why leaders do things, not what they do. Well guess what! It's the same for our git commit messages.\n\n![](http://i.imgur.com/QCpZaIk.png)\n\nSimon draws the \"golden circle\" above (a heck of lot better than mine) and explains that great companies have a profound purpose and are really good at communicating that purpose. With our code, we can think of each commit having its own purpose. And that it's our job to communicate it.\n\n## Why Does This Matter?\n\nYou may be wondering, what's the big deal? Why write about something so inconsequential. If you've ever worked on a team, or a long term project, you'll come across code you need to work with and don't understand why it's there. You'll [`git blame`](http://git-scm.com/docs/git-blame) it, find the commit and look at it. After the mini anxiety attack you just encountered hoping that commit wasn't made by you :), you read the commit message hoping to find your answer to \"why was this done?\".\n\nFurther, the vast majority of commit messages I've seen suffer from this problem. Including mine, until not so long ago. In fact, I used to be proud of my commit messages. I thought about them carefully and wrote them as clear as I could.\n\n## The \"Aha\" Moment\n\nOne day, I was pairing with [Craig Savolainen](https://twitter.com/maedhr), a mentor and one of the best developers I know. We were ready to commit our code and I wrote what I thought was a pretty decent commit message, until he explained that my commit message wan't useful. Then told me this:\n\n> Anyone can see WHAT you did just by looking at the code. But the code can never tell someone WHY you did it.\n\nBrilliant! I immediately switched to the new, purposeful commit messages. But it took some time getting used to it, because now I actually had to think - imagine that! Answering the question \"Why?\" definitely takes more brain power. But now that I've been doing it regularly, it's becoming fluid and natural. A pattern I've noticed is using the word \"should\" can help frame things.\n\n## Example\n\nHere's an example from an old project. I wrote this commit message in the old _what_ style:\n\n> Card view controller added.\n\nIf I were to write this again in the new and improved _why_ style, it would be:\n\n> User should be able to see the card before editing it.\n\nSee the difference? The second version provides the context around why this work was done. And this context can mean valuable effort saved by the developer working with this code later. And when that developer has questions, they will come looking for me. So, it also means effort saved by me, especially if I forgot why I originally made this commit, which will likely be the case!\n\n## Conclusion\n\nWriting a Git commit message that explains why we did something as opposed to what we did will help our teams out, and ourselves. A little bit of effort goes a long way here while making another stride in our journey to becoming better software craftsmen. If you have thoughts on this, or more Git message best practices, we'd love to hear about them.\n\nHappy exploring!\n\n* * *\n\n#### Side Note\n\nObviously, this tip goes beyond Git and applies to any source control tool. I originally was using the term \"code commit\", but based on feedback, I decided \"Git commit\" was more clear.","slug":"writing-great-git-commit-messages","published":1,"updated":"2017-02-17T04:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9bbsxe001j3fys5ntraxn8","content":"<p>People care about <em>why</em> you do things, more than <em>what</em> you do. This notion certainly carries true for our Git commits. Today, I explore a best practice for writing great Git commit messages.</p>\n<a id=\"more\"></a>\n<h2 id=\"The-Golden-Circle\"><a href=\"#The-Golden-Circle\" class=\"headerlink\" title=\"The Golden Circle\"></a>The Golden Circle</h2><p>I recently re-watched one of my favourite TED Talks by Simon Sinek: <a href=\"http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action\" target=\"_blank\" rel=\"external\">How Great Leaders Inspire Action</a></p>\n<p>In this talk, Simon explains a very simple notion that people are inspired by why leaders do things, not what they do. Well guess what! It’s the same for our git commit messages.</p>\n<p><img src=\"http://i.imgur.com/QCpZaIk.png\" alt=\"\"></p>\n<p>Simon draws the “golden circle” above (a heck of lot better than mine) and explains that great companies have a profound purpose and are really good at communicating that purpose. With our code, we can think of each commit having its own purpose. And that it’s our job to communicate it.</p>\n<h2 id=\"Why-Does-This-Matter\"><a href=\"#Why-Does-This-Matter\" class=\"headerlink\" title=\"Why Does This Matter?\"></a>Why Does This Matter?</h2><p>You may be wondering, what’s the big deal? Why write about something so inconsequential. If you’ve ever worked on a team, or a long term project, you’ll come across code you need to work with and don’t understand why it’s there. You’ll <a href=\"http://git-scm.com/docs/git-blame\" target=\"_blank\" rel=\"external\"><code>git blame</code></a> it, find the commit and look at it. After the mini anxiety attack you just encountered hoping that commit wasn’t made by you :), you read the commit message hoping to find your answer to “why was this done?”.</p>\n<p>Further, the vast majority of commit messages I’ve seen suffer from this problem. Including mine, until not so long ago. In fact, I used to be proud of my commit messages. I thought about them carefully and wrote them as clear as I could.</p>\n<h2 id=\"The-“Aha”-Moment\"><a href=\"#The-“Aha”-Moment\" class=\"headerlink\" title=\"The “Aha” Moment\"></a>The “Aha” Moment</h2><p>One day, I was pairing with <a href=\"https://twitter.com/maedhr\" target=\"_blank\" rel=\"external\">Craig Savolainen</a>, a mentor and one of the best developers I know. We were ready to commit our code and I wrote what I thought was a pretty decent commit message, until he explained that my commit message wan’t useful. Then told me this:</p>\n<blockquote>\n<p>Anyone can see WHAT you did just by looking at the code. But the code can never tell someone WHY you did it.</p>\n</blockquote>\n<p>Brilliant! I immediately switched to the new, purposeful commit messages. But it took some time getting used to it, because now I actually had to think - imagine that! Answering the question “Why?” definitely takes more brain power. But now that I’ve been doing it regularly, it’s becoming fluid and natural. A pattern I’ve noticed is using the word “should” can help frame things.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Here’s an example from an old project. I wrote this commit message in the old <em>what</em> style:</p>\n<blockquote>\n<p>Card view controller added.</p>\n</blockquote>\n<p>If I were to write this again in the new and improved <em>why</em> style, it would be:</p>\n<blockquote>\n<p>User should be able to see the card before editing it.</p>\n</blockquote>\n<p>See the difference? The second version provides the context around why this work was done. And this context can mean valuable effort saved by the developer working with this code later. And when that developer has questions, they will come looking for me. So, it also means effort saved by me, especially if I forgot why I originally made this commit, which will likely be the case!</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Writing a Git commit message that explains why we did something as opposed to what we did will help our teams out, and ourselves. A little bit of effort goes a long way here while making another stride in our journey to becoming better software craftsmen. If you have thoughts on this, or more Git message best practices, we’d love to hear about them.</p>\n<p>Happy exploring!</p>\n<hr>\n<h4 id=\"Side-Note\"><a href=\"#Side-Note\" class=\"headerlink\" title=\"Side Note\"></a>Side Note</h4><p>Obviously, this tip goes beyond Git and applies to any source control tool. I originally was using the term “code commit”, but based on feedback, I decided “Git commit” was more clear.</p>\n","excerpt":"<p>People care about <em>why</em> you do things, more than <em>what</em> you do. This notion certainly carries true for our Git commits. Today, I explore a best practice for writing great Git commit messages.</p>","more":"<h2 id=\"The-Golden-Circle\"><a href=\"#The-Golden-Circle\" class=\"headerlink\" title=\"The Golden Circle\"></a>The Golden Circle</h2><p>I recently re-watched one of my favourite TED Talks by Simon Sinek: <a href=\"http://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action\">How Great Leaders Inspire Action</a></p>\n<p>In this talk, Simon explains a very simple notion that people are inspired by why leaders do things, not what they do. Well guess what! It’s the same for our git commit messages.</p>\n<p><img src=\"http://i.imgur.com/QCpZaIk.png\" alt=\"\"></p>\n<p>Simon draws the “golden circle” above (a heck of lot better than mine) and explains that great companies have a profound purpose and are really good at communicating that purpose. With our code, we can think of each commit having its own purpose. And that it’s our job to communicate it.</p>\n<h2 id=\"Why-Does-This-Matter\"><a href=\"#Why-Does-This-Matter\" class=\"headerlink\" title=\"Why Does This Matter?\"></a>Why Does This Matter?</h2><p>You may be wondering, what’s the big deal? Why write about something so inconsequential. If you’ve ever worked on a team, or a long term project, you’ll come across code you need to work with and don’t understand why it’s there. You’ll <a href=\"http://git-scm.com/docs/git-blame\"><code>git blame</code></a> it, find the commit and look at it. After the mini anxiety attack you just encountered hoping that commit wasn’t made by you :), you read the commit message hoping to find your answer to “why was this done?”.</p>\n<p>Further, the vast majority of commit messages I’ve seen suffer from this problem. Including mine, until not so long ago. In fact, I used to be proud of my commit messages. I thought about them carefully and wrote them as clear as I could.</p>\n<h2 id=\"The-“Aha”-Moment\"><a href=\"#The-“Aha”-Moment\" class=\"headerlink\" title=\"The “Aha” Moment\"></a>The “Aha” Moment</h2><p>One day, I was pairing with <a href=\"https://twitter.com/maedhr\">Craig Savolainen</a>, a mentor and one of the best developers I know. We were ready to commit our code and I wrote what I thought was a pretty decent commit message, until he explained that my commit message wan’t useful. Then told me this:</p>\n<blockquote>\n<p>Anyone can see WHAT you did just by looking at the code. But the code can never tell someone WHY you did it.</p>\n</blockquote>\n<p>Brilliant! I immediately switched to the new, purposeful commit messages. But it took some time getting used to it, because now I actually had to think - imagine that! Answering the question “Why?” definitely takes more brain power. But now that I’ve been doing it regularly, it’s becoming fluid and natural. A pattern I’ve noticed is using the word “should” can help frame things.</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>Here’s an example from an old project. I wrote this commit message in the old <em>what</em> style:</p>\n<blockquote>\n<p>Card view controller added.</p>\n</blockquote>\n<p>If I were to write this again in the new and improved <em>why</em> style, it would be:</p>\n<blockquote>\n<p>User should be able to see the card before editing it.</p>\n</blockquote>\n<p>See the difference? The second version provides the context around why this work was done. And this context can mean valuable effort saved by the developer working with this code later. And when that developer has questions, they will come looking for me. So, it also means effort saved by me, especially if I forgot why I originally made this commit, which will likely be the case!</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Writing a Git commit message that explains why we did something as opposed to what we did will help our teams out, and ourselves. A little bit of effort goes a long way here while making another stride in our journey to becoming better software craftsmen. If you have thoughts on this, or more Git message best practices, we’d love to hear about them.</p>\n<p>Happy exploring!</p>\n<hr>\n<h4 id=\"Side-Note\"><a href=\"#Side-Note\" class=\"headerlink\" title=\"Side Note\"></a>Side Note</h4><p>Obviously, this tip goes beyond Git and applies to any source control tool. I originally was using the term “code commit”, but based on feedback, I decided “Git commit” was more clear.</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz9bbswc00063fys63ec4d2t","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswj000b3fysts0w85ej"},{"post_id":"ciz9bbsvw00003fysjnv1g4el","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswm000f3fyscjdm8esi"},{"post_id":"ciz9bbswd00073fys2l0vi7mb","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswp000h3fysark2m69c"},{"post_id":"ciz9bbswg000a3fyso6xlbc4u","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswr000k3fysml310m9j"},{"post_id":"ciz9bbsw400023fysj2hc6oyg","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswt000n3fyswdrnf0l6"},{"post_id":"ciz9bbswj000c3fysp0pubulm","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswv000q3fys3llgowt0"},{"post_id":"ciz9bbswn000g3fysjfgoy5j7","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbswx000u3fys66vak3ua"},{"post_id":"ciz9bbswa00053fysvrmafbqb","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsx0000x3fysdgyiosj6"},{"post_id":"ciz9bbswp000i3fysp3tq7h2m","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsx300103fysqmq4ndob"},{"post_id":"ciz9bbswr000l3fysvtqnv9ct","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsx400123fys507v592v"},{"post_id":"ciz9bbswt000o3fysrrifn82t","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsx600153fysjopa9b15"},{"post_id":"ciz9bbswv000s3fyskij14asu","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsx800173fysz2sjjl61"},{"post_id":"ciz9bbswx000v3fysvuhgdq9n","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxb001a3fysshyb1ol9"},{"post_id":"ciz9bbsx1000z3fyswwn94ei1","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxc001d3fysi7fkfjix"},{"post_id":"ciz9bbsx300113fysm7p1o2mq","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxe001h3fysx5yseepv"},{"post_id":"ciz9bbsx500143fysmfziwjsz","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxf001k3fyskhrgrno2"},{"post_id":"ciz9bbsx600163fysy3nmp377","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxf001m3fysg9gpo8uc"},{"post_id":"ciz9bbsx800183fys4azewa3h","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxg001o3fysw5oq03s8"},{"post_id":"ciz9bbsxb001c3fyspidh4uhn","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxh001r3fyst0vztx8o"},{"post_id":"ciz9bbsxd001f3fysatx7rx6k","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxh001s3fysds6ktcit"},{"post_id":"ciz9bbsxe001j3fys5ntraxn8","category_id":"ciz9bbsw700033fysknoui83t","_id":"ciz9bbsxh001t3fysp50ynshx"}],"PostTag":[{"post_id":"ciz9bbsvw00003fysjnv1g4el","tag_id":"ciz9bbsw900043fysbev0qew6","_id":"ciz9bbsws000m3fysq3nk0ds0"},{"post_id":"ciz9bbsvw00003fysjnv1g4el","tag_id":"ciz9bbswd00093fysx27qvhc7","_id":"ciz9bbswu000p3fysp6d8q9a7"},{"post_id":"ciz9bbsvw00003fysjnv1g4el","tag_id":"ciz9bbswm000e3fysbhesscog","_id":"ciz9bbswx000t3fysdl3j1dcr"},{"post_id":"ciz9bbsw400023fysj2hc6oyg","tag_id":"ciz9bbswq000j3fysxsei7x78","_id":"ciz9bbswz000w3fys4gevhfp8"},{"post_id":"ciz9bbswa00053fysvrmafbqb","tag_id":"ciz9bbswd00093fysx27qvhc7","_id":"ciz9bbsxb001b3fysrbzf01b4"},{"post_id":"ciz9bbswa00053fysvrmafbqb","tag_id":"ciz9bbswm000e3fysbhesscog","_id":"ciz9bbsxc001e3fys8y6yuebb"},{"post_id":"ciz9bbswa00053fysvrmafbqb","tag_id":"ciz9bbsx400133fyse6stmqov","_id":"ciz9bbsxe001i3fysczxmhwyv"},{"post_id":"ciz9bbswc00063fys63ec4d2t","tag_id":"ciz9bbsxa00193fys9r7t3nm9","_id":"ciz9bbsxg001n3fys31pjdq57"},{"post_id":"ciz9bbswc00063fys63ec4d2t","tag_id":"ciz9bbsxd001g3fysboln4j0t","_id":"ciz9bbsxg001p3fys0h8b4o45"},{"post_id":"ciz9bbswd00073fys2l0vi7mb","tag_id":"ciz9bbsxd001g3fysboln4j0t","_id":"ciz9bbsxi001w3fysv6xfzdaw"},{"post_id":"ciz9bbswd00073fys2l0vi7mb","tag_id":"ciz9bbsxg001q3fysjrgkvk5s","_id":"ciz9bbsxq001x3fysq28zskb2"},{"post_id":"ciz9bbswd00073fys2l0vi7mb","tag_id":"ciz9bbsxi001u3fys4a9v2zto","_id":"ciz9bbsxq001z3fysmkvjirfg"},{"post_id":"ciz9bbswg000a3fyso6xlbc4u","tag_id":"ciz9bbsxi001v3fyset3bzevx","_id":"ciz9bbsxs00213fysafsd6kl3"},{"post_id":"ciz9bbswg000a3fyso6xlbc4u","tag_id":"ciz9bbsw900043fysbev0qew6","_id":"ciz9bbsxt00223fysxx9ik7oh"},{"post_id":"ciz9bbswg000a3fyso6xlbc4u","tag_id":"ciz9bbswd00093fysx27qvhc7","_id":"ciz9bbsxt00243fystap0e1n4"},{"post_id":"ciz9bbswg000a3fyso6xlbc4u","tag_id":"ciz9bbswm000e3fysbhesscog","_id":"ciz9bbsxt00253fysome7gvon"},{"post_id":"ciz9bbswj000c3fysp0pubulm","tag_id":"ciz9bbsxq00203fys67s6t5um","_id":"ciz9bbsxu00273fys8zrggxso"},{"post_id":"ciz9bbswj000c3fysp0pubulm","tag_id":"ciz9bbsxi001v3fyset3bzevx","_id":"ciz9bbsxu00283fysvemmsfay"},{"post_id":"ciz9bbswn000g3fysjfgoy5j7","tag_id":"ciz9bbsxd001g3fysboln4j0t","_id":"ciz9bbsxv002b3fys63luvh7n"},{"post_id":"ciz9bbswn000g3fysjfgoy5j7","tag_id":"ciz9bbsxg001q3fysjrgkvk5s","_id":"ciz9bbsxv002c3fysiyv2rmqi"},{"post_id":"ciz9bbswp000i3fysp3tq7h2m","tag_id":"ciz9bbsxq00203fys67s6t5um","_id":"ciz9bbsxw002e3fysp861m3r5"},{"post_id":"ciz9bbswr000l3fysvtqnv9ct","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsxw002g3fysox84wsha"},{"post_id":"ciz9bbswt000o3fysrrifn82t","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsxy002j3fys21hme9ze"},{"post_id":"ciz9bbswt000o3fysrrifn82t","tag_id":"ciz9bbsxi001u3fys4a9v2zto","_id":"ciz9bbsxy002k3fysmk3iqrdg"},{"post_id":"ciz9bbswv000s3fyskij14asu","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsxy002m3fysqgvrp8ai"},{"post_id":"ciz9bbswx000v3fysvuhgdq9n","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsxz002o3fysnvfc8eur"},{"post_id":"ciz9bbsx1000z3fyswwn94ei1","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsy2002r3fys8q2bwrdu"},{"post_id":"ciz9bbsx1000z3fyswwn94ei1","tag_id":"ciz9bbsy0002p3fysraq98ntf","_id":"ciz9bbsy2002s3fys0xmea77k"},{"post_id":"ciz9bbsx300113fysm7p1o2mq","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsy3002v3fysgj12qnv6"},{"post_id":"ciz9bbsx300113fysm7p1o2mq","tag_id":"ciz9bbsy2002t3fyse4j1ym6u","_id":"ciz9bbsy3002w3fysxfvmr1hr"},{"post_id":"ciz9bbsx500143fysmfziwjsz","tag_id":"ciz9bbsy3002u3fyssh164syn","_id":"ciz9bbsy3002y3fyseyjdsjm5"},{"post_id":"ciz9bbsx600163fysy3nmp377","tag_id":"ciz9bbsxq00203fys67s6t5um","_id":"ciz9bbsy400303fysq3y7vawe"},{"post_id":"ciz9bbsx600163fysy3nmp377","tag_id":"ciz9bbsw900043fysbev0qew6","_id":"ciz9bbsy500313fys0jao6l9v"},{"post_id":"ciz9bbsx800183fys4azewa3h","tag_id":"ciz9bbsxd001g3fysboln4j0t","_id":"ciz9bbsya00363fysopssj9ga"},{"post_id":"ciz9bbsx800183fys4azewa3h","tag_id":"ciz9bbsxg001q3fysjrgkvk5s","_id":"ciz9bbsya00373fys0wcj7cxt"},{"post_id":"ciz9bbsx800183fys4azewa3h","tag_id":"ciz9bbsy500333fysjisor5z8","_id":"ciz9bbsyb00393fysj2egoyug"},{"post_id":"ciz9bbsx800183fys4azewa3h","tag_id":"ciz9bbsxi001u3fys4a9v2zto","_id":"ciz9bbsyb003a3fysq54nt7u7"},{"post_id":"ciz9bbsxb001c3fyspidh4uhn","tag_id":"ciz9bbsxv002d3fysf6rnkpp0","_id":"ciz9bbsyc003c3fyslo3rwgdv"},{"post_id":"ciz9bbsxd001f3fysatx7rx6k","tag_id":"ciz9bbsxd001g3fysboln4j0t","_id":"ciz9bbsyc003d3fysabv8ew1k"},{"post_id":"ciz9bbsxe001j3fys5ntraxn8","tag_id":"ciz9bbswd00093fysx27qvhc7","_id":"ciz9bbsyc003e3fyskokndzbq"},{"post_id":"ciz9bbsxe001j3fys5ntraxn8","tag_id":"ciz9bbsyb003b3fyshdlrampb","_id":"ciz9bbsyc003f3fysuqqsp056"}],"Tag":[{"name":"consulting","_id":"ciz9bbsw900043fysbev0qew6"},{"name":"craftsmanship","_id":"ciz9bbswd00093fysx27qvhc7"},{"name":"culture","_id":"ciz9bbswm000e3fysbhesscog"},{"name":"writing","_id":"ciz9bbswq000j3fysxsei7x78"},{"name":"pair programming","_id":"ciz9bbsx400133fyse6stmqov"},{"name":"books","_id":"ciz9bbsxa00193fys9r7t3nm9"},{"name":"coding","_id":"ciz9bbsxd001g3fysboln4j0t"},{"name":"design patterns","_id":"ciz9bbsxg001q3fysjrgkvk5s"},{"name":"swift","_id":"ciz9bbsxi001u3fys4a9v2zto"},{"name":"career","_id":"ciz9bbsxi001v3fyset3bzevx"},{"name":"business","_id":"ciz9bbsxq00203fys67s6t5um"},{"name":"ios","_id":"ciz9bbsxv002d3fysf6rnkpp0"},{"name":"testing","_id":"ciz9bbsy0002p3fysraq98ntf"},{"name":"performance","_id":"ciz9bbsy2002t3fyse4j1ym6u"},{"name":"fun","_id":"ciz9bbsy3002u3fyssh164syn"},{"name":"functional programming","_id":"ciz9bbsy500333fysjisor5z8"},{"name":"source control","_id":"ciz9bbsyb003b3fyshdlrampb"}]}}